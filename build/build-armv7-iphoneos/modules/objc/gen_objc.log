
=== MODULE: core (/Users/chungting/MyOpenCV/Repo/opencv/modules/core) ===


Files (4):
[u'/Users/chungting/MyOpenCV/Repo/opencv/modules/core/include/opencv2/core/base.hpp',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/core/include/opencv2/core.hpp',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/core/include/opencv2/core/utility.hpp',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/core/misc/objc/manual/core_manual.hpp']

Common headers (0):
[]
ok: class CLASS ::.Core : , name: Core, base: 


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/core/include/opencv2/core/base.hpp =====
Namespaces: set([u'cv.ogl', u'cv.cudev', u'cv.ipp', u'cv.Error', u'cv.cuda', u'cv'])

--- Incoming ---
[   u'enum cv.Error.Code',
    '',
    [],
    [   [u'const cv.Error.StsOk', u'0', [], [], None, ''],
        [u'const cv.Error.StsBackTrace', u'-1', [], [], None, ''],
        [u'const cv.Error.StsError', u'-2', [], [], None, ''],
        [u'const cv.Error.StsInternal', u'-3', [], [], None, ''],
        [u'const cv.Error.StsNoMem', u'-4', [], [], None, ''],
        [u'const cv.Error.StsBadArg', u'-5', [], [], None, ''],
        [u'const cv.Error.StsBadFunc', u'-6', [], [], None, ''],
        [u'const cv.Error.StsNoConv', u'-7', [], [], None, ''],
        [u'const cv.Error.StsAutoTrace', u'-8', [], [], None, ''],
        [u'const cv.Error.HeaderIsNull', u'-9', [], [], None, ''],
        [u'const cv.Error.BadImageSize', u'-10', [], [], None, ''],
        [u'const cv.Error.BadOffset', u'-11', [], [], None, ''],
        [u'const cv.Error.BadDataPtr', u'-12', [], [], None, ''],
        [u'const cv.Error.BadStep', u'-13', [], [], None, ''],
        [u'const cv.Error.BadModelOrChSeq', u'-14', [], [], None, ''],
        [u'const cv.Error.BadNumChannels', u'-15', [], [], None, ''],
        [u'const cv.Error.BadNumChannel1U', u'-16', [], [], None, ''],
        [u'const cv.Error.BadDepth', u'-17', [], [], None, ''],
        [u'const cv.Error.BadAlphaChannel', u'-18', [], [], None, ''],
        [u'const cv.Error.BadOrder', u'-19', [], [], None, ''],
        [u'const cv.Error.BadOrigin', u'-20', [], [], None, ''],
        [u'const cv.Error.BadAlign', u'-21', [], [], None, ''],
        [u'const cv.Error.BadCallBack', u'-22', [], [], None, ''],
        [u'const cv.Error.BadTileSize', u'-23', [], [], None, ''],
        [u'const cv.Error.BadCOI', u'-24', [], [], None, ''],
        [u'const cv.Error.BadROISize', u'-25', [], [], None, ''],
        [u'const cv.Error.MaskIsTiled', u'-26', [], [], None, ''],
        [u'const cv.Error.StsNullPtr', u'-27', [], [], None, ''],
        [u'const cv.Error.StsVecLengthErr', u'-28', [], [], None, ''],
        [   u'const cv.Error.StsFilterStructContentErr',
            u'-29',
            [],
            [],
            None,
            ''],
        [   u'const cv.Error.StsKernelStructContentErr',
            u'-30',
            [],
            [],
            None,
            ''],
        [u'const cv.Error.StsFilterOffsetErr', u'-31', [], [], None, ''],
        [u'const cv.Error.StsBadSize', u'-201', [], [], None, ''],
        [u'const cv.Error.StsDivByZero', u'-202', [], [], None, ''],
        [u'const cv.Error.StsInplaceNotSupported', u'-203', [], [], None, ''],
        [u'const cv.Error.StsObjectNotFound', u'-204', [], [], None, ''],
        [u'const cv.Error.StsUnmatchedFormats', u'-205', [], [], None, ''],
        [u'const cv.Error.StsBadFlag', u'-206', [], [], None, ''],
        [u'const cv.Error.StsBadPoint', u'-207', [], [], None, ''],
        [u'const cv.Error.StsBadMask', u'-208', [], [], None, ''],
        [u'const cv.Error.StsUnmatchedSizes', u'-209', [], [], None, ''],
        [u'const cv.Error.StsUnsupportedFormat', u'-210', [], [], None, ''],
        [u'const cv.Error.StsOutOfRange', u'-211', [], [], None, ''],
        [u'const cv.Error.StsParseError', u'-212', [], [], None, ''],
        [u'const cv.Error.StsNotImplemented', u'-213', [], [], None, ''],
        [u'const cv.Error.StsBadMemBlock', u'-214', [], [], None, ''],
        [u'const cv.Error.StsAssert', u'-215', [], [], None, ''],
        [u'const cv.Error.GpuNotSupported', u'-216', [], [], None, ''],
        [u'const cv.Error.GpuApiCallError', u'-217', [], [], None, ''],
        [u'const cv.Error.OpenGlNotSupported', u'-218', [], [], None, ''],
        [u'const cv.Error.OpenGlApiCallError', u'-219', [], [], None, ''],
        [u'const cv.Error.OpenCLApiCallError', u'-220', [], [], None, ''],
        [   u'const cv.Error.OpenCLDoubleNotSupported',
            u'-221',
            [],
            [],
            None,
            ''],
        [u'const cv.Error.OpenCLInitError', u'-222', [], [], None, ''],
        [u'const cv.Error.OpenCLNoAMDBlasFft', u'-223', [], [], None, '']],
    None]
ok: CONST StsOk=0
ok: CONST StsBackTrace=-1
ok: CONST StsError=-2
ok: CONST StsInternal=-3
ok: CONST StsNoMem=-4
ok: CONST StsBadArg=-5
ok: CONST StsBadFunc=-6
ok: CONST StsNoConv=-7
ok: CONST StsAutoTrace=-8
ok: CONST HeaderIsNull=-9
ok: CONST BadImageSize=-10
ok: CONST BadOffset=-11
ok: CONST BadDataPtr=-12
ok: CONST BadStep=-13
ok: CONST BadModelOrChSeq=-14
ok: CONST BadNumChannels=-15
ok: CONST BadNumChannel1U=-16
ok: CONST BadDepth=-17
ok: CONST BadAlphaChannel=-18
ok: CONST BadOrder=-19
ok: CONST BadOrigin=-20
ok: CONST BadAlign=-21
ok: CONST BadCallBack=-22
ok: CONST BadTileSize=-23
ok: CONST BadCOI=-24
ok: CONST BadROISize=-25
ok: CONST MaskIsTiled=-26
ok: CONST StsNullPtr=-27
ok: CONST StsVecLengthErr=-28
ok: CONST StsFilterStructContentErr=-29
ok: CONST StsKernelStructContentErr=-30
ok: CONST StsFilterOffsetErr=-31
ok: CONST StsBadSize=-201
ok: CONST StsDivByZero=-202
ok: CONST StsInplaceNotSupported=-203
ok: CONST StsObjectNotFound=-204
ok: CONST StsUnmatchedFormats=-205
ok: CONST StsBadFlag=-206
ok: CONST StsBadPoint=-207
ok: CONST StsBadMask=-208
ok: CONST StsUnmatchedSizes=-209
ok: CONST StsUnsupportedFormat=-210
ok: CONST StsOutOfRange=-211
ok: CONST StsParseError=-212
ok: CONST StsNotImplemented=-213
ok: CONST StsBadMemBlock=-214
ok: CONST StsAssert=-215
ok: CONST GpuNotSupported=-216
ok: CONST GpuApiCallError=-217
ok: CONST OpenGlNotSupported=-218
ok: CONST OpenGlApiCallError=-219
ok: CONST OpenCLApiCallError=-220
ok: CONST OpenCLDoubleNotSupported=-221
ok: CONST OpenCLInitError=-222
ok: CONST OpenCLNoAMDBlasFft=-223

--- Incoming ---
[   u'enum cv.DecompTypes',
    '',
    [],
    [   [u'const cv.DECOMP_LU', u'0', [], [], None, ''],
        [u'const cv.DECOMP_SVD', u'1', [], [], None, ''],
        [u'const cv.DECOMP_EIG', u'2', [], [], None, ''],
        [u'const cv.DECOMP_CHOLESKY', u'3', [], [], None, ''],
        [u'const cv.DECOMP_QR', u'4', [], [], None, ''],
        [u'const cv.DECOMP_NORMAL', u'16', [], [], None, '']],
    None]
ok: CONST DECOMP_LU=0
ok: CONST DECOMP_SVD=1
ok: CONST DECOMP_EIG=2
ok: CONST DECOMP_CHOLESKY=3
ok: CONST DECOMP_QR=4
ok: CONST DECOMP_NORMAL=16

--- Incoming ---
[   u'enum cv.NormTypes',
    '',
    [],
    [   [u'const cv.NORM_INF', u'1', [], [], None, ''],
        [u'const cv.NORM_L1', u'2', [], [], None, ''],
        [u'const cv.NORM_L2', u'4', [], [], None, ''],
        [u'const cv.NORM_L2SQR', u'5', [], [], None, ''],
        [u'const cv.NORM_HAMMING', u'6', [], [], None, ''],
        [u'const cv.NORM_HAMMING2', u'7', [], [], None, ''],
        [u'const cv.NORM_TYPE_MASK', u'7', [], [], None, ''],
        [u'const cv.NORM_RELATIVE', u'8', [], [], None, ''],
        [u'const cv.NORM_MINMAX', u'32', [], [], None, '']],
    None]
ok: CONST NORM_INF=1
ok: CONST NORM_L1=2
ok: CONST NORM_L2=4
ok: CONST NORM_L2SQR=5
ok: CONST NORM_HAMMING=6
ok: CONST NORM_HAMMING2=7
ok: CONST NORM_TYPE_MASK=7
ok: CONST NORM_RELATIVE=8
ok: CONST NORM_MINMAX=32

--- Incoming ---
[   u'enum cv.CmpTypes',
    '',
    [],
    [   [u'const cv.CMP_EQ', u'0', [], [], None, ''],
        [u'const cv.CMP_GT', u'1', [], [], None, ''],
        [u'const cv.CMP_GE', u'2', [], [], None, ''],
        [u'const cv.CMP_LT', u'3', [], [], None, ''],
        [u'const cv.CMP_LE', u'4', [], [], None, ''],
        [u'const cv.CMP_NE', u'5', [], [], None, '']],
    None]
ok: CONST CMP_EQ=0
ok: CONST CMP_GT=1
ok: CONST CMP_GE=2
ok: CONST CMP_LT=3
ok: CONST CMP_LE=4
ok: CONST CMP_NE=5

--- Incoming ---
[   u'enum cv.GemmFlags',
    '',
    [],
    [   [u'const cv.GEMM_1_T', u'1', [], [], None, ''],
        [u'const cv.GEMM_2_T', u'2', [], [], None, ''],
        [u'const cv.GEMM_3_T', u'4', [], [], None, '']],
    None]
ok: CONST GEMM_1_T=1
ok: CONST GEMM_2_T=2
ok: CONST GEMM_3_T=4

--- Incoming ---
[   u'enum cv.DftFlags',
    '',
    [],
    [   [u'const cv.DFT_INVERSE', u'1', [], [], None, ''],
        [u'const cv.DFT_SCALE', u'2', [], [], None, ''],
        [u'const cv.DFT_ROWS', u'4', [], [], None, ''],
        [u'const cv.DFT_COMPLEX_OUTPUT', u'16', [], [], None, ''],
        [u'const cv.DFT_REAL_OUTPUT', u'32', [], [], None, ''],
        [u'const cv.DFT_COMPLEX_INPUT', u'64', [], [], None, ''],
        [u'const cv.DCT_INVERSE', u'DFT_INVERSE', [], [], None, ''],
        [u'const cv.DCT_ROWS', u'DFT_ROWS', [], [], None, '']],
    None]
ok: CONST DFT_INVERSE=1
ok: CONST DFT_SCALE=2
ok: CONST DFT_ROWS=4
ok: CONST DFT_COMPLEX_OUTPUT=16
ok: CONST DFT_REAL_OUTPUT=32
ok: CONST DFT_COMPLEX_INPUT=64
ok: CONST DCT_INVERSE=DFT_INVERSE
ok: CONST DCT_ROWS=DFT_ROWS

--- Incoming ---
[   u'enum cv.BorderTypes',
    '',
    [],
    [   [u'const cv.BORDER_CONSTANT', u'0', [], [], None, ''],
        [u'const cv.BORDER_REPLICATE', u'1', [], [], None, ''],
        [u'const cv.BORDER_REFLECT', u'2', [], [], None, ''],
        [u'const cv.BORDER_WRAP', u'3', [], [], None, ''],
        [u'const cv.BORDER_REFLECT_101', u'4', [], [], None, ''],
        [u'const cv.BORDER_TRANSPARENT', u'5', [], [], None, ''],
        [   u'const cv.BORDER_REFLECT101',
            u'BORDER_REFLECT_101',
            [],
            [],
            None,
            ''],
        [u'const cv.BORDER_DEFAULT', u'BORDER_REFLECT_101', [], [], None, ''],
        [u'const cv.BORDER_ISOLATED', u'16', [], [], None, '']],
    None]
ok: CONST BORDER_CONSTANT=0
ok: CONST BORDER_REPLICATE=1
ok: CONST BORDER_REFLECT=2
ok: CONST BORDER_WRAP=3
ok: CONST BORDER_REFLECT_101=4
ok: CONST BORDER_TRANSPARENT=5
ok: CONST BORDER_REFLECT101=BORDER_REFLECT_101
ok: CONST BORDER_DEFAULT=BORDER_REFLECT_101
ok: CONST BORDER_ISOLATED=16

--- Incoming ---
[u'cv.cubeRoot', u'float', [], [[u'float', u'val', u'', []]], u'float']
ok: FUNC <float cv..cubeRoot [ARG float val=]>

--- Incoming ---
[   u'cv.fastAtan2',
    u'float',
    [],
    [[u'float', u'y', u'', []], [u'float', u'x', u'', []]],
    u'float']
ok: FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>

--- Incoming ---
[u'cv.ipp.useIPP', u'bool', [], [], u'bool']
ok: FUNC <bool cv.ipp..useIPP []>

--- Incoming ---
[u'cv.ipp.setUseIPP', u'void', [], [[u'bool', u'flag', u'', []]], u'void']
ok: FUNC <void cv.ipp..setUseIPP [ARG bool flag=]>

--- Incoming ---
[u'cv.ipp.getIppVersion', u'String', [], [], u'String']
ok: FUNC <String cv.ipp..getIppVersion []>

--- Incoming ---
[u'cv.ipp.useIPP_NotExact', u'bool', [], [], u'bool']
ok: FUNC <bool cv.ipp..useIPP_NotExact []>

--- Incoming ---
[   u'cv.ipp.setUseIPP_NotExact',
    u'void',
    [],
    [[u'bool', u'flag', u'', []]],
    u'void']
ok: FUNC <void cv.ipp..setUseIPP_NotExact [ARG bool flag=]>


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/core/include/opencv2/core.hpp =====
Namespaces: set([u'cv.ogl', u'cv.cudev', u'cv.ipp', u'cv.Error', u'cv.cuda', u'cv'])

--- Incoming ---
[   u'enum cv.SortFlags',
    '',
    [],
    [   [u'const cv.SORT_EVERY_ROW', u'0', [], [], None, ''],
        [u'const cv.SORT_EVERY_COLUMN', u'1', [], [], None, ''],
        [u'const cv.SORT_ASCENDING', u'0', [], [], None, ''],
        [u'const cv.SORT_DESCENDING', u'16', [], [], None, '']],
    None]
ok: CONST SORT_EVERY_ROW=0
ok: CONST SORT_EVERY_COLUMN=1
ok: CONST SORT_ASCENDING=0
ok: CONST SORT_DESCENDING=16

--- Incoming ---
[   u'enum cv.CovarFlags',
    '',
    [],
    [   [u'const cv.COVAR_SCRAMBLED', u'0', [], [], None, ''],
        [u'const cv.COVAR_NORMAL', u'1', [], [], None, ''],
        [u'const cv.COVAR_USE_AVG', u'2', [], [], None, ''],
        [u'const cv.COVAR_SCALE', u'4', [], [], None, ''],
        [u'const cv.COVAR_ROWS', u'8', [], [], None, ''],
        [u'const cv.COVAR_COLS', u'16', [], [], None, '']],
    None]
ok: CONST COVAR_SCRAMBLED=0
ok: CONST COVAR_NORMAL=1
ok: CONST COVAR_USE_AVG=2
ok: CONST COVAR_SCALE=4
ok: CONST COVAR_ROWS=8
ok: CONST COVAR_COLS=16

--- Incoming ---
[   u'enum cv.KmeansFlags',
    '',
    [],
    [   [u'const cv.KMEANS_RANDOM_CENTERS', u'0', [], [], None, ''],
        [u'const cv.KMEANS_PP_CENTERS', u'2', [], [], None, ''],
        [u'const cv.KMEANS_USE_INITIAL_LABELS', u'1', [], [], None, '']],
    None]
ok: CONST KMEANS_RANDOM_CENTERS=0
ok: CONST KMEANS_PP_CENTERS=2
ok: CONST KMEANS_USE_INITIAL_LABELS=1

--- Incoming ---
[   u'enum cv.ReduceTypes',
    '',
    [],
    [   [u'const cv.REDUCE_SUM', u'0', [], [], None, ''],
        [u'const cv.REDUCE_AVG', u'1', [], [], None, ''],
        [u'const cv.REDUCE_MAX', u'2', [], [], None, ''],
        [u'const cv.REDUCE_MIN', u'3', [], [], None, '']],
    None]
manual: CONST REDUCE_SUM=0
manual: CONST REDUCE_AVG=1
manual: CONST REDUCE_MAX=2
manual: CONST REDUCE_MIN=3

--- Incoming ---
[   u'cv.borderInterpolate',
    u'int',
    [],
    [   [u'int', u'p', u'', []],
        [u'int', u'len', u'', []],
        [u'int', u'borderType', u'', []]],
    u'int']
ok: FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG BorderTypes borderType=]>

--- Incoming ---
[   u'cv.copyMakeBorder',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'top', u'', []],
        [u'int', u'bottom', u'', []],
        [u'int', u'left', u'', []],
        [u'int', u'right', u'', []],
        [u'int', u'borderType', u'', []],
        [u'Scalar', u'value', u'Scalar()', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG BorderTypes borderType=, ARG Scalar value=Scalar()]>

--- Incoming ---
[   u'cv.add',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   u'cv.subtract',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   u'cv.multiply',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'scale', u'1', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.divide',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'scale', u'1', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.divide',
    u'void',
    [],
    [   [u'double', u'scale', u'', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..divide [ARG double scale=, ARG Mat src=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.scaleAdd',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'double', u'alpha', u'', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.addWeighted',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'double', u'alpha', u'', []],
        ['Mat', u'src2', '', []],
        [u'double', u'beta', u'', []],
        [u'double', u'gamma', u'', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.convertScaleAbs',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'alpha', u'1', []],
        [u'double', u'beta', u'0', []]],
    u'void']
ok: FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>

--- Incoming ---
[   u'cv.convertFp16',
    u'void',
    [],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..convertFp16 [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.LUT',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'lut', '', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>

--- Incoming ---
[u'cv.sum', u'Scalar', [u'=sumElems'], [['Mat', u'src', '', []]], u'Scalar']
ok: FUNC <Scalar cv..sum [ARG Mat src=]>

--- Incoming ---
[u'cv.countNonZero', u'int', [], [['Mat', u'src', '', []]], u'int']
ok: FUNC <int cv..countNonZero [ARG Mat src=]>

--- Incoming ---
[   u'cv.findNonZero',
    u'void',
    [],
    [['Mat', u'src', '', []], ['Mat', u'idx', '', ['/O']]],
    u'void']
ok: FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>

--- Incoming ---
[   u'cv.mean',
    u'Scalar',
    [],
    [['Mat', u'src', '', []], ['Mat', u'mask', u'Mat()', []]],
    u'Scalar']
ok: FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.meanStdDev',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'mean', '', ['/O']],
        ['Mat', u'stddev', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.norm',
    u'double',
    [],
    [   ['Mat', u'src1', '', []],
        [u'int', u'normType', u'NORM_L2', []],
        ['Mat', u'mask', u'Mat()', []]],
    u'double']
ok: FUNC <double cv..norm [ARG Mat src1=, ARG NormTypes normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.norm',
    u'double',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        [u'int', u'normType', u'NORM_L2', []],
        ['Mat', u'mask', u'Mat()', []]],
    u'double']
ok: FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG NormTypes normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.PSNR',
    u'double',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        [u'double', u'R', u'255.', []]],
    u'double']
ok: FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=, ARG double R=255.]>

--- Incoming ---
[   u'cv.batchDistance',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dist', '', ['/O']],
        [u'int', u'dtype', u'', []],
        ['Mat', u'nidx', '', ['/O']],
        [u'int', u'normType', u'NORM_L2', []],
        [u'int', u'K', u'0', []],
        ['Mat', u'mask', u'Mat()', []],
        [u'int', u'update', u'0', []],
        [u'bool', u'crosscheck', u'false', []]],
    u'void']
ok: FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG NormTypes normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>

--- Incoming ---
[   u'cv.normalize',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/IO']],
        [u'double', u'alpha', u'1', []],
        [u'double', u'beta', u'0', []],
        [u'int', u'norm_type', u'NORM_L2', []],
        [u'int', u'dtype', u'-1', []],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG NormTypes norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.minMaxLoc',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        [u'double*', u'minVal', u'', ['/O']],
        [u'double*', u'maxVal', u'0', ['/O']],
        [u'Point*', u'minLoc', u'0', ['/O']],
        [u'Point*', u'maxLoc', u'0', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
manual: FUNC <void cv..minMaxLoc [ARG Mat src=, ARG double * minVal=, ARG double * maxVal=0, ARG Point * minLoc=0, ARG Point * maxLoc=0, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.reduce',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'dim', u'', []],
        [u'int', u'rtype', u'', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.merge',
    u'void',
    [],
    [['vector_Mat', u'mv', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.split',
    u'void',
    [],
    [['Mat', u'm', '', []], ['vector_Mat', u'mv', '', ['/O']]],
    u'void']
ok: FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>

--- Incoming ---
[   u'cv.mixChannels',
    u'void',
    [],
    [   ['vector_Mat', u'src', '', []],
        ['vector_Mat', u'dst', '', ['/IO']],
        [u'vector_int', u'fromTo', u'', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>

--- Incoming ---
[   u'cv.extractChannel',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'coi', u'', []]],
    u'void']
ok: FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   u'cv.insertChannel',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/IO']],
        [u'int', u'coi', u'', []]],
    u'void']
ok: FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   u'cv.flip',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flipCode', u'', []]],
    u'void']
ok: FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>

--- Incoming ---
[   u'enum cv.RotateFlags',
    '',
    [],
    [   [u'const cv.ROTATE_90_CLOCKWISE', u'0', [], [], None, ''],
        [u'const cv.ROTATE_180', u'1', [], [], None, ''],
        [u'const cv.ROTATE_90_COUNTERCLOCKWISE', u'2', [], [], None, '']],
    None]
ok: CONST ROTATE_90_CLOCKWISE=0
ok: CONST ROTATE_180=1
ok: CONST ROTATE_90_COUNTERCLOCKWISE=2

--- Incoming ---
[   u'cv.rotate',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'rotateCode', u'', []]],
    u'void']
ok: FUNC <void cv..rotate [ARG Mat src=, ARG Mat dst=, ARG RotateFlags rotateCode=]>

--- Incoming ---
[   u'cv.repeat',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        [u'int', u'ny', u'', []],
        [u'int', u'nx', u'', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.hconcat',
    u'void',
    [],
    [['vector_Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.vconcat',
    u'void',
    [],
    [['vector_Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.bitwise_and',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.bitwise_or',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.bitwise_xor',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.bitwise_not',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.absdiff',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.copyTo',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', '', []]],
    u'void']
ok: FUNC <void cv..copyTo [ARG Mat src=, ARG Mat dst=, ARG Mat mask=]>

--- Incoming ---
[   u'cv.inRange',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'lowerb', '', []],
        ['Mat', u'upperb', '', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.compare',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'cmpop', u'', []]],
    u'void']
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG CmpTypes cmpop=]>

--- Incoming ---
[   u'cv.min',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.max',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.sqrt',
    u'void',
    [],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.pow',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        [u'double', u'power', u'', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.exp',
    u'void',
    [],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.log',
    u'void',
    [],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.polarToCart',
    u'void',
    [],
    [   ['Mat', u'magnitude', '', []],
        ['Mat', u'angle', '', []],
        ['Mat', u'x', '', ['/O']],
        ['Mat', u'y', '', ['/O']],
        [u'bool', u'angleInDegrees', u'false', []]],
    u'void']
ok: FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   u'cv.cartToPolar',
    u'void',
    [],
    [   ['Mat', u'x', '', []],
        ['Mat', u'y', '', []],
        ['Mat', u'magnitude', '', ['/O']],
        ['Mat', u'angle', '', ['/O']],
        [u'bool', u'angleInDegrees', u'false', []]],
    u'void']
ok: FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   u'cv.phase',
    u'void',
    [],
    [   ['Mat', u'x', '', []],
        ['Mat', u'y', '', []],
        ['Mat', u'angle', '', ['/O']],
        [u'bool', u'angleInDegrees', u'false', []]],
    u'void']
ok: FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   u'cv.magnitude',
    u'void',
    [],
    [   ['Mat', u'x', '', []],
        ['Mat', u'y', '', []],
        ['Mat', u'magnitude', '', ['/O']]],
    u'void']
ok: FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>

--- Incoming ---
[   u'cv.checkRange',
    u'bool',
    [],
    [   ['Mat', u'a', '', []],
        [u'bool', u'quiet', u'true', []],
        [u'Point*', u'pos', u'0', ['/O']],
        [u'double', u'minVal', u'-DBL_MAX', []],
        [u'double', u'maxVal', u'DBL_MAX', []]],
    u'bool']
ok: FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>

--- Incoming ---
[   u'cv.patchNaNs',
    u'void',
    [],
    [['Mat', u'a', '', ['/IO']], [u'double', u'val', u'0', []]],
    u'void']
ok: FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>

--- Incoming ---
[   u'cv.gemm',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        [u'double', u'alpha', u'', []],
        ['Mat', u'src3', '', []],
        [u'double', u'beta', u'', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   u'cv.mulTransposed',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'bool', u'aTa', u'', []],
        ['Mat', u'delta', u'Mat()', []],
        [u'double', u'scale', u'1', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.transpose',
    u'void',
    [],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.transform',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'm', '', []]],
    u'void']
ok: FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   u'cv.perspectiveTransform',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'm', '', []]],
    u'void']
ok: FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   u'cv.completeSymm',
    u'void',
    [],
    [['Mat', u'm', '', ['/IO']], [u'bool', u'lowerToUpper', u'false', []]],
    u'void']
ok: FUNC <void cv..completeSymm [ARG Mat m=, ARG bool lowerToUpper=false]>

--- Incoming ---
[   u'cv.setIdentity',
    u'void',
    [],
    [   ['Mat', u'mtx', '', ['/IO']],
        [u'Scalar', u's', u'Scalar(1)', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>

--- Incoming ---
[u'cv.determinant', u'double', [], [['Mat', u'mtx', '', []]], u'double']
ok: FUNC <double cv..determinant [ARG Mat mtx=]>

--- Incoming ---
[u'cv.trace', u'Scalar', [], [['Mat', u'mtx', '', []]], u'Scalar']
ok: FUNC <Scalar cv..trace [ARG Mat mtx=]>

--- Incoming ---
[   u'cv.invert',
    u'double',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'DECOMP_LU', []]],
    u'double']
ok: FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   u'cv.solve',
    u'bool',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'DECOMP_LU', []]],
    u'bool']
ok: FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   u'cv.sort',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'', []]],
    u'void']
ok: FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   u'cv.sortIdx',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'', []]],
    u'void']
ok: FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   u'cv.solveCubic',
    u'int',
    [],
    [['Mat', u'coeffs', '', []], ['Mat', u'roots', '', ['/O']]],
    u'int']
ok: FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>

--- Incoming ---
[   u'cv.solvePoly',
    u'double',
    [],
    [   ['Mat', u'coeffs', '', []],
        ['Mat', u'roots', '', ['/O']],
        [u'int', u'maxIters', u'300', []]],
    u'double']
ok: FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>

--- Incoming ---
[   u'cv.eigen',
    u'bool',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'eigenvalues', '', ['/O']],
        ['Mat', u'eigenvectors', u'Mat()', ['/O']]],
    u'bool']
ok: FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>

--- Incoming ---
[   u'cv.eigenNonSymmetric',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'eigenvalues', '', ['/O']],
        ['Mat', u'eigenvectors', '', ['/O']]],
    u'void']
ok: FUNC <void cv..eigenNonSymmetric [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=]>

--- Incoming ---
[   u'cv.calcCovarMatrix',
    u'void',
    [],
    [   ['Mat', u'samples', '', []],
        ['Mat', u'covar', '', ['/O']],
        ['Mat', u'mean', '', ['/IO']],
        [u'int', u'flags', u'', []],
        [u'int', u'ctype', u'CV_64F', []]],
    u'void']
ok: FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>

--- Incoming ---
[   u'cv.PCACompute',
    u'void',
    [],
    [   ['Mat', u'data', '', []],
        ['Mat', u'mean', '', ['/IO']],
        ['Mat', u'eigenvectors', '', ['/O']],
        [u'int', u'maxComponents', u'0', []]],
    u'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>

--- Incoming ---
[   u'cv.PCACompute',
    u'void',
    [u'=PCACompute2'],
    [   ['Mat', u'data', '', []],
        ['Mat', u'mean', '', ['/IO']],
        ['Mat', u'eigenvectors', '', ['/O']],
        ['Mat', u'eigenvalues', '', ['/O']],
        [u'int', u'maxComponents', u'0', []]],
    u'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG int maxComponents=0]>

--- Incoming ---
[   u'cv.PCACompute',
    u'void',
    [],
    [   ['Mat', u'data', '', []],
        ['Mat', u'mean', '', ['/IO']],
        ['Mat', u'eigenvectors', '', ['/O']],
        [u'double', u'retainedVariance', u'', []]],
    u'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>

--- Incoming ---
[   u'cv.PCACompute',
    u'void',
    [u'=PCACompute2'],
    [   ['Mat', u'data', '', []],
        ['Mat', u'mean', '', ['/IO']],
        ['Mat', u'eigenvectors', '', ['/O']],
        ['Mat', u'eigenvalues', '', ['/O']],
        [u'double', u'retainedVariance', u'', []]],
    u'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG double retainedVariance=]>

--- Incoming ---
[   u'cv.PCAProject',
    u'void',
    [],
    [   ['Mat', u'data', '', []],
        ['Mat', u'mean', '', []],
        ['Mat', u'eigenvectors', '', []],
        ['Mat', u'result', '', ['/O']]],
    u'void']
ok: FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   u'cv.PCABackProject',
    u'void',
    [],
    [   ['Mat', u'data', '', []],
        ['Mat', u'mean', '', []],
        ['Mat', u'eigenvectors', '', []],
        ['Mat', u'result', '', ['/O']]],
    u'void']
ok: FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   u'cv.SVDecomp',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'w', '', ['/O']],
        ['Mat', u'u', '', ['/O']],
        ['Mat', u'vt', '', ['/O']],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>

--- Incoming ---
[   u'cv.SVBackSubst',
    u'void',
    [],
    [   ['Mat', u'w', '', []],
        ['Mat', u'u', '', []],
        ['Mat', u'vt', '', []],
        ['Mat', u'rhs', '', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.Mahalanobis',
    u'double',
    [],
    [   ['Mat', u'v1', '', []],
        ['Mat', u'v2', '', []],
        ['Mat', u'icovar', '', []]],
    u'double']
ok: FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>

--- Incoming ---
[   u'cv.dft',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'0', []],
        [u'int', u'nonzeroRows', u'0', []]],
    u'void']
ok: FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   u'cv.idft',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'0', []],
        [u'int', u'nonzeroRows', u'0', []]],
    u'void']
ok: FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   u'cv.dct',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   u'cv.idct',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   u'cv.mulSpectrums',
    u'void',
    [],
    [   ['Mat', u'a', '', []],
        ['Mat', u'b', '', []],
        ['Mat', u'c', '', ['/O']],
        [u'int', u'flags', u'', []],
        [u'bool', u'conjB', u'false', []]],
    u'void']
ok: FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>

--- Incoming ---
[u'cv.getOptimalDFTSize', u'int', [], [[u'int', u'vecsize', u'', []]], u'int']
ok: FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>

--- Incoming ---
[u'cv.setRNGSeed', u'void', [], [[u'int', u'seed', u'', []]], u'void']
ok: FUNC <void cv..setRNGSeed [ARG int seed=]>

--- Incoming ---
[   u'cv.randu',
    u'void',
    [],
    [   ['Mat', u'dst', '', ['/IO']],
        ['Mat', u'low', '', []],
        ['Mat', u'high', '', []]],
    u'void']
ok: FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>

--- Incoming ---
[   u'cv.randn',
    u'void',
    [],
    [   ['Mat', u'dst', '', ['/IO']],
        ['Mat', u'mean', '', []],
        ['Mat', u'stddev', '', []]],
    u'void']
ok: FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>

--- Incoming ---
[   u'cv.randShuffle',
    u'void',
    [],
    [   ['Mat', u'dst', '', ['/IO']],
        [u'double', u'iterFactor', u'1.', []],
        [u'RNG*', u'rng', u'0', []]],
    u'void']
ok: FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG  * rng=0]>

--- Incoming ---
[   u'enum cv.PCA.Flags',
    '',
    [],
    [   [u'const cv.PCA.DATA_AS_ROW', u'0', [], [], None, ''],
        [u'const cv.PCA.DATA_AS_COL', u'1', [], [], None, ''],
        [u'const cv.PCA.USE_AVG', u'2', [], [], None, '']],
    None]
class not found: CONST DATA_AS_ROW=0
ok: CONST PCA_DATA_AS_ROW=0
class not found: CONST DATA_AS_COL=1
ok: CONST PCA_DATA_AS_COL=1
class not found: CONST USE_AVG=2
ok: CONST PCA_USE_AVG=2

--- Incoming ---
[   u'enum cv.SVD.Flags',
    '',
    [],
    [   [u'const cv.SVD.MODIFY_A', u'1', [], [], None, ''],
        [u'const cv.SVD.NO_UV', u'2', [], [], None, ''],
        [u'const cv.SVD.FULL_UV', u'4', [], [], None, '']],
    None]
class not found: CONST MODIFY_A=1
manual: CONST SVD_MODIFY_A=1
class not found: CONST NO_UV=2
manual: CONST SVD_NO_UV=2
class not found: CONST FULL_UV=4
manual: CONST SVD_FULL_UV=4

--- Incoming ---
[   u'enum cv.RNG.<unnamed>',
    '',
    [],
    [   [u'const cv.RNG.UNIFORM', u'0', [], [], None, ''],
        [u'const cv.RNG.NORMAL', u'1', [], [], None, '']],
    None]
class not found: CONST UNIFORM=0
ok: CONST RNG_UNIFORM=0
class not found: CONST NORMAL=1
ok: CONST RNG_NORMAL=1

--- Incoming ---
[   u'cv.kmeans',
    u'double',
    [],
    [   ['Mat', u'data', '', []],
        [u'int', u'K', u'', []],
        ['Mat', u'bestLabels', '', ['/IO']],
        [u'TermCriteria', u'criteria', u'', []],
        [u'int', u'attempts', u'', []],
        [u'int', u'flags', u'', []],
        ['Mat', u'centers', u'Mat()', ['/O']]],
    u'double']
ok: FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>

--- Incoming ---
[   u'enum cv.Formatter.FormatType',
    '',
    [],
    [   [u'const cv.Formatter.FMT_DEFAULT', u'0', [], [], None, ''],
        [u'const cv.Formatter.FMT_MATLAB', u'1', [], [], None, ''],
        [u'const cv.Formatter.FMT_CSV', u'2', [], [], None, ''],
        [u'const cv.Formatter.FMT_PYTHON', u'3', [], [], None, ''],
        [u'const cv.Formatter.FMT_NUMPY', u'4', [], [], None, ''],
        [u'const cv.Formatter.FMT_C', u'5', [], [], None, '']],
    None]
class not found: CONST FMT_DEFAULT=0
ok: CONST Formatter_FMT_DEFAULT=0
class not found: CONST FMT_MATLAB=1
ok: CONST Formatter_FMT_MATLAB=1
class not found: CONST FMT_CSV=2
ok: CONST Formatter_FMT_CSV=2
class not found: CONST FMT_PYTHON=3
ok: CONST Formatter_FMT_PYTHON=3
class not found: CONST FMT_NUMPY=4
ok: CONST Formatter_FMT_NUMPY=4
class not found: CONST FMT_C=5
ok: CONST Formatter_FMT_C=5

--- Incoming ---
[u'class cv.Algorithm', '', [], [], None]
duplicated: CLASS cv::.Algorithm : 

--- Incoming ---
[u'cv.Algorithm.clear', u'void', ['/V'], [], u'void']
ok: FUNC <void cv.Algorithm.clear []>

--- Incoming ---
[   u'cv.Algorithm.write',
    u'void',
    ['/C'],
    [   [u'Ptr_FileStorage', u'fs', u'', ['/C', '/Ref']],
        [u'String', u'name', u'String()', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv.Algorithm.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>

--- Incoming ---
[   u'cv.Algorithm.read',
    u'void',
    ['/V'],
    [[u'FileNode', u'fn', u'', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv.Algorithm.read [ARG FileNode fn=]>

--- Incoming ---
[u'cv.Algorithm.empty', u'bool', ['/C', '/V'], [], u'bool']
ok: FUNC <bool cv.Algorithm.empty []>

--- Incoming ---
[   u'cv.Algorithm.save',
    u'void',
    ['/C', '/V'],
    [[u'String', u'filename', u'', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv.Algorithm.save [ARG String filename=]>

--- Incoming ---
[u'cv.Algorithm.getDefaultName', u'String', ['/C', '/V'], [], u'String']
ok: FUNC <String cv.Algorithm.getDefaultName []>

--- Incoming ---
[   u'enum struct cv.Param',
    '',
    [],
    [   [u'const cv.Param.INT', u'0', [], [], None, ''],
        [u'const cv.Param.BOOLEAN', u'1', [], [], None, ''],
        [u'const cv.Param.REAL', u'2', [], [], None, ''],
        [u'const cv.Param.STRING', u'3', [], [], None, ''],
        [u'const cv.Param.MAT', u'4', [], [], None, ''],
        [u'const cv.Param.MAT_VECTOR', u'5', [], [], None, ''],
        [u'const cv.Param.ALGORITHM', u'6', [], [], None, ''],
        [u'const cv.Param.FLOAT', u'7', [], [], None, ''],
        [u'const cv.Param.UNSIGNED_INT', u'8', [], [], None, ''],
        [u'const cv.Param.UINT64', u'9', [], [], None, ''],
        [u'const cv.Param.UCHAR', u'11', [], [], None, ''],
        [u'const cv.Param.SCALAR', u'12', [], [], None, '']],
    None]
class not found: CONST INT=0
ok: CONST Param_INT=0
class not found: CONST BOOLEAN=1
ok: CONST Param_BOOLEAN=1
class not found: CONST REAL=2
ok: CONST Param_REAL=2
class not found: CONST STRING=3
ok: CONST Param_STRING=3
class not found: CONST MAT=4
ok: CONST Param_MAT=4
class not found: CONST MAT_VECTOR=5
ok: CONST Param_MAT_VECTOR=5
class not found: CONST ALGORITHM=6
ok: CONST Param_ALGORITHM=6
class not found: CONST FLOAT=7
ok: CONST Param_FLOAT=7
class not found: CONST UNSIGNED_INT=8
ok: CONST Param_UNSIGNED_INT=8
class not found: CONST UINT64=9
ok: CONST Param_UINT64=9
class not found: CONST UCHAR=11
ok: CONST Param_UCHAR=11
class not found: CONST SCALAR=12
ok: CONST Param_SCALAR=12


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/core/include/opencv2/core/utility.hpp =====
Namespaces: set([u'cv.ogl', u'cv.utils', u'cv.cudev', u'cv.ipp', u'cv.Error', u'cv.cuda', u'cv.samples', u'cv'])

--- Incoming ---
[u'cv.setNumThreads', u'void', [], [[u'int', u'nthreads', u'', []]], u'void']
ok: FUNC <void cv..setNumThreads [ARG int nthreads=]>

--- Incoming ---
[u'cv.getNumThreads', u'int', [], [], u'int']
ok: FUNC <int cv..getNumThreads []>

--- Incoming ---
[u'cv.getThreadNum', u'int', [], [], u'int']
ok: FUNC <int cv..getThreadNum []>

--- Incoming ---
[u'cv.getBuildInformation', u'String', [], [], u'String']
ok: FUNC <String cv..getBuildInformation []>

--- Incoming ---
[u'cv.getVersionString', u'String', [], [], u'String']
ok: FUNC <String cv..getVersionString []>

--- Incoming ---
[u'cv.getVersionMajor', u'int', [], [], u'int']
ok: FUNC <int cv..getVersionMajor []>

--- Incoming ---
[u'cv.getVersionMinor', u'int', [], [], u'int']
ok: FUNC <int cv..getVersionMinor []>

--- Incoming ---
[u'cv.getVersionRevision', u'int', [], [], u'int']
ok: FUNC <int cv..getVersionRevision []>

--- Incoming ---
[u'cv.getTickCount', u'int64', [], [], u'int64']
ok: FUNC <int64 cv..getTickCount []>

--- Incoming ---
[u'cv.getTickFrequency', u'double', [], [], u'double']
ok: FUNC <double cv..getTickFrequency []>

--- Incoming ---
[u'class cv.TickMeter', '', [], [], None]
ok: class CLASS cv::.TickMeter : , name: TickMeter, base: 

--- Incoming ---
[u'cv.TickMeter.TickMeter', '', [], [], None]
ok: FUNC < cv.TickMeter.TickMeter []>

--- Incoming ---
[u'cv.TickMeter.start', u'void', [], [], u'void']
ok: FUNC <void cv.TickMeter.start []>

--- Incoming ---
[u'cv.TickMeter.stop', u'void', [], [], u'void']
ok: FUNC <void cv.TickMeter.stop []>

--- Incoming ---
[u'cv.TickMeter.getTimeTicks', u'int64', ['/C'], [], u'int64']
ok: FUNC <int64 cv.TickMeter.getTimeTicks []>

--- Incoming ---
[u'cv.TickMeter.getTimeMicro', u'double', ['/C'], [], u'double']
ok: FUNC <double cv.TickMeter.getTimeMicro []>

--- Incoming ---
[u'cv.TickMeter.getTimeMilli', u'double', ['/C'], [], u'double']
ok: FUNC <double cv.TickMeter.getTimeMilli []>

--- Incoming ---
[u'cv.TickMeter.getTimeSec', u'double', ['/C'], [], u'double']
ok: FUNC <double cv.TickMeter.getTimeSec []>

--- Incoming ---
[u'cv.TickMeter.getCounter', u'int64', ['/C'], [], u'int64']
ok: FUNC <int64 cv.TickMeter.getCounter []>

--- Incoming ---
[u'cv.TickMeter.getFPS', u'double', ['/C'], [], u'double']
ok: FUNC <double cv.TickMeter.getFPS []>

--- Incoming ---
[u'cv.TickMeter.getAvgTimeSec', u'double', ['/C'], [], u'double']
ok: FUNC <double cv.TickMeter.getAvgTimeSec []>

--- Incoming ---
[u'cv.TickMeter.getAvgTimeMilli', u'double', ['/C'], [], u'double']
ok: FUNC <double cv.TickMeter.getAvgTimeMilli []>

--- Incoming ---
[u'cv.TickMeter.reset', u'void', [], [], u'void']
ok: FUNC <void cv.TickMeter.reset []>

--- Incoming ---
[u'cv.getCPUTickCount', u'int64', [], [], u'int64']
ok: FUNC <int64 cv..getCPUTickCount []>

--- Incoming ---
[   u'cv.checkHardwareSupport',
    u'bool',
    [],
    [[u'int', u'feature', u'', []]],
    u'bool']
manual: FUNC <bool cv..checkHardwareSupport [ARG int feature=]>

--- Incoming ---
[   u'cv.getHardwareFeatureName',
    u'String',
    [],
    [[u'int', u'feature', u'', []]],
    u'String']
ok: FUNC <String cv..getHardwareFeatureName [ARG int feature=]>

--- Incoming ---
[u'cv.getCPUFeaturesLine', u'string', [], [], u'std::string']
ok: FUNC <string cv..getCPUFeaturesLine []>

--- Incoming ---
[u'cv.getNumberOfCPUs', u'int', [], [], u'int']
ok: FUNC <int cv..getNumberOfCPUs []>

--- Incoming ---
[u'cv.setUseOptimized', u'void', [], [[u'bool', u'onoff', u'', []]], u'void']
manual: FUNC <void cv..setUseOptimized [ARG bool onoff=]>

--- Incoming ---
[u'cv.useOptimized', u'bool', [], [], u'bool']
manual: FUNC <bool cv..useOptimized []>

--- Incoming ---
[   u'cv.samples.findFile',
    u'String',
    [],
    [   [u'String', u'relative_path', u'', ['/C', '/Ref']],
        [u'bool', u'required', u'true', []],
        [u'bool', u'silentMode', u'false', []]],
    u'cv::String']
ok: FUNC <String cv.samples..findFile [ARG String relative_path=, ARG bool required=true, ARG bool silentMode=false]>

--- Incoming ---
[   u'cv.samples.findFileOrKeep',
    u'String',
    [],
    [   [u'String', u'relative_path', u'', ['/C', '/Ref']],
        [u'bool', u'silentMode', u'false', []]],
    u'cv::String']
ok: FUNC <String cv.samples..findFileOrKeep [ARG String relative_path=, ARG bool silentMode=false]>

--- Incoming ---
[   u'cv.samples.addSamplesDataSearchPath',
    u'void',
    [],
    [[u'String', u'path', u'', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv.samples..addSamplesDataSearchPath [ARG String path=]>

--- Incoming ---
[   u'cv.samples.addSamplesDataSearchSubDirectory',
    u'void',
    [],
    [[u'String', u'subdir', u'', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv.samples..addSamplesDataSearchSubDirectory [ARG String subdir=]>


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/core/misc/objc/manual/core_manual.hpp =====
Namespaces: set([u'cv.ogl', u'cv.utils', u'cv.cudev', u'cv.ipp', u'cv.Error', u'cv.cuda', u'cv.samples', u'cv'])

--- Incoming ---
[   u'cv.add',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..add [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   u'cv.subtract',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'mask', u'Mat()', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   u'cv.multiply',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'scale', u'1', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.divide',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'scale', u'1', []],
        [u'int', u'dtype', u'-1', []]],
    u'void']
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   u'cv.absdiff',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.compare',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'cmpop', u'', []]],
    u'void']
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG CmpTypes cmpop=]>

--- Incoming ---
[   u'cv.min',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..min [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.max',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        [u'Scalar', u'srcScalar', u'', []],
        ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..max [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=]>


===== Generating... =====
CLASS ::.Core : NSObject
[CONST DECOMP_LU=0, CONST DECOMP_SVD=1, CONST DECOMP_EIG=2, CONST DECOMP_CHOLESKY=3, CONST DECOMP_QR=4, CONST DECOMP_NORMAL=16]
[CONST SVD_MODIFY_A=1(manual), CONST SVD_NO_UV=2(manual), CONST SVD_FULL_UV=4(manual), CONST FILLED=-1(manual), CONST REDUCE_SUM=0(manual), CONST REDUCE_AVG=1(manual), CONST REDUCE_MAX=2(manual), CONST REDUCE_MIN=3(manual), CONST RNG_UNIFORM=0, CONST RNG_NORMAL=1]
[CONST GEMM_1_T=1, CONST GEMM_2_T=2, CONST GEMM_3_T=4]
[CONST KMEANS_RANDOM_CENTERS=0, CONST KMEANS_PP_CENTERS=2, CONST KMEANS_USE_INITIAL_LABELS=1]
[CONST CMP_EQ=0, CONST CMP_GT=1, CONST CMP_GE=2, CONST CMP_LT=3, CONST CMP_LE=4, CONST CMP_NE=5]
[CONST PCA_DATA_AS_ROW=0, CONST PCA_DATA_AS_COL=1, CONST PCA_USE_AVG=2]
[CONST DFT_INVERSE=1, CONST DFT_SCALE=2, CONST DFT_ROWS=4, CONST DFT_COMPLEX_OUTPUT=16, CONST DFT_REAL_OUTPUT=32, CONST DFT_COMPLEX_INPUT=64, CONST DCT_INVERSE=DFT_INVERSE, CONST DCT_ROWS=DFT_ROWS]
[CONST COVAR_SCRAMBLED=0, CONST COVAR_NORMAL=1, CONST COVAR_USE_AVG=2, CONST COVAR_SCALE=4, CONST COVAR_ROWS=8, CONST COVAR_COLS=16]
[CONST BORDER_CONSTANT=0, CONST BORDER_REPLICATE=1, CONST BORDER_REFLECT=2, CONST BORDER_WRAP=3, CONST BORDER_REFLECT_101=4, CONST BORDER_TRANSPARENT=5, CONST BORDER_REFLECT101=BORDER_REFLECT_101, CONST BORDER_DEFAULT=BORDER_REFLECT_101, CONST BORDER_ISOLATED=16]
[CONST SORT_EVERY_ROW=0, CONST SORT_EVERY_COLUMN=1, CONST SORT_ASCENDING=0, CONST SORT_DESCENDING=16]
[CONST Formatter_FMT_DEFAULT=0, CONST Formatter_FMT_MATLAB=1, CONST Formatter_FMT_CSV=2, CONST Formatter_FMT_PYTHON=3, CONST Formatter_FMT_NUMPY=4, CONST Formatter_FMT_C=5]
[CONST Param_INT=0, CONST Param_BOOLEAN=1, CONST Param_REAL=2, CONST Param_STRING=3, CONST Param_MAT=4, CONST Param_MAT_VECTOR=5, CONST Param_ALGORITHM=6, CONST Param_FLOAT=7, CONST Param_UNSIGNED_INT=8, CONST Param_UINT64=9, CONST Param_UCHAR=11, CONST Param_SCALAR=12]
[CONST NORM_INF=1, CONST NORM_L1=2, CONST NORM_L2=4, CONST NORM_L2SQR=5, CONST NORM_HAMMING=6, CONST NORM_HAMMING2=7, CONST NORM_TYPE_MASK=7, CONST NORM_RELATIVE=8, CONST NORM_MINMAX=32]
[CONST ROTATE_90_CLOCKWISE=0, CONST ROTATE_180=1, CONST ROTATE_90_COUNTERCLOCKWISE=2]
[CONST StsOk=0, CONST StsBackTrace=-1, CONST StsError=-2, CONST StsInternal=-3, CONST StsNoMem=-4, CONST StsBadArg=-5, CONST StsBadFunc=-6, CONST StsNoConv=-7, CONST StsAutoTrace=-8, CONST HeaderIsNull=-9, CONST BadImageSize=-10, CONST BadOffset=-11, CONST BadDataPtr=-12, CONST BadStep=-13, CONST BadModelOrChSeq=-14, CONST BadNumChannels=-15, CONST BadNumChannel1U=-16, CONST BadDepth=-17, CONST BadAlphaChannel=-18, CONST BadOrder=-19, CONST BadOrigin=-20, CONST BadAlign=-21, CONST BadCallBack=-22, CONST BadTileSize=-23, CONST BadCOI=-24, CONST BadROISize=-25, CONST MaskIsTiled=-26, CONST StsNullPtr=-27, CONST StsVecLengthErr=-28, CONST StsFilterStructContentErr=-29, CONST StsKernelStructContentErr=-30, CONST StsFilterOffsetErr=-31, CONST StsBadSize=-201, CONST StsDivByZero=-202, CONST StsInplaceNotSupported=-203, CONST StsObjectNotFound=-204, CONST StsUnmatchedFormats=-205, CONST StsBadFlag=-206, CONST StsBadPoint=-207, CONST StsBadMask=-208, CONST StsUnmatchedSizes=-209, CONST StsUnsupportedFormat=-210, CONST StsOutOfRange=-211, CONST StsParseError=-212, CONST StsNotImplemented=-213, CONST StsBadMemBlock=-214, CONST StsAssert=-215, CONST GpuNotSupported=-216, CONST GpuApiCallError=-217, CONST OpenGlNotSupported=-218, CONST OpenGlApiCallError=-219, CONST OpenCLApiCallError=-220, CONST OpenCLDoubleNotSupported=-221, CONST OpenCLInitError=-222, CONST OpenCLNoAMDBlasFft=-223]
FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>
Objective-C: (Scalar*)mean:(Mat*)src mask:(Mat*)mask
Objective-C: (Scalar*)mean:(Mat*)src
FUNC <Scalar cv..sum [ARG Mat src=]>
Objective-C: (Scalar*)sumElems:(Mat*)src
FUNC <Scalar cv..trace [ARG Mat mtx=]>
Objective-C: (Scalar*)trace:(Mat*)mtx
FUNC <String cv..getBuildInformation []>
Objective-C: (NSString*)getBuildInformation
FUNC <String cv..getHardwareFeatureName [ARG int feature=]>
Objective-C: (NSString*)getHardwareFeatureName:(int)feature
FUNC <String cv..getVersionString []>
Objective-C: (NSString*)getVersionString
FUNC <String cv.ipp..getIppVersion []>
Objective-C: (NSString*)getIppVersion
FUNC <String cv.samples..findFile [ARG String relative_path=, ARG bool required=true, ARG bool silentMode=false]>
Objective-C: (NSString*)findFile:(NSString*)relative_path required:(BOOL)required silentMode:(BOOL)silentMode
Objective-C: (NSString*)findFile:(NSString*)relative_path required:(BOOL)required
Objective-C: (NSString*)findFile:(NSString*)relative_path
FUNC <String cv.samples..findFileOrKeep [ARG String relative_path=, ARG bool silentMode=false]>
Objective-C: (NSString*)findFileOrKeep:(NSString*)relative_path silentMode:(BOOL)silentMode
Objective-C: (NSString*)findFileOrKeep:(NSString*)relative_path
FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>
Objective-C: (BOOL)checkRange:(Mat*)a quiet:(BOOL)quiet minVal:(double)minVal maxVal:(double)maxVal
Objective-C: (BOOL)checkRange:(Mat*)a quiet:(BOOL)quiet minVal:(double)minVal
Objective-C: (BOOL)checkRange:(Mat*)a quiet:(BOOL)quiet
Objective-C: (BOOL)checkRange:(Mat*)a quiet:(BOOL)quiet
Objective-C: (BOOL)checkRange:(Mat*)a
FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>
Objective-C: (BOOL)eigen:(Mat*)src eigenvalues:(Mat*)eigenvalues eigenvectors:(Mat*)eigenvectors
Objective-C: (BOOL)eigen:(Mat*)src eigenvalues:(Mat*)eigenvalues
FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
Objective-C: (BOOL)solve:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst flags:(int)flags
Objective-C: (BOOL)solve:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <bool cv.ipp..useIPP []>
Objective-C: (BOOL)useIPP
FUNC <bool cv.ipp..useIPP_NotExact []>
Objective-C: (BOOL)useIPP_NotExact
FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>
Objective-C: (double)Mahalanobis:(Mat*)v1 v2:(Mat*)v2 icovar:(Mat*)icovar
FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=, ARG double R=255.]>
Objective-C: (double)PSNR:(Mat*)src1 src2:(Mat*)src2 R:(double)R
Objective-C: (double)PSNR:(Mat*)src1 src2:(Mat*)src2
FUNC <double cv..determinant [ARG Mat mtx=]>
Objective-C: (double)determinant:(Mat*)mtx
FUNC <double cv..getTickFrequency []>
Objective-C: (double)getTickFrequency
FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
Objective-C: (double)invert:(Mat*)src dst:(Mat*)dst flags:(int)flags
Objective-C: (double)invert:(Mat*)src dst:(Mat*)dst
FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>
Objective-C: (double)kmeans:(Mat*)data K:(int)K bestLabels:(Mat*)bestLabels criteria:(TermCriteria*)criteria attempts:(int)attempts flags:(int)flags centers:(Mat*)centers
Objective-C: (double)kmeans:(Mat*)data K:(int)K bestLabels:(Mat*)bestLabels criteria:(TermCriteria*)criteria attempts:(int)attempts flags:(int)flags
FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG NormTypes normType=NORM_L2, ARG Mat mask=Mat()]>
Objective-C: (double)norm:(Mat*)src1 src2:(Mat*)src2 normType:(NormTypes)normType mask:(Mat*)mask
Objective-C: (double)norm:(Mat*)src1 src2:(Mat*)src2 normType:(NormTypes)normType
Objective-C: (double)norm:(Mat*)src1 src2:(Mat*)src2
FUNC <double cv..norm [ARG Mat src1=, ARG NormTypes normType=NORM_L2, ARG Mat mask=Mat()]>
Objective-C: (double)norm:(Mat*)src1 normType:(NormTypes)normType mask:(Mat*)mask
Objective-C: (double)norm:(Mat*)src1 normType:(NormTypes)normType
Objective-C: (double)norm:(Mat*)src1
FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>
Objective-C: (double)solvePoly:(Mat*)coeffs roots:(Mat*)roots maxIters:(int)maxIters
Objective-C: (double)solvePoly:(Mat*)coeffs roots:(Mat*)roots
FUNC <float cv..cubeRoot [ARG float val=]>
Objective-C: (float)cubeRoot:(float)val
FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>
Objective-C: (float)fastAtan2:(float)y x:(float)x
FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG BorderTypes borderType=]>
Objective-C: (int)borderInterpolate:(int)p len:(int)len borderType:(BorderTypes)borderType
FUNC <int cv..countNonZero [ARG Mat src=]>
Objective-C: (int)countNonZero:(Mat*)src
FUNC <int cv..getNumThreads []>
Objective-C: (int)getNumThreads
FUNC <int cv..getNumberOfCPUs []>
Objective-C: (int)getNumberOfCPUs
FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>
Objective-C: (int)getOptimalDFTSize:(int)vecsize
FUNC <int cv..getThreadNum []>
Objective-C: (int)getThreadNum
FUNC <int cv..getVersionMajor []>
Objective-C: (int)getVersionMajor
FUNC <int cv..getVersionMinor []>
Objective-C: (int)getVersionMinor
FUNC <int cv..getVersionRevision []>
Objective-C: (int)getVersionRevision
FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>
Objective-C: (int)solveCubic:(Mat*)coeffs roots:(Mat*)roots
FUNC <int64 cv..getCPUTickCount []>
Objective-C: (long)getCPUTickCount
FUNC <int64 cv..getTickCount []>
Objective-C: (long)getTickCount
FUNC <string cv..getCPUFeaturesLine []>
Objective-C: (NSString*)getCPUFeaturesLine
FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>
Objective-C: (void)LUT:(Mat*)src lut:(Mat*)lut dst:(Mat*)dst
FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
Objective-C: (void)PCABackProject:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors result:(Mat*)result
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG double retainedVariance=]>
Objective-C: (void)PCACompute2:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors eigenvalues:(Mat*)eigenvalues retainedVariance:(double)retainedVariance
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG int maxComponents=0]>
Objective-C: (void)PCACompute2:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors eigenvalues:(Mat*)eigenvalues maxComponents:(int)maxComponents
Objective-C: (void)PCACompute2:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors eigenvalues:(Mat*)eigenvalues
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>
Objective-C: (void)PCACompute:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors retainedVariance:(double)retainedVariance
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>
Objective-C: (void)PCACompute:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors maxComponents:(int)maxComponents
Objective-C: (void)PCACompute:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors
FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
Objective-C: (void)PCAProject:(Mat*)data mean:(Mat*)mean eigenvectors:(Mat*)eigenvectors result:(Mat*)result
FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>
Objective-C: (void)SVBackSubst:(Mat*)w u:(Mat*)u vt:(Mat*)vt rhs:(Mat*)rhs dst:(Mat*)dst
FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>
Objective-C: (void)SVDecomp:(Mat*)src w:(Mat*)w u:(Mat*)u vt:(Mat*)vt flags:(int)flags
Objective-C: (void)SVDecomp:(Mat*)src w:(Mat*)w u:(Mat*)u vt:(Mat*)vt
FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
Objective-C: (void)absdiff:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=]>
Objective-C: (void)absdiff:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst
FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
Objective-C: (void)add:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask dtype:(int)dtype
Objective-C: (void)add:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)add:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..add [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
Objective-C: (void)add:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst mask:(Mat*)mask dtype:(int)dtype
Objective-C: (void)add:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)add:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst
FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>
Objective-C: (void)addWeighted:(Mat*)src1 alpha:(double)alpha src2:(Mat*)src2 beta:(double)beta gamma:(double)gamma dst:(Mat*)dst dtype:(int)dtype
Objective-C: (void)addWeighted:(Mat*)src1 alpha:(double)alpha src2:(Mat*)src2 beta:(double)beta gamma:(double)gamma dst:(Mat*)dst
FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG NormTypes normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>
Objective-C: (void)batchDistance:(Mat*)src1 src2:(Mat*)src2 dist:(Mat*)dist dtype:(int)dtype nidx:(Mat*)nidx normType:(NormTypes)normType K:(int)K mask:(Mat*)mask update:(int)update crosscheck:(BOOL)crosscheck
Objective-C: (void)batchDistance:(Mat*)src1 src2:(Mat*)src2 dist:(Mat*)dist dtype:(int)dtype nidx:(Mat*)nidx normType:(NormTypes)normType K:(int)K mask:(Mat*)mask update:(int)update
Objective-C: (void)batchDistance:(Mat*)src1 src2:(Mat*)src2 dist:(Mat*)dist dtype:(int)dtype nidx:(Mat*)nidx normType:(NormTypes)normType K:(int)K mask:(Mat*)mask
Objective-C: (void)batchDistance:(Mat*)src1 src2:(Mat*)src2 dist:(Mat*)dist dtype:(int)dtype nidx:(Mat*)nidx normType:(NormTypes)normType K:(int)K
Objective-C: (void)batchDistance:(Mat*)src1 src2:(Mat*)src2 dist:(Mat*)dist dtype:(int)dtype nidx:(Mat*)nidx normType:(NormTypes)normType
Objective-C: (void)batchDistance:(Mat*)src1 src2:(Mat*)src2 dist:(Mat*)dist dtype:(int)dtype nidx:(Mat*)nidx
FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
Objective-C: (void)bitwise_and:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)bitwise_and:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
Objective-C: (void)bitwise_not:(Mat*)src dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)bitwise_not:(Mat*)src dst:(Mat*)dst
FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
Objective-C: (void)bitwise_or:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)bitwise_or:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
Objective-C: (void)bitwise_xor:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)bitwise_xor:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>
Objective-C: (void)calcCovarMatrix:(Mat*)samples covar:(Mat*)covar mean:(Mat*)mean flags:(int)flags ctype:(int)ctype
Objective-C: (void)calcCovarMatrix:(Mat*)samples covar:(Mat*)covar mean:(Mat*)mean flags:(int)flags
FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>
Objective-C: (void)cartToPolar:(Mat*)x y:(Mat*)y magnitude:(Mat*)magnitude angle:(Mat*)angle angleInDegrees:(BOOL)angleInDegrees
Objective-C: (void)cartToPolar:(Mat*)x y:(Mat*)y magnitude:(Mat*)magnitude angle:(Mat*)angle
FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG CmpTypes cmpop=]>
Objective-C: (void)compare:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst cmpop:(CmpTypes)cmpop
FUNC <void cv..compare [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG CmpTypes cmpop=]>
Objective-C: (void)compare:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst cmpop:(CmpTypes)cmpop
FUNC <void cv..completeSymm [ARG Mat m=, ARG bool lowerToUpper=false]>
Objective-C: (void)completeSymm:(Mat*)m lowerToUpper:(BOOL)lowerToUpper
Objective-C: (void)completeSymm:(Mat*)m
FUNC <void cv..convertFp16 [ARG Mat src=, ARG Mat dst=]>
Objective-C: (void)convertFp16:(Mat*)src dst:(Mat*)dst
FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>
Objective-C: (void)convertScaleAbs:(Mat*)src dst:(Mat*)dst alpha:(double)alpha beta:(double)beta
Objective-C: (void)convertScaleAbs:(Mat*)src dst:(Mat*)dst alpha:(double)alpha
Objective-C: (void)convertScaleAbs:(Mat*)src dst:(Mat*)dst
FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG BorderTypes borderType=, ARG Scalar value=Scalar()]>
Objective-C: (void)copyMakeBorder:(Mat*)src dst:(Mat*)dst top:(int)top bottom:(int)bottom left:(int)left right:(int)right borderType:(BorderTypes)borderType value:(Scalar*)value
Objective-C: (void)copyMakeBorder:(Mat*)src dst:(Mat*)dst top:(int)top bottom:(int)bottom left:(int)left right:(int)right borderType:(BorderTypes)borderType
FUNC <void cv..copyTo [ARG Mat src=, ARG Mat dst=, ARG Mat mask=]>
Objective-C: (void)copyTo:(Mat*)src dst:(Mat*)dst mask:(Mat*)mask
FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
Objective-C: (void)dct:(Mat*)src dst:(Mat*)dst flags:(int)flags
Objective-C: (void)dct:(Mat*)src dst:(Mat*)dst
FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
Objective-C: (void)dft:(Mat*)src dst:(Mat*)dst flags:(int)flags nonzeroRows:(int)nonzeroRows
Objective-C: (void)dft:(Mat*)src dst:(Mat*)dst flags:(int)flags
Objective-C: (void)dft:(Mat*)src dst:(Mat*)dst
FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
Objective-C: (void)divide:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst scale:(double)scale dtype:(int)dtype
Objective-C: (void)divide:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst scale:(double)scale
Objective-C: (void)divide:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..divide [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
Objective-C: (void)divide:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst scale:(double)scale dtype:(int)dtype
Objective-C: (void)divide:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst scale:(double)scale
Objective-C: (void)divide:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst
FUNC <void cv..divide [ARG double scale=, ARG Mat src=, ARG Mat dst=, ARG int dtype=-1]>
Objective-C: (void)divide:(double)scale src:(Mat*)src dst:(Mat*)dst dtype:(int)dtype
Objective-C: (void)divide:(double)scale src:(Mat*)src dst:(Mat*)dst
FUNC <void cv..eigenNonSymmetric [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=]>
Objective-C: (void)eigenNonSymmetric:(Mat*)src eigenvalues:(Mat*)eigenvalues eigenvectors:(Mat*)eigenvectors
FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>
Objective-C: (void)exp:(Mat*)src dst:(Mat*)dst
FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
Objective-C: (void)extractChannel:(Mat*)src dst:(Mat*)dst coi:(int)coi
FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>
Objective-C: (void)findNonZero:(Mat*)src idx:(Mat*)idx
FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>
Objective-C: (void)flip:(Mat*)src dst:(Mat*)dst flipCode:(int)flipCode
FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>
Objective-C: (void)gemm:(Mat*)src1 src2:(Mat*)src2 alpha:(double)alpha src3:(Mat*)src3 beta:(double)beta dst:(Mat*)dst flags:(int)flags
Objective-C: (void)gemm:(Mat*)src1 src2:(Mat*)src2 alpha:(double)alpha src3:(Mat*)src3 beta:(double)beta dst:(Mat*)dst
FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>
Objective-C: (void)hconcat:(NSArray<Mat*>*)src dst:(Mat*)dst
FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
Objective-C: (void)idct:(Mat*)src dst:(Mat*)dst flags:(int)flags
Objective-C: (void)idct:(Mat*)src dst:(Mat*)dst
FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
Objective-C: (void)idft:(Mat*)src dst:(Mat*)dst flags:(int)flags nonzeroRows:(int)nonzeroRows
Objective-C: (void)idft:(Mat*)src dst:(Mat*)dst flags:(int)flags
Objective-C: (void)idft:(Mat*)src dst:(Mat*)dst
FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>
Objective-C: (void)inRange:(Mat*)src lowerb:(Scalar*)lowerb upperb:(Scalar*)upperb dst:(Mat*)dst
FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
Objective-C: (void)insertChannel:(Mat*)src dst:(Mat*)dst coi:(int)coi
FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>
Objective-C: (void)log:(Mat*)src dst:(Mat*)dst
FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>
Objective-C: (void)magnitude:(Mat*)x y:(Mat*)y magnitude:(Mat*)magnitude
FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
Objective-C: (void)max:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..max [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=]>
Objective-C: (void)max:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst
FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>
Objective-C: (void)meanStdDev:(Mat*)src mean:(DoubleVector*)mean stddev:(DoubleVector*)stddev mask:(Mat*)mask
Objective-C: (void)meanStdDev:(Mat*)src mean:(DoubleVector*)mean stddev:(DoubleVector*)stddev
FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>
Objective-C: (void)merge:(NSArray<Mat*>*)mv dst:(Mat*)dst
FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
Objective-C: (void)min:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..min [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=]>
Objective-C: (void)min:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst
FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>
Objective-C: (void)mixChannels:(NSArray<Mat*>*)src dst:(NSArray<Mat*>*)dst fromTo:(IntVector*)fromTo
FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>
Objective-C: (void)mulSpectrums:(Mat*)a b:(Mat*)b c:(Mat*)c flags:(int)flags conjB:(BOOL)conjB
Objective-C: (void)mulSpectrums:(Mat*)a b:(Mat*)b c:(Mat*)c flags:(int)flags
FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>
Objective-C: (void)mulTransposed:(Mat*)src dst:(Mat*)dst aTa:(BOOL)aTa delta:(Mat*)delta scale:(double)scale dtype:(int)dtype
Objective-C: (void)mulTransposed:(Mat*)src dst:(Mat*)dst aTa:(BOOL)aTa delta:(Mat*)delta scale:(double)scale
Objective-C: (void)mulTransposed:(Mat*)src dst:(Mat*)dst aTa:(BOOL)aTa delta:(Mat*)delta
Objective-C: (void)mulTransposed:(Mat*)src dst:(Mat*)dst aTa:(BOOL)aTa
FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
Objective-C: (void)multiply:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst scale:(double)scale dtype:(int)dtype
Objective-C: (void)multiply:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst scale:(double)scale
Objective-C: (void)multiply:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
Objective-C: (void)multiply:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst scale:(double)scale dtype:(int)dtype
Objective-C: (void)multiply:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst scale:(double)scale
Objective-C: (void)multiply:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst
FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG NormTypes norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>
Objective-C: (void)normalize:(Mat*)src dst:(Mat*)dst alpha:(double)alpha beta:(double)beta norm_type:(NormTypes)norm_type dtype:(int)dtype mask:(Mat*)mask
Objective-C: (void)normalize:(Mat*)src dst:(Mat*)dst alpha:(double)alpha beta:(double)beta norm_type:(NormTypes)norm_type dtype:(int)dtype
Objective-C: (void)normalize:(Mat*)src dst:(Mat*)dst alpha:(double)alpha beta:(double)beta norm_type:(NormTypes)norm_type
Objective-C: (void)normalize:(Mat*)src dst:(Mat*)dst alpha:(double)alpha beta:(double)beta
Objective-C: (void)normalize:(Mat*)src dst:(Mat*)dst alpha:(double)alpha
Objective-C: (void)normalize:(Mat*)src dst:(Mat*)dst
FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>
Objective-C: (void)patchNaNs:(Mat*)a val:(double)val
Objective-C: (void)patchNaNs:(Mat*)a
FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
Objective-C: (void)perspectiveTransform:(Mat*)src dst:(Mat*)dst m:(Mat*)m
FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>
Objective-C: (void)phase:(Mat*)x y:(Mat*)y angle:(Mat*)angle angleInDegrees:(BOOL)angleInDegrees
Objective-C: (void)phase:(Mat*)x y:(Mat*)y angle:(Mat*)angle
FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>
Objective-C: (void)polarToCart:(Mat*)magnitude angle:(Mat*)angle x:(Mat*)x y:(Mat*)y angleInDegrees:(BOOL)angleInDegrees
Objective-C: (void)polarToCart:(Mat*)magnitude angle:(Mat*)angle x:(Mat*)x y:(Mat*)y
FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>
Objective-C: (void)pow:(Mat*)src power:(double)power dst:(Mat*)dst
FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG  * rng=0]>
Objective-C: (void)randShuffle:(Mat*)dst iterFactor:(double)iterFactor
Objective-C: (void)randShuffle:(Mat*)dst iterFactor:(double)iterFactor
Objective-C: (void)randShuffle:(Mat*)dst
FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>
Objective-C: (void)randn:(Mat*)dst mean:(double)mean stddev:(double)stddev
FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>
Objective-C: (void)randu:(Mat*)dst low:(double)low high:(double)high
FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>
Objective-C: (void)reduce:(Mat*)src dst:(Mat*)dst dim:(int)dim rtype:(int)rtype dtype:(int)dtype
Objective-C: (void)reduce:(Mat*)src dst:(Mat*)dst dim:(int)dim rtype:(int)rtype
FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>
Objective-C: (void)repeat:(Mat*)src ny:(int)ny nx:(int)nx dst:(Mat*)dst
FUNC <void cv..rotate [ARG Mat src=, ARG Mat dst=, ARG RotateFlags rotateCode=]>
Objective-C: (void)rotate:(Mat*)src dst:(Mat*)dst rotateCode:(RotateFlags)rotateCode
FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>
Objective-C: (void)scaleAdd:(Mat*)src1 alpha:(double)alpha src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>
Objective-C: (void)setIdentity:(Mat*)mtx s:(Scalar*)s
Objective-C: (void)setIdentity:(Mat*)mtx
FUNC <void cv..setNumThreads [ARG int nthreads=]>
Objective-C: (void)setNumThreads:(int)nthreads
FUNC <void cv..setRNGSeed [ARG int seed=]>
Objective-C: (void)setRNGSeed:(int)seed
FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
Objective-C: (void)sort:(Mat*)src dst:(Mat*)dst flags:(int)flags
FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
Objective-C: (void)sortIdx:(Mat*)src dst:(Mat*)dst flags:(int)flags
FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>
Objective-C: (void)split:(Mat*)m mv:(NSMutableArray<Mat*>*)mv
FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>
Objective-C: (void)sqrt:(Mat*)src dst:(Mat*)dst
FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
Objective-C: (void)subtract:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask dtype:(int)dtype
Objective-C: (void)subtract:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)subtract:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar srcScalar=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
Objective-C: (void)subtract:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst mask:(Mat*)mask dtype:(int)dtype
Objective-C: (void)subtract:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)subtract:(Mat*)src1 srcScalar:(Scalar*)srcScalar dst:(Mat*)dst
FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
Objective-C: (void)transform:(Mat*)src dst:(Mat*)dst m:(Mat*)m
FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>
Objective-C: (void)transpose:(Mat*)src dst:(Mat*)dst
FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>
Objective-C: (void)vconcat:(NSArray<Mat*>*)src dst:(Mat*)dst
FUNC <void cv.ipp..setUseIPP [ARG bool flag=]>
Objective-C: (void)setUseIPP:(BOOL)flag
FUNC <void cv.ipp..setUseIPP_NotExact [ARG bool flag=]>
Objective-C: (void)setUseIPP_NotExact:(BOOL)flag
FUNC <void cv.samples..addSamplesDataSearchPath [ARG String path=]>
Objective-C: (void)addSamplesDataSearchPath:(NSString*)path
FUNC <void cv.samples..addSamplesDataSearchSubDirectory [ARG String subdir=]>
Objective-C: (void)addSamplesDataSearchSubDirectory:(NSString*)subdir
CLASS cv::.Algorithm : NSObject
FUNC <String cv.Algorithm.getDefaultName []>
Objective-C: (NSString*)getDefaultName
FUNC <bool cv.Algorithm.empty []>
Objective-C: (BOOL)empty
FUNC <void cv.Algorithm.clear []>
Objective-C: (void)clear
FUNC <void cv.Algorithm.read [ARG FileNode fn=]>
SKIP:void cv::Algorithm::read(FileNode fn)	 due to ARG type FileNode/I
FUNC <void cv.Algorithm.save [ARG String filename=]>
Objective-C: (void)save:(NSString*)filename
FUNC <void cv.Algorithm.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>
SKIP:void cv::Algorithm::write(Ptr_FileStorage fs, String name = String())	 due to ARG type Ptr_FileStorage/I
CLASS cv::.TickMeter : NSObject
FUNC < cv.TickMeter.TickMeter []>
Objective-C: ()TickMeter
FUNC <double cv.TickMeter.getAvgTimeMilli []>
Objective-C: (double)getAvgTimeMilli
FUNC <double cv.TickMeter.getAvgTimeSec []>
Objective-C: (double)getAvgTimeSec
FUNC <double cv.TickMeter.getFPS []>
Objective-C: (double)getFPS
FUNC <double cv.TickMeter.getTimeMicro []>
Objective-C: (double)getTimeMicro
FUNC <double cv.TickMeter.getTimeMilli []>
Objective-C: (double)getTimeMilli
FUNC <double cv.TickMeter.getTimeSec []>
Objective-C: (double)getTimeSec
FUNC <int64 cv.TickMeter.getCounter []>
Objective-C: (long)getCounter
FUNC <int64 cv.TickMeter.getTimeTicks []>
Objective-C: (long)getTimeTicks
FUNC <void cv.TickMeter.reset []>
Objective-C: (void)reset
FUNC <void cv.TickMeter.start []>
Objective-C: (void)start
FUNC <void cv.TickMeter.stop []>
Objective-C: (void)stop

=== MODULE: imgproc (/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc) ===


Files (7):
[u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/types_c.h',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/hal/interface.h',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc.hpp',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/imgproc.hpp',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/hal/hal.hpp',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp']

Common headers (0):
[]
ok: class CLASS ::.Imgproc : , name: Imgproc, base: 


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h =====
Namespaces: set([''])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/types_c.h =====
Namespaces: set([''])

--- Incoming ---
[   u'enum SmoothMethod_c',
    '',
    [],
    [   [u'const CV_BLUR_NO_SCALE', u'0', [], [], None, ''],
        [u'const CV_BLUR', u'1', [], [], None, ''],
        [u'const CV_GAUSSIAN', u'2', [], [], None, ''],
        [u'const CV_MEDIAN', u'3', [], [], None, ''],
        [u'const CV_BILATERAL', u'4', [], [], None, '']],
    None]

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [[u'const CV_GAUSSIAN_5x5', u'7', [], [], None, '']],
    None]
ok: CONST CV_GAUSSIAN_5x5=7

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_SCHARR', u'-1', [], [], None, ''],
        [u'const CV_MAX_SOBEL_KSIZE', u'7', [], [], None, '']],
    None]
ok: CONST CV_SCHARR=-1
ok: CONST CV_MAX_SOBEL_KSIZE=7

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_BGR2BGRA', u'0', [], [], None, ''],
        [u'const CV_RGB2RGBA', u'CV_BGR2BGRA', [], [], None, ''],
        [u'const CV_BGRA2BGR', u'1', [], [], None, ''],
        [u'const CV_RGBA2RGB', u'CV_BGRA2BGR', [], [], None, ''],
        [u'const CV_BGR2RGBA', u'2', [], [], None, ''],
        [u'const CV_RGB2BGRA', u'CV_BGR2RGBA', [], [], None, ''],
        [u'const CV_RGBA2BGR', u'3', [], [], None, ''],
        [u'const CV_BGRA2RGB', u'CV_RGBA2BGR', [], [], None, ''],
        [u'const CV_BGR2RGB', u'4', [], [], None, ''],
        [u'const CV_RGB2BGR', u'CV_BGR2RGB', [], [], None, ''],
        [u'const CV_BGRA2RGBA', u'5', [], [], None, ''],
        [u'const CV_RGBA2BGRA', u'CV_BGRA2RGBA', [], [], None, ''],
        [u'const CV_BGR2GRAY', u'6', [], [], None, ''],
        [u'const CV_RGB2GRAY', u'7', [], [], None, ''],
        [u'const CV_GRAY2BGR', u'8', [], [], None, ''],
        [u'const CV_GRAY2RGB', u'CV_GRAY2BGR', [], [], None, ''],
        [u'const CV_GRAY2BGRA', u'9', [], [], None, ''],
        [u'const CV_GRAY2RGBA', u'CV_GRAY2BGRA', [], [], None, ''],
        [u'const CV_BGRA2GRAY', u'10', [], [], None, ''],
        [u'const CV_RGBA2GRAY', u'11', [], [], None, ''],
        [u'const CV_BGR2BGR565', u'12', [], [], None, ''],
        [u'const CV_RGB2BGR565', u'13', [], [], None, ''],
        [u'const CV_BGR5652BGR', u'14', [], [], None, ''],
        [u'const CV_BGR5652RGB', u'15', [], [], None, ''],
        [u'const CV_BGRA2BGR565', u'16', [], [], None, ''],
        [u'const CV_RGBA2BGR565', u'17', [], [], None, ''],
        [u'const CV_BGR5652BGRA', u'18', [], [], None, ''],
        [u'const CV_BGR5652RGBA', u'19', [], [], None, ''],
        [u'const CV_GRAY2BGR565', u'20', [], [], None, ''],
        [u'const CV_BGR5652GRAY', u'21', [], [], None, ''],
        [u'const CV_BGR2BGR555', u'22', [], [], None, ''],
        [u'const CV_RGB2BGR555', u'23', [], [], None, ''],
        [u'const CV_BGR5552BGR', u'24', [], [], None, ''],
        [u'const CV_BGR5552RGB', u'25', [], [], None, ''],
        [u'const CV_BGRA2BGR555', u'26', [], [], None, ''],
        [u'const CV_RGBA2BGR555', u'27', [], [], None, ''],
        [u'const CV_BGR5552BGRA', u'28', [], [], None, ''],
        [u'const CV_BGR5552RGBA', u'29', [], [], None, ''],
        [u'const CV_GRAY2BGR555', u'30', [], [], None, ''],
        [u'const CV_BGR5552GRAY', u'31', [], [], None, ''],
        [u'const CV_BGR2XYZ', u'32', [], [], None, ''],
        [u'const CV_RGB2XYZ', u'33', [], [], None, ''],
        [u'const CV_XYZ2BGR', u'34', [], [], None, ''],
        [u'const CV_XYZ2RGB', u'35', [], [], None, ''],
        [u'const CV_BGR2YCrCb', u'36', [], [], None, ''],
        [u'const CV_RGB2YCrCb', u'37', [], [], None, ''],
        [u'const CV_YCrCb2BGR', u'38', [], [], None, ''],
        [u'const CV_YCrCb2RGB', u'39', [], [], None, ''],
        [u'const CV_BGR2HSV', u'40', [], [], None, ''],
        [u'const CV_RGB2HSV', u'41', [], [], None, ''],
        [u'const CV_BGR2Lab', u'44', [], [], None, ''],
        [u'const CV_RGB2Lab', u'45', [], [], None, ''],
        [u'const CV_BayerBG2BGR', u'46', [], [], None, ''],
        [u'const CV_BayerGB2BGR', u'47', [], [], None, ''],
        [u'const CV_BayerRG2BGR', u'48', [], [], None, ''],
        [u'const CV_BayerGR2BGR', u'49', [], [], None, ''],
        [u'const CV_BayerBG2RGB', u'CV_BayerRG2BGR', [], [], None, ''],
        [u'const CV_BayerGB2RGB', u'CV_BayerGR2BGR', [], [], None, ''],
        [u'const CV_BayerRG2RGB', u'CV_BayerBG2BGR', [], [], None, ''],
        [u'const CV_BayerGR2RGB', u'CV_BayerGB2BGR', [], [], None, ''],
        [u'const CV_BGR2Luv', u'50', [], [], None, ''],
        [u'const CV_RGB2Luv', u'51', [], [], None, ''],
        [u'const CV_BGR2HLS', u'52', [], [], None, ''],
        [u'const CV_RGB2HLS', u'53', [], [], None, ''],
        [u'const CV_HSV2BGR', u'54', [], [], None, ''],
        [u'const CV_HSV2RGB', u'55', [], [], None, ''],
        [u'const CV_Lab2BGR', u'56', [], [], None, ''],
        [u'const CV_Lab2RGB', u'57', [], [], None, ''],
        [u'const CV_Luv2BGR', u'58', [], [], None, ''],
        [u'const CV_Luv2RGB', u'59', [], [], None, ''],
        [u'const CV_HLS2BGR', u'60', [], [], None, ''],
        [u'const CV_HLS2RGB', u'61', [], [], None, ''],
        [u'const CV_BayerBG2BGR_VNG', u'62', [], [], None, ''],
        [u'const CV_BayerGB2BGR_VNG', u'63', [], [], None, ''],
        [u'const CV_BayerRG2BGR_VNG', u'64', [], [], None, ''],
        [u'const CV_BayerGR2BGR_VNG', u'65', [], [], None, ''],
        [   u'const CV_BayerBG2RGB_VNG',
            u'CV_BayerRG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   u'const CV_BayerGB2RGB_VNG',
            u'CV_BayerGR2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   u'const CV_BayerRG2RGB_VNG',
            u'CV_BayerBG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   u'const CV_BayerGR2RGB_VNG',
            u'CV_BayerGB2BGR_VNG',
            [],
            [],
            None,
            ''],
        [u'const CV_BGR2HSV_FULL', u'66', [], [], None, ''],
        [u'const CV_RGB2HSV_FULL', u'67', [], [], None, ''],
        [u'const CV_BGR2HLS_FULL', u'68', [], [], None, ''],
        [u'const CV_RGB2HLS_FULL', u'69', [], [], None, ''],
        [u'const CV_HSV2BGR_FULL', u'70', [], [], None, ''],
        [u'const CV_HSV2RGB_FULL', u'71', [], [], None, ''],
        [u'const CV_HLS2BGR_FULL', u'72', [], [], None, ''],
        [u'const CV_HLS2RGB_FULL', u'73', [], [], None, ''],
        [u'const CV_LBGR2Lab', u'74', [], [], None, ''],
        [u'const CV_LRGB2Lab', u'75', [], [], None, ''],
        [u'const CV_LBGR2Luv', u'76', [], [], None, ''],
        [u'const CV_LRGB2Luv', u'77', [], [], None, ''],
        [u'const CV_Lab2LBGR', u'78', [], [], None, ''],
        [u'const CV_Lab2LRGB', u'79', [], [], None, ''],
        [u'const CV_Luv2LBGR', u'80', [], [], None, ''],
        [u'const CV_Luv2LRGB', u'81', [], [], None, ''],
        [u'const CV_BGR2YUV', u'82', [], [], None, ''],
        [u'const CV_RGB2YUV', u'83', [], [], None, ''],
        [u'const CV_YUV2BGR', u'84', [], [], None, ''],
        [u'const CV_YUV2RGB', u'85', [], [], None, ''],
        [u'const CV_BayerBG2GRAY', u'86', [], [], None, ''],
        [u'const CV_BayerGB2GRAY', u'87', [], [], None, ''],
        [u'const CV_BayerRG2GRAY', u'88', [], [], None, ''],
        [u'const CV_BayerGR2GRAY', u'89', [], [], None, ''],
        [u'const CV_YUV2RGB_NV12', u'90', [], [], None, ''],
        [u'const CV_YUV2BGR_NV12', u'91', [], [], None, ''],
        [u'const CV_YUV2RGB_NV21', u'92', [], [], None, ''],
        [u'const CV_YUV2BGR_NV21', u'93', [], [], None, ''],
        [u'const CV_YUV420sp2RGB', u'CV_YUV2RGB_NV21', [], [], None, ''],
        [u'const CV_YUV420sp2BGR', u'CV_YUV2BGR_NV21', [], [], None, ''],
        [u'const CV_YUV2RGBA_NV12', u'94', [], [], None, ''],
        [u'const CV_YUV2BGRA_NV12', u'95', [], [], None, ''],
        [u'const CV_YUV2RGBA_NV21', u'96', [], [], None, ''],
        [u'const CV_YUV2BGRA_NV21', u'97', [], [], None, ''],
        [u'const CV_YUV420sp2RGBA', u'CV_YUV2RGBA_NV21', [], [], None, ''],
        [u'const CV_YUV420sp2BGRA', u'CV_YUV2BGRA_NV21', [], [], None, ''],
        [u'const CV_YUV2RGB_YV12', u'98', [], [], None, ''],
        [u'const CV_YUV2BGR_YV12', u'99', [], [], None, ''],
        [u'const CV_YUV2RGB_IYUV', u'100', [], [], None, ''],
        [u'const CV_YUV2BGR_IYUV', u'101', [], [], None, ''],
        [u'const CV_YUV2RGB_I420', u'CV_YUV2RGB_IYUV', [], [], None, ''],
        [u'const CV_YUV2BGR_I420', u'CV_YUV2BGR_IYUV', [], [], None, ''],
        [u'const CV_YUV420p2RGB', u'CV_YUV2RGB_YV12', [], [], None, ''],
        [u'const CV_YUV420p2BGR', u'CV_YUV2BGR_YV12', [], [], None, ''],
        [u'const CV_YUV2RGBA_YV12', u'102', [], [], None, ''],
        [u'const CV_YUV2BGRA_YV12', u'103', [], [], None, ''],
        [u'const CV_YUV2RGBA_IYUV', u'104', [], [], None, ''],
        [u'const CV_YUV2BGRA_IYUV', u'105', [], [], None, ''],
        [u'const CV_YUV2RGBA_I420', u'CV_YUV2RGBA_IYUV', [], [], None, ''],
        [u'const CV_YUV2BGRA_I420', u'CV_YUV2BGRA_IYUV', [], [], None, ''],
        [u'const CV_YUV420p2RGBA', u'CV_YUV2RGBA_YV12', [], [], None, ''],
        [u'const CV_YUV420p2BGRA', u'CV_YUV2BGRA_YV12', [], [], None, ''],
        [u'const CV_YUV2GRAY_420', u'106', [], [], None, ''],
        [u'const CV_YUV2GRAY_NV21', u'CV_YUV2GRAY_420', [], [], None, ''],
        [u'const CV_YUV2GRAY_NV12', u'CV_YUV2GRAY_420', [], [], None, ''],
        [u'const CV_YUV2GRAY_YV12', u'CV_YUV2GRAY_420', [], [], None, ''],
        [u'const CV_YUV2GRAY_IYUV', u'CV_YUV2GRAY_420', [], [], None, ''],
        [u'const CV_YUV2GRAY_I420', u'CV_YUV2GRAY_420', [], [], None, ''],
        [u'const CV_YUV420sp2GRAY', u'CV_YUV2GRAY_420', [], [], None, ''],
        [u'const CV_YUV420p2GRAY', u'CV_YUV2GRAY_420', [], [], None, ''],
        [u'const CV_YUV2RGB_UYVY', u'107', [], [], None, ''],
        [u'const CV_YUV2BGR_UYVY', u'108', [], [], None, ''],
        [u'const CV_YUV2RGB_Y422', u'CV_YUV2RGB_UYVY', [], [], None, ''],
        [u'const CV_YUV2BGR_Y422', u'CV_YUV2BGR_UYVY', [], [], None, ''],
        [u'const CV_YUV2RGB_UYNV', u'CV_YUV2RGB_UYVY', [], [], None, ''],
        [u'const CV_YUV2BGR_UYNV', u'CV_YUV2BGR_UYVY', [], [], None, ''],
        [u'const CV_YUV2RGBA_UYVY', u'111', [], [], None, ''],
        [u'const CV_YUV2BGRA_UYVY', u'112', [], [], None, ''],
        [u'const CV_YUV2RGBA_Y422', u'CV_YUV2RGBA_UYVY', [], [], None, ''],
        [u'const CV_YUV2BGRA_Y422', u'CV_YUV2BGRA_UYVY', [], [], None, ''],
        [u'const CV_YUV2RGBA_UYNV', u'CV_YUV2RGBA_UYVY', [], [], None, ''],
        [u'const CV_YUV2BGRA_UYNV', u'CV_YUV2BGRA_UYVY', [], [], None, ''],
        [u'const CV_YUV2RGB_YUY2', u'115', [], [], None, ''],
        [u'const CV_YUV2BGR_YUY2', u'116', [], [], None, ''],
        [u'const CV_YUV2RGB_YVYU', u'117', [], [], None, ''],
        [u'const CV_YUV2BGR_YVYU', u'118', [], [], None, ''],
        [u'const CV_YUV2RGB_YUYV', u'CV_YUV2RGB_YUY2', [], [], None, ''],
        [u'const CV_YUV2BGR_YUYV', u'CV_YUV2BGR_YUY2', [], [], None, ''],
        [u'const CV_YUV2RGB_YUNV', u'CV_YUV2RGB_YUY2', [], [], None, ''],
        [u'const CV_YUV2BGR_YUNV', u'CV_YUV2BGR_YUY2', [], [], None, ''],
        [u'const CV_YUV2RGBA_YUY2', u'119', [], [], None, ''],
        [u'const CV_YUV2BGRA_YUY2', u'120', [], [], None, ''],
        [u'const CV_YUV2RGBA_YVYU', u'121', [], [], None, ''],
        [u'const CV_YUV2BGRA_YVYU', u'122', [], [], None, ''],
        [u'const CV_YUV2RGBA_YUYV', u'CV_YUV2RGBA_YUY2', [], [], None, ''],
        [u'const CV_YUV2BGRA_YUYV', u'CV_YUV2BGRA_YUY2', [], [], None, ''],
        [u'const CV_YUV2RGBA_YUNV', u'CV_YUV2RGBA_YUY2', [], [], None, ''],
        [u'const CV_YUV2BGRA_YUNV', u'CV_YUV2BGRA_YUY2', [], [], None, ''],
        [u'const CV_YUV2GRAY_UYVY', u'123', [], [], None, ''],
        [u'const CV_YUV2GRAY_YUY2', u'124', [], [], None, ''],
        [u'const CV_YUV2GRAY_Y422', u'CV_YUV2GRAY_UYVY', [], [], None, ''],
        [u'const CV_YUV2GRAY_UYNV', u'CV_YUV2GRAY_UYVY', [], [], None, ''],
        [u'const CV_YUV2GRAY_YVYU', u'CV_YUV2GRAY_YUY2', [], [], None, ''],
        [u'const CV_YUV2GRAY_YUYV', u'CV_YUV2GRAY_YUY2', [], [], None, ''],
        [u'const CV_YUV2GRAY_YUNV', u'CV_YUV2GRAY_YUY2', [], [], None, ''],
        [u'const CV_RGBA2mRGBA', u'125', [], [], None, ''],
        [u'const CV_mRGBA2RGBA', u'126', [], [], None, ''],
        [u'const CV_RGB2YUV_I420', u'127', [], [], None, ''],
        [u'const CV_BGR2YUV_I420', u'128', [], [], None, ''],
        [u'const CV_RGB2YUV_IYUV', u'CV_RGB2YUV_I420', [], [], None, ''],
        [u'const CV_BGR2YUV_IYUV', u'CV_BGR2YUV_I420', [], [], None, ''],
        [u'const CV_RGBA2YUV_I420', u'129', [], [], None, ''],
        [u'const CV_BGRA2YUV_I420', u'130', [], [], None, ''],
        [u'const CV_RGBA2YUV_IYUV', u'CV_RGBA2YUV_I420', [], [], None, ''],
        [u'const CV_BGRA2YUV_IYUV', u'CV_BGRA2YUV_I420', [], [], None, ''],
        [u'const CV_RGB2YUV_YV12', u'131', [], [], None, ''],
        [u'const CV_BGR2YUV_YV12', u'132', [], [], None, ''],
        [u'const CV_RGBA2YUV_YV12', u'133', [], [], None, ''],
        [u'const CV_BGRA2YUV_YV12', u'134', [], [], None, ''],
        [u'const CV_BayerBG2BGR_EA', u'135', [], [], None, ''],
        [u'const CV_BayerGB2BGR_EA', u'136', [], [], None, ''],
        [u'const CV_BayerRG2BGR_EA', u'137', [], [], None, ''],
        [u'const CV_BayerGR2BGR_EA', u'138', [], [], None, ''],
        [u'const CV_BayerBG2RGB_EA', u'CV_BayerRG2BGR_EA', [], [], None, ''],
        [u'const CV_BayerGB2RGB_EA', u'CV_BayerGR2BGR_EA', [], [], None, ''],
        [u'const CV_BayerRG2RGB_EA', u'CV_BayerBG2BGR_EA', [], [], None, ''],
        [u'const CV_BayerGR2RGB_EA', u'CV_BayerGB2BGR_EA', [], [], None, ''],
        [u'const CV_BayerBG2BGRA', u'139', [], [], None, ''],
        [u'const CV_BayerGB2BGRA', u'140', [], [], None, ''],
        [u'const CV_BayerRG2BGRA', u'141', [], [], None, ''],
        [u'const CV_BayerGR2BGRA', u'142', [], [], None, ''],
        [u'const CV_BayerBG2RGBA', u'CV_BayerRG2BGRA', [], [], None, ''],
        [u'const CV_BayerGB2RGBA', u'CV_BayerGR2BGRA', [], [], None, ''],
        [u'const CV_BayerRG2RGBA', u'CV_BayerBG2BGRA', [], [], None, ''],
        [u'const CV_BayerGR2RGBA', u'CV_BayerGB2BGRA', [], [], None, ''],
        [u'const CV_COLORCVT_MAX', u'143', [], [], None, '']],
    None]
ignored: CONST CV_BGR2BGRA=0
ignored: CONST CV_RGB2RGBA=CV_BGR2BGRA
ignored: CONST CV_BGRA2BGR=1
ignored: CONST CV_RGBA2RGB=CV_BGRA2BGR
ignored: CONST CV_BGR2RGBA=2
ignored: CONST CV_RGB2BGRA=CV_BGR2RGBA
ignored: CONST CV_RGBA2BGR=3
ignored: CONST CV_BGRA2RGB=CV_RGBA2BGR
ignored: CONST CV_BGR2RGB=4
ignored: CONST CV_RGB2BGR=CV_BGR2RGB
ignored: CONST CV_BGRA2RGBA=5
ignored: CONST CV_RGBA2BGRA=CV_BGRA2RGBA
ignored: CONST CV_BGR2GRAY=6
ignored: CONST CV_RGB2GRAY=7
ignored: CONST CV_GRAY2BGR=8
ignored: CONST CV_GRAY2RGB=CV_GRAY2BGR
ignored: CONST CV_GRAY2BGRA=9
ignored: CONST CV_GRAY2RGBA=CV_GRAY2BGRA
ignored: CONST CV_BGRA2GRAY=10
ignored: CONST CV_RGBA2GRAY=11
ignored: CONST CV_BGR2BGR565=12
ignored: CONST CV_RGB2BGR565=13
ignored: CONST CV_BGR5652BGR=14
ignored: CONST CV_BGR5652RGB=15
ignored: CONST CV_BGRA2BGR565=16
ignored: CONST CV_RGBA2BGR565=17
ignored: CONST CV_BGR5652BGRA=18
ignored: CONST CV_BGR5652RGBA=19
ignored: CONST CV_GRAY2BGR565=20
ignored: CONST CV_BGR5652GRAY=21
ignored: CONST CV_BGR2BGR555=22
ignored: CONST CV_RGB2BGR555=23
ignored: CONST CV_BGR5552BGR=24
ignored: CONST CV_BGR5552RGB=25
ignored: CONST CV_BGRA2BGR555=26
ignored: CONST CV_RGBA2BGR555=27
ignored: CONST CV_BGR5552BGRA=28
ignored: CONST CV_BGR5552RGBA=29
ignored: CONST CV_GRAY2BGR555=30
ignored: CONST CV_BGR5552GRAY=31
ignored: CONST CV_BGR2XYZ=32
ignored: CONST CV_RGB2XYZ=33
ignored: CONST CV_XYZ2BGR=34
ignored: CONST CV_XYZ2RGB=35
ignored: CONST CV_BGR2YCrCb=36
ignored: CONST CV_RGB2YCrCb=37
ignored: CONST CV_YCrCb2BGR=38
ignored: CONST CV_YCrCb2RGB=39
ignored: CONST CV_BGR2HSV=40
ignored: CONST CV_RGB2HSV=41
ignored: CONST CV_BGR2Lab=44
ignored: CONST CV_RGB2Lab=45
ignored: CONST CV_BayerBG2BGR=46
ignored: CONST CV_BayerGB2BGR=47
ignored: CONST CV_BayerRG2BGR=48
ignored: CONST CV_BayerGR2BGR=49
ignored: CONST CV_BayerBG2RGB=CV_BayerRG2BGR
ignored: CONST CV_BayerGB2RGB=CV_BayerGR2BGR
ignored: CONST CV_BayerRG2RGB=CV_BayerBG2BGR
ignored: CONST CV_BayerGR2RGB=CV_BayerGB2BGR
ignored: CONST CV_BGR2Luv=50
ignored: CONST CV_RGB2Luv=51
ignored: CONST CV_BGR2HLS=52
ignored: CONST CV_RGB2HLS=53
ignored: CONST CV_HSV2BGR=54
ignored: CONST CV_HSV2RGB=55
ignored: CONST CV_Lab2BGR=56
ignored: CONST CV_Lab2RGB=57
ignored: CONST CV_Luv2BGR=58
ignored: CONST CV_Luv2RGB=59
ignored: CONST CV_HLS2BGR=60
ignored: CONST CV_HLS2RGB=61
ignored: CONST CV_BayerBG2BGR_VNG=62
ignored: CONST CV_BayerGB2BGR_VNG=63
ignored: CONST CV_BayerRG2BGR_VNG=64
ignored: CONST CV_BayerGR2BGR_VNG=65
ignored: CONST CV_BayerBG2RGB_VNG=CV_BayerRG2BGR_VNG
ignored: CONST CV_BayerGB2RGB_VNG=CV_BayerGR2BGR_VNG
ignored: CONST CV_BayerRG2RGB_VNG=CV_BayerBG2BGR_VNG
ignored: CONST CV_BayerGR2RGB_VNG=CV_BayerGB2BGR_VNG
ignored: CONST CV_BGR2HSV_FULL=66
ignored: CONST CV_RGB2HSV_FULL=67
ignored: CONST CV_BGR2HLS_FULL=68
ignored: CONST CV_RGB2HLS_FULL=69
ignored: CONST CV_HSV2BGR_FULL=70
ignored: CONST CV_HSV2RGB_FULL=71
ignored: CONST CV_HLS2BGR_FULL=72
ignored: CONST CV_HLS2RGB_FULL=73
ignored: CONST CV_LBGR2Lab=74
ignored: CONST CV_LRGB2Lab=75
ignored: CONST CV_LBGR2Luv=76
ignored: CONST CV_LRGB2Luv=77
ignored: CONST CV_Lab2LBGR=78
ignored: CONST CV_Lab2LRGB=79
ignored: CONST CV_Luv2LBGR=80
ignored: CONST CV_Luv2LRGB=81
ignored: CONST CV_BGR2YUV=82
ignored: CONST CV_RGB2YUV=83
ignored: CONST CV_YUV2BGR=84
ignored: CONST CV_YUV2RGB=85
ignored: CONST CV_BayerBG2GRAY=86
ignored: CONST CV_BayerGB2GRAY=87
ignored: CONST CV_BayerRG2GRAY=88
ignored: CONST CV_BayerGR2GRAY=89
ignored: CONST CV_YUV2RGB_NV12=90
ignored: CONST CV_YUV2BGR_NV12=91
ignored: CONST CV_YUV2RGB_NV21=92
ignored: CONST CV_YUV2BGR_NV21=93
ignored: CONST CV_YUV420sp2RGB=CV_YUV2RGB_NV21
ignored: CONST CV_YUV420sp2BGR=CV_YUV2BGR_NV21
ignored: CONST CV_YUV2RGBA_NV12=94
ignored: CONST CV_YUV2BGRA_NV12=95
ignored: CONST CV_YUV2RGBA_NV21=96
ignored: CONST CV_YUV2BGRA_NV21=97
ignored: CONST CV_YUV420sp2RGBA=CV_YUV2RGBA_NV21
ignored: CONST CV_YUV420sp2BGRA=CV_YUV2BGRA_NV21
ignored: CONST CV_YUV2RGB_YV12=98
ignored: CONST CV_YUV2BGR_YV12=99
ignored: CONST CV_YUV2RGB_IYUV=100
ignored: CONST CV_YUV2BGR_IYUV=101
ignored: CONST CV_YUV2RGB_I420=CV_YUV2RGB_IYUV
ignored: CONST CV_YUV2BGR_I420=CV_YUV2BGR_IYUV
ignored: CONST CV_YUV420p2RGB=CV_YUV2RGB_YV12
ignored: CONST CV_YUV420p2BGR=CV_YUV2BGR_YV12
ignored: CONST CV_YUV2RGBA_YV12=102
ignored: CONST CV_YUV2BGRA_YV12=103
ignored: CONST CV_YUV2RGBA_IYUV=104
ignored: CONST CV_YUV2BGRA_IYUV=105
ignored: CONST CV_YUV2RGBA_I420=CV_YUV2RGBA_IYUV
ignored: CONST CV_YUV2BGRA_I420=CV_YUV2BGRA_IYUV
ignored: CONST CV_YUV420p2RGBA=CV_YUV2RGBA_YV12
ignored: CONST CV_YUV420p2BGRA=CV_YUV2BGRA_YV12
ignored: CONST CV_YUV2GRAY_420=106
ignored: CONST CV_YUV2GRAY_NV21=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_NV12=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_YV12=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_IYUV=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_I420=CV_YUV2GRAY_420
ignored: CONST CV_YUV420sp2GRAY=CV_YUV2GRAY_420
ignored: CONST CV_YUV420p2GRAY=CV_YUV2GRAY_420
ignored: CONST CV_YUV2RGB_UYVY=107
ignored: CONST CV_YUV2BGR_UYVY=108
ignored: CONST CV_YUV2RGB_Y422=CV_YUV2RGB_UYVY
ignored: CONST CV_YUV2BGR_Y422=CV_YUV2BGR_UYVY
ignored: CONST CV_YUV2RGB_UYNV=CV_YUV2RGB_UYVY
ignored: CONST CV_YUV2BGR_UYNV=CV_YUV2BGR_UYVY
ignored: CONST CV_YUV2RGBA_UYVY=111
ignored: CONST CV_YUV2BGRA_UYVY=112
ignored: CONST CV_YUV2RGBA_Y422=CV_YUV2RGBA_UYVY
ignored: CONST CV_YUV2BGRA_Y422=CV_YUV2BGRA_UYVY
ignored: CONST CV_YUV2RGBA_UYNV=CV_YUV2RGBA_UYVY
ignored: CONST CV_YUV2BGRA_UYNV=CV_YUV2BGRA_UYVY
ignored: CONST CV_YUV2RGB_YUY2=115
ignored: CONST CV_YUV2BGR_YUY2=116
ignored: CONST CV_YUV2RGB_YVYU=117
ignored: CONST CV_YUV2BGR_YVYU=118
ignored: CONST CV_YUV2RGB_YUYV=CV_YUV2RGB_YUY2
ignored: CONST CV_YUV2BGR_YUYV=CV_YUV2BGR_YUY2
ignored: CONST CV_YUV2RGB_YUNV=CV_YUV2RGB_YUY2
ignored: CONST CV_YUV2BGR_YUNV=CV_YUV2BGR_YUY2
ignored: CONST CV_YUV2RGBA_YUY2=119
ignored: CONST CV_YUV2BGRA_YUY2=120
ignored: CONST CV_YUV2RGBA_YVYU=121
ignored: CONST CV_YUV2BGRA_YVYU=122
ignored: CONST CV_YUV2RGBA_YUYV=CV_YUV2RGBA_YUY2
ignored: CONST CV_YUV2BGRA_YUYV=CV_YUV2BGRA_YUY2
ignored: CONST CV_YUV2RGBA_YUNV=CV_YUV2RGBA_YUY2
ignored: CONST CV_YUV2BGRA_YUNV=CV_YUV2BGRA_YUY2
ignored: CONST CV_YUV2GRAY_UYVY=123
ignored: CONST CV_YUV2GRAY_YUY2=124
ignored: CONST CV_YUV2GRAY_Y422=CV_YUV2GRAY_UYVY
ignored: CONST CV_YUV2GRAY_UYNV=CV_YUV2GRAY_UYVY
ignored: CONST CV_YUV2GRAY_YVYU=CV_YUV2GRAY_YUY2
ignored: CONST CV_YUV2GRAY_YUYV=CV_YUV2GRAY_YUY2
ignored: CONST CV_YUV2GRAY_YUNV=CV_YUV2GRAY_YUY2
ok: CONST CV_RGBA2mRGBA=125
ok: CONST CV_mRGBA2RGBA=126
ignored: CONST CV_RGB2YUV_I420=127
ignored: CONST CV_BGR2YUV_I420=128
ignored: CONST CV_RGB2YUV_IYUV=CV_RGB2YUV_I420
ignored: CONST CV_BGR2YUV_IYUV=CV_BGR2YUV_I420
ignored: CONST CV_RGBA2YUV_I420=129
ignored: CONST CV_BGRA2YUV_I420=130
ignored: CONST CV_RGBA2YUV_IYUV=CV_RGBA2YUV_I420
ignored: CONST CV_BGRA2YUV_IYUV=CV_BGRA2YUV_I420
ignored: CONST CV_RGB2YUV_YV12=131
ignored: CONST CV_BGR2YUV_YV12=132
ignored: CONST CV_RGBA2YUV_YV12=133
ignored: CONST CV_BGRA2YUV_YV12=134
ignored: CONST CV_BayerBG2BGR_EA=135
ignored: CONST CV_BayerGB2BGR_EA=136
ignored: CONST CV_BayerRG2BGR_EA=137
ignored: CONST CV_BayerGR2BGR_EA=138
ignored: CONST CV_BayerBG2RGB_EA=CV_BayerRG2BGR_EA
ignored: CONST CV_BayerGB2RGB_EA=CV_BayerGR2BGR_EA
ignored: CONST CV_BayerRG2RGB_EA=CV_BayerBG2BGR_EA
ignored: CONST CV_BayerGR2RGB_EA=CV_BayerGB2BGR_EA
ignored: CONST CV_BayerBG2BGRA=139
ignored: CONST CV_BayerGB2BGRA=140
ignored: CONST CV_BayerRG2BGRA=141
ignored: CONST CV_BayerGR2BGRA=142
ignored: CONST CV_BayerBG2RGBA=CV_BayerRG2BGRA
ignored: CONST CV_BayerGB2RGBA=CV_BayerGR2BGRA
ignored: CONST CV_BayerRG2RGBA=CV_BayerBG2BGRA
ignored: CONST CV_BayerGR2RGBA=CV_BayerGB2BGRA
ignored: CONST CV_COLORCVT_MAX=143

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_INTER_NN', u'0', [], [], None, ''],
        [u'const CV_INTER_LINEAR', u'1', [], [], None, ''],
        [u'const CV_INTER_CUBIC', u'2', [], [], None, ''],
        [u'const CV_INTER_AREA', u'3', [], [], None, ''],
        [u'const CV_INTER_LANCZOS4', u'4', [], [], None, '']],
    None]
ok: CONST CV_INTER_NN=0
ok: CONST CV_INTER_LINEAR=1
ok: CONST CV_INTER_CUBIC=2
ok: CONST CV_INTER_AREA=3
ok: CONST CV_INTER_LANCZOS4=4

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_WARP_FILL_OUTLIERS', u'8', [], [], None, ''],
        [u'const CV_WARP_INVERSE_MAP', u'16', [], [], None, '']],
    None]
ok: CONST CV_WARP_FILL_OUTLIERS=8
ok: CONST CV_WARP_INVERSE_MAP=16

--- Incoming ---
[   u'enum MorphShapes_c',
    '',
    [],
    [   [u'const CV_SHAPE_RECT', u'0', [], [], None, ''],
        [u'const CV_SHAPE_CROSS', u'1', [], [], None, ''],
        [u'const CV_SHAPE_ELLIPSE', u'2', [], [], None, ''],
        [u'const CV_SHAPE_CUSTOM', u'100', [], [], None, '']],
    None]

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_MOP_ERODE', u'0', [], [], None, ''],
        [u'const CV_MOP_DILATE', u'1', [], [], None, ''],
        [u'const CV_MOP_OPEN', u'2', [], [], None, ''],
        [u'const CV_MOP_CLOSE', u'3', [], [], None, ''],
        [u'const CV_MOP_GRADIENT', u'4', [], [], None, ''],
        [u'const CV_MOP_TOPHAT', u'5', [], [], None, ''],
        [u'const CV_MOP_BLACKHAT', u'6', [], [], None, '']],
    None]
ok: CONST CV_MOP_ERODE=0
ok: CONST CV_MOP_DILATE=1
ok: CONST CV_MOP_OPEN=2
ok: CONST CV_MOP_CLOSE=3
ok: CONST CV_MOP_GRADIENT=4
ok: CONST CV_MOP_TOPHAT=5
ok: CONST CV_MOP_BLACKHAT=6

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_TM_SQDIFF', u'0', [], [], None, ''],
        [u'const CV_TM_SQDIFF_NORMED', u'1', [], [], None, ''],
        [u'const CV_TM_CCORR', u'2', [], [], None, ''],
        [u'const CV_TM_CCORR_NORMED', u'3', [], [], None, ''],
        [u'const CV_TM_CCOEFF', u'4', [], [], None, ''],
        [u'const CV_TM_CCOEFF_NORMED', u'5', [], [], None, '']],
    None]
ignored: CONST CV_TM_SQDIFF=0
ignored: CONST CV_TM_SQDIFF_NORMED=1
ignored: CONST CV_TM_CCORR=2
ignored: CONST CV_TM_CCORR_NORMED=3
ignored: CONST CV_TM_CCOEFF=4
ignored: CONST CV_TM_CCOEFF_NORMED=5

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_RETR_EXTERNAL', u'0', [], [], None, ''],
        [u'const CV_RETR_LIST', u'1', [], [], None, ''],
        [u'const CV_RETR_CCOMP', u'2', [], [], None, ''],
        [u'const CV_RETR_TREE', u'3', [], [], None, ''],
        [u'const CV_RETR_FLOODFILL', u'4', [], [], None, '']],
    None]
ok: CONST CV_RETR_EXTERNAL=0
ok: CONST CV_RETR_LIST=1
ok: CONST CV_RETR_CCOMP=2
ok: CONST CV_RETR_TREE=3
ok: CONST CV_RETR_FLOODFILL=4

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_CHAIN_CODE', u'0', [], [], None, ''],
        [u'const CV_CHAIN_APPROX_NONE', u'1', [], [], None, ''],
        [u'const CV_CHAIN_APPROX_SIMPLE', u'2', [], [], None, ''],
        [u'const CV_CHAIN_APPROX_TC89_L1', u'3', [], [], None, ''],
        [u'const CV_CHAIN_APPROX_TC89_KCOS', u'4', [], [], None, ''],
        [u'const CV_LINK_RUNS', u'5', [], [], None, '']],
    None]
ok: CONST CV_CHAIN_CODE=0
ok: CONST CV_CHAIN_APPROX_NONE=1
ok: CONST CV_CHAIN_APPROX_SIMPLE=2
ok: CONST CV_CHAIN_APPROX_TC89_L1=3
ok: CONST CV_CHAIN_APPROX_TC89_KCOS=4
ok: CONST CV_LINK_RUNS=5

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [[u'const CV_POLY_APPROX_DP', u'0', [], [], None, '']],
    None]
ok: CONST CV_POLY_APPROX_DP=0

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_CONTOURS_MATCH_I1', u'1', [], [], None, ''],
        [u'const CV_CONTOURS_MATCH_I2', u'2', [], [], None, ''],
        [u'const CV_CONTOURS_MATCH_I3', u'3', [], [], None, '']],
    None]
ignored: CONST CV_CONTOURS_MATCH_I1=1
ignored: CONST CV_CONTOURS_MATCH_I2=2
ignored: CONST CV_CONTOURS_MATCH_I3=3

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_CLOCKWISE', u'1', [], [], None, ''],
        [u'const CV_COUNTER_CLOCKWISE', u'2', [], [], None, '']],
    None]
ok: CONST CV_CLOCKWISE=1
ok: CONST CV_COUNTER_CLOCKWISE=2

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_COMP_CORREL', u'0', [], [], None, ''],
        [u'const CV_COMP_CHISQR', u'1', [], [], None, ''],
        [u'const CV_COMP_INTERSECT', u'2', [], [], None, ''],
        [u'const CV_COMP_BHATTACHARYYA', u'3', [], [], None, ''],
        [   u'const CV_COMP_HELLINGER',
            u'CV_COMP_BHATTACHARYYA',
            [],
            [],
            None,
            ''],
        [u'const CV_COMP_CHISQR_ALT', u'4', [], [], None, ''],
        [u'const CV_COMP_KL_DIV', u'5', [], [], None, '']],
    None]
ignored: CONST CV_COMP_CORREL=0
ignored: CONST CV_COMP_CHISQR=1
ignored: CONST CV_COMP_INTERSECT=2
ignored: CONST CV_COMP_BHATTACHARYYA=3
ignored: CONST CV_COMP_HELLINGER=CV_COMP_BHATTACHARYYA
ignored: CONST CV_COMP_CHISQR_ALT=4
ignored: CONST CV_COMP_KL_DIV=5

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_DIST_MASK_3', u'3', [], [], None, ''],
        [u'const CV_DIST_MASK_5', u'5', [], [], None, ''],
        [u'const CV_DIST_MASK_PRECISE', u'0', [], [], None, '']],
    None]
ignored: CONST CV_DIST_MASK_3=3
ignored: CONST CV_DIST_MASK_5=5
ignored: CONST CV_DIST_MASK_PRECISE=0

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_DIST_LABEL_CCOMP', u'0', [], [], None, ''],
        [u'const CV_DIST_LABEL_PIXEL', u'1', [], [], None, '']],
    None]
ignored: CONST CV_DIST_LABEL_CCOMP=0
ignored: CONST CV_DIST_LABEL_PIXEL=1

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_DIST_USER', u'-1', [], [], None, ''],
        [u'const CV_DIST_L1', u'1', [], [], None, ''],
        [u'const CV_DIST_L2', u'2', [], [], None, ''],
        [u'const CV_DIST_C', u'3', [], [], None, ''],
        [u'const CV_DIST_L12', u'4', [], [], None, ''],
        [u'const CV_DIST_FAIR', u'5', [], [], None, ''],
        [u'const CV_DIST_WELSCH', u'6', [], [], None, ''],
        [u'const CV_DIST_HUBER', u'7', [], [], None, '']],
    None]
ignored: CONST CV_DIST_USER=-1
ignored: CONST CV_DIST_L1=1
ignored: CONST CV_DIST_L2=2
ignored: CONST CV_DIST_C=3
ignored: CONST CV_DIST_L12=4
ignored: CONST CV_DIST_FAIR=5
ignored: CONST CV_DIST_WELSCH=6
ignored: CONST CV_DIST_HUBER=7

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_THRESH_BINARY', u'0', [], [], None, ''],
        [u'const CV_THRESH_BINARY_INV', u'1', [], [], None, ''],
        [u'const CV_THRESH_TRUNC', u'2', [], [], None, ''],
        [u'const CV_THRESH_TOZERO', u'3', [], [], None, ''],
        [u'const CV_THRESH_TOZERO_INV', u'4', [], [], None, ''],
        [u'const CV_THRESH_MASK', u'7', [], [], None, ''],
        [u'const CV_THRESH_OTSU', u'8', [], [], None, ''],
        [u'const CV_THRESH_TRIANGLE', u'16', [], [], None, '']],
    None]
ok: CONST CV_THRESH_BINARY=0
ok: CONST CV_THRESH_BINARY_INV=1
ok: CONST CV_THRESH_TRUNC=2
ok: CONST CV_THRESH_TOZERO=3
ok: CONST CV_THRESH_TOZERO_INV=4
ok: CONST CV_THRESH_MASK=7
ok: CONST CV_THRESH_OTSU=8
ok: CONST CV_THRESH_TRIANGLE=16

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_ADAPTIVE_THRESH_MEAN_C', u'0', [], [], None, ''],
        [u'const CV_ADAPTIVE_THRESH_GAUSSIAN_C', u'1', [], [], None, '']],
    None]
ignored: CONST CV_ADAPTIVE_THRESH_MEAN_C=0
ignored: CONST CV_ADAPTIVE_THRESH_GAUSSIAN_C=1

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_FLOODFILL_FIXED_RANGE', u'(1 << 16)', [], [], None, ''],
        [u'const CV_FLOODFILL_MASK_ONLY', u'(1 << 17)', [], [], None, '']],
    None]
ignored: CONST CV_FLOODFILL_FIXED_RANGE=(1 << 16)
ignored: CONST CV_FLOODFILL_MASK_ONLY=(1 << 17)

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [[u'const CV_CANNY_L2_GRADIENT', u'(1 << 31)', [], [], None, '']],
    None]
ok: CONST CV_CANNY_L2_GRADIENT=(1 << 31)

--- Incoming ---
[   u'enum <unnamed>',
    '',
    [],
    [   [u'const CV_HOUGH_STANDARD', u'0', [], [], None, ''],
        [u'const CV_HOUGH_PROBABILISTIC', u'1', [], [], None, ''],
        [u'const CV_HOUGH_MULTI_SCALE', u'2', [], [], None, ''],
        [u'const CV_HOUGH_GRADIENT', u'3', [], [], None, '']],
    None]
ignored: CONST CV_HOUGH_STANDARD=0
ignored: CONST CV_HOUGH_PROBABILISTIC=1
ignored: CONST CV_HOUGH_MULTI_SCALE=2
ignored: CONST CV_HOUGH_GRADIENT=3


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/hal/interface.h =====
Namespaces: set([''])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/hal/interface.h


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc.hpp =====
Namespaces: set(['', u'cv'])

--- Incoming ---
[   u'enum cv.SpecialFilter',
    '',
    [],
    [[u'const cv.FILTER_SCHARR', u'-1', [], [], None, '']],
    None]
ok: CONST FILTER_SCHARR=-1

--- Incoming ---
[   u'enum cv.MorphTypes',
    '',
    [],
    [   [u'const cv.MORPH_ERODE', u'0', [], [], None, ''],
        [u'const cv.MORPH_DILATE', u'1', [], [], None, ''],
        [u'const cv.MORPH_OPEN', u'2', [], [], None, ''],
        [u'const cv.MORPH_CLOSE', u'3', [], [], None, ''],
        [u'const cv.MORPH_GRADIENT', u'4', [], [], None, ''],
        [u'const cv.MORPH_TOPHAT', u'5', [], [], None, ''],
        [u'const cv.MORPH_BLACKHAT', u'6', [], [], None, ''],
        [u'const cv.MORPH_HITMISS', u'7', [], [], None, '']],
    None]
ok: CONST MORPH_ERODE=0
ok: CONST MORPH_DILATE=1
ok: CONST MORPH_OPEN=2
ok: CONST MORPH_CLOSE=3
ok: CONST MORPH_GRADIENT=4
ok: CONST MORPH_TOPHAT=5
ok: CONST MORPH_BLACKHAT=6
ok: CONST MORPH_HITMISS=7

--- Incoming ---
[   u'enum cv.MorphShapes',
    '',
    [],
    [   [u'const cv.MORPH_RECT', u'0', [], [], None, ''],
        [u'const cv.MORPH_CROSS', u'1', [], [], None, ''],
        [u'const cv.MORPH_ELLIPSE', u'2', [], [], None, '']],
    None]
ok: CONST MORPH_RECT=0
ok: CONST MORPH_CROSS=1
ok: CONST MORPH_ELLIPSE=2

--- Incoming ---
[   u'enum cv.InterpolationFlags',
    '',
    [],
    [   [u'const cv.INTER_NEAREST', u'0', [], [], None, ''],
        [u'const cv.INTER_LINEAR', u'1', [], [], None, ''],
        [u'const cv.INTER_CUBIC', u'2', [], [], None, ''],
        [u'const cv.INTER_AREA', u'3', [], [], None, ''],
        [u'const cv.INTER_LANCZOS4', u'4', [], [], None, ''],
        [u'const cv.INTER_LINEAR_EXACT', u'5', [], [], None, ''],
        [u'const cv.INTER_NEAREST_EXACT', u'6', [], [], None, ''],
        [u'const cv.INTER_MAX', u'7', [], [], None, ''],
        [u'const cv.WARP_FILL_OUTLIERS', u'8', [], [], None, ''],
        [u'const cv.WARP_INVERSE_MAP', u'16', [], [], None, '']],
    None]
ok: CONST INTER_NEAREST=0
ok: CONST INTER_LINEAR=1
ok: CONST INTER_CUBIC=2
ok: CONST INTER_AREA=3
ok: CONST INTER_LANCZOS4=4
ok: CONST INTER_LINEAR_EXACT=5
ok: CONST INTER_NEAREST_EXACT=6
ok: CONST INTER_MAX=7
ok: CONST WARP_FILL_OUTLIERS=8
ok: CONST WARP_INVERSE_MAP=16

--- Incoming ---
[   u'enum cv.WarpPolarMode',
    '',
    [],
    [   [u'const cv.WARP_POLAR_LINEAR', u'0', [], [], None, ''],
        [u'const cv.WARP_POLAR_LOG', u'256', [], [], None, '']],
    None]
ok: CONST WARP_POLAR_LINEAR=0
ok: CONST WARP_POLAR_LOG=256

--- Incoming ---
[   u'enum cv.InterpolationMasks',
    '',
    [],
    [   [u'const cv.INTER_BITS', u'5', [], [], None, ''],
        [u'const cv.INTER_BITS2', u'INTER_BITS * 2', [], [], None, ''],
        [u'const cv.INTER_TAB_SIZE', u'1 << INTER_BITS', [], [], None, ''],
        [   u'const cv.INTER_TAB_SIZE2',
            u'INTER_TAB_SIZE * INTER_TAB_SIZE',
            [],
            [],
            None,
            '']],
    None]
ok: CONST INTER_BITS=5
ok: CONST INTER_BITS2=INTER_BITS * 2
ok: CONST INTER_TAB_SIZE=1 << INTER_BITS
ok: CONST INTER_TAB_SIZE2=INTER_TAB_SIZE * INTER_TAB_SIZE

--- Incoming ---
[   u'enum cv.DistanceTypes',
    '',
    [],
    [   [u'const cv.DIST_USER', u'-1', [], [], None, ''],
        [u'const cv.DIST_L1', u'1', [], [], None, ''],
        [u'const cv.DIST_L2', u'2', [], [], None, ''],
        [u'const cv.DIST_C', u'3', [], [], None, ''],
        [u'const cv.DIST_L12', u'4', [], [], None, ''],
        [u'const cv.DIST_FAIR', u'5', [], [], None, ''],
        [u'const cv.DIST_WELSCH', u'6', [], [], None, ''],
        [u'const cv.DIST_HUBER', u'7', [], [], None, '']],
    None]
ok: CONST DIST_USER=-1
ok: CONST DIST_L1=1
ok: CONST DIST_L2=2
ok: CONST DIST_C=3
ok: CONST DIST_L12=4
ok: CONST DIST_FAIR=5
ok: CONST DIST_WELSCH=6
ok: CONST DIST_HUBER=7

--- Incoming ---
[   u'enum cv.DistanceTransformMasks',
    '',
    [],
    [   [u'const cv.DIST_MASK_3', u'3', [], [], None, ''],
        [u'const cv.DIST_MASK_5', u'5', [], [], None, ''],
        [u'const cv.DIST_MASK_PRECISE', u'0', [], [], None, '']],
    None]
ok: CONST DIST_MASK_3=3
ok: CONST DIST_MASK_5=5
ok: CONST DIST_MASK_PRECISE=0

--- Incoming ---
[   u'enum cv.ThresholdTypes',
    '',
    [],
    [   [u'const cv.THRESH_BINARY', u'0', [], [], None, ''],
        [u'const cv.THRESH_BINARY_INV', u'1', [], [], None, ''],
        [u'const cv.THRESH_TRUNC', u'2', [], [], None, ''],
        [u'const cv.THRESH_TOZERO', u'3', [], [], None, ''],
        [u'const cv.THRESH_TOZERO_INV', u'4', [], [], None, ''],
        [u'const cv.THRESH_MASK', u'7', [], [], None, ''],
        [u'const cv.THRESH_OTSU', u'8', [], [], None, ''],
        [u'const cv.THRESH_TRIANGLE', u'16', [], [], None, '']],
    None]
ok: CONST THRESH_BINARY=0
ok: CONST THRESH_BINARY_INV=1
ok: CONST THRESH_TRUNC=2
ok: CONST THRESH_TOZERO=3
ok: CONST THRESH_TOZERO_INV=4
ok: CONST THRESH_MASK=7
ok: CONST THRESH_OTSU=8
ok: CONST THRESH_TRIANGLE=16

--- Incoming ---
[   u'enum cv.AdaptiveThresholdTypes',
    '',
    [],
    [   [u'const cv.ADAPTIVE_THRESH_MEAN_C', u'0', [], [], None, ''],
        [u'const cv.ADAPTIVE_THRESH_GAUSSIAN_C', u'1', [], [], None, '']],
    None]
ok: CONST ADAPTIVE_THRESH_MEAN_C=0
ok: CONST ADAPTIVE_THRESH_GAUSSIAN_C=1

--- Incoming ---
[   u'enum cv.GrabCutClasses',
    '',
    [],
    [   [u'const cv.GC_BGD', u'0', [], [], None, ''],
        [u'const cv.GC_FGD', u'1', [], [], None, ''],
        [u'const cv.GC_PR_BGD', u'2', [], [], None, ''],
        [u'const cv.GC_PR_FGD', u'3', [], [], None, '']],
    None]
ok: CONST GC_BGD=0
ok: CONST GC_FGD=1
ok: CONST GC_PR_BGD=2
ok: CONST GC_PR_FGD=3

--- Incoming ---
[   u'enum cv.GrabCutModes',
    '',
    [],
    [   [u'const cv.GC_INIT_WITH_RECT', u'0', [], [], None, ''],
        [u'const cv.GC_INIT_WITH_MASK', u'1', [], [], None, ''],
        [u'const cv.GC_EVAL', u'2', [], [], None, ''],
        [u'const cv.GC_EVAL_FREEZE_MODEL', u'3', [], [], None, '']],
    None]
ok: CONST GC_INIT_WITH_RECT=0
ok: CONST GC_INIT_WITH_MASK=1
ok: CONST GC_EVAL=2
ok: CONST GC_EVAL_FREEZE_MODEL=3

--- Incoming ---
[   u'enum cv.DistanceTransformLabelTypes',
    '',
    [],
    [   [u'const cv.DIST_LABEL_CCOMP', u'0', [], [], None, ''],
        [u'const cv.DIST_LABEL_PIXEL', u'1', [], [], None, '']],
    None]
ok: CONST DIST_LABEL_CCOMP=0
ok: CONST DIST_LABEL_PIXEL=1

--- Incoming ---
[   u'enum cv.FloodFillFlags',
    '',
    [],
    [   [u'const cv.FLOODFILL_FIXED_RANGE', u'1 << 16', [], [], None, ''],
        [u'const cv.FLOODFILL_MASK_ONLY', u'1 << 17', [], [], None, '']],
    None]
ok: CONST FLOODFILL_FIXED_RANGE=1 << 16
ok: CONST FLOODFILL_MASK_ONLY=1 << 17

--- Incoming ---
[   u'enum cv.ConnectedComponentsTypes',
    '',
    [],
    [   [u'const cv.CC_STAT_LEFT', u'0', [], [], None, ''],
        [u'const cv.CC_STAT_TOP', u'1', [], [], None, ''],
        [u'const cv.CC_STAT_WIDTH', u'2', [], [], None, ''],
        [u'const cv.CC_STAT_HEIGHT', u'3', [], [], None, ''],
        [u'const cv.CC_STAT_AREA', u'4', [], [], None, ''],
        [u'const cv.CC_STAT_MAX', u'5', [], [], None, '']],
    None]
ok: CONST CC_STAT_LEFT=0
ok: CONST CC_STAT_TOP=1
ok: CONST CC_STAT_WIDTH=2
ok: CONST CC_STAT_HEIGHT=3
ok: CONST CC_STAT_AREA=4
ok: CONST CC_STAT_MAX=5

--- Incoming ---
[   u'enum cv.ConnectedComponentsAlgorithmsTypes',
    '',
    [],
    [   [u'const cv.CCL_WU', u'0', [], [], None, ''],
        [u'const cv.CCL_DEFAULT', u'-1', [], [], None, ''],
        [u'const cv.CCL_GRANA', u'1', [], [], None, '']],
    None]
ok: CONST CCL_WU=0
ok: CONST CCL_DEFAULT=-1
ok: CONST CCL_GRANA=1

--- Incoming ---
[   u'enum cv.RetrievalModes',
    '',
    [],
    [   [u'const cv.RETR_EXTERNAL', u'0', [], [], None, ''],
        [u'const cv.RETR_LIST', u'1', [], [], None, ''],
        [u'const cv.RETR_CCOMP', u'2', [], [], None, ''],
        [u'const cv.RETR_TREE', u'3', [], [], None, ''],
        [u'const cv.RETR_FLOODFILL', u'4', [], [], None, '']],
    None]
ok: CONST RETR_EXTERNAL=0
ok: CONST RETR_LIST=1
ok: CONST RETR_CCOMP=2
ok: CONST RETR_TREE=3
ok: CONST RETR_FLOODFILL=4

--- Incoming ---
[   u'enum cv.ContourApproximationModes',
    '',
    [],
    [   [u'const cv.CHAIN_APPROX_NONE', u'1', [], [], None, ''],
        [u'const cv.CHAIN_APPROX_SIMPLE', u'2', [], [], None, ''],
        [u'const cv.CHAIN_APPROX_TC89_L1', u'3', [], [], None, ''],
        [u'const cv.CHAIN_APPROX_TC89_KCOS', u'4', [], [], None, '']],
    None]
ok: CONST CHAIN_APPROX_NONE=1
ok: CONST CHAIN_APPROX_SIMPLE=2
ok: CONST CHAIN_APPROX_TC89_L1=3
ok: CONST CHAIN_APPROX_TC89_KCOS=4

--- Incoming ---
[   u'enum cv.ShapeMatchModes',
    '',
    [],
    [   [u'const cv.CONTOURS_MATCH_I1', u'1', [], [], None, ''],
        [u'const cv.CONTOURS_MATCH_I2', u'2', [], [], None, ''],
        [u'const cv.CONTOURS_MATCH_I3', u'3', [], [], None, '']],
    None]
ok: CONST CONTOURS_MATCH_I1=1
ok: CONST CONTOURS_MATCH_I2=2
ok: CONST CONTOURS_MATCH_I3=3

--- Incoming ---
[   u'enum cv.HoughModes',
    '',
    [],
    [   [u'const cv.HOUGH_STANDARD', u'0', [], [], None, ''],
        [u'const cv.HOUGH_PROBABILISTIC', u'1', [], [], None, ''],
        [u'const cv.HOUGH_MULTI_SCALE', u'2', [], [], None, ''],
        [u'const cv.HOUGH_GRADIENT', u'3', [], [], None, ''],
        [u'const cv.HOUGH_GRADIENT_ALT', u'4', [], [], None, '']],
    None]
ok: CONST HOUGH_STANDARD=0
ok: CONST HOUGH_PROBABILISTIC=1
ok: CONST HOUGH_MULTI_SCALE=2
ok: CONST HOUGH_GRADIENT=3
ok: CONST HOUGH_GRADIENT_ALT=4

--- Incoming ---
[   u'enum cv.LineSegmentDetectorModes',
    '',
    [],
    [   [u'const cv.LSD_REFINE_NONE', u'0', [], [], None, ''],
        [u'const cv.LSD_REFINE_STD', u'1', [], [], None, ''],
        [u'const cv.LSD_REFINE_ADV', u'2', [], [], None, '']],
    None]
ok: CONST LSD_REFINE_NONE=0
ok: CONST LSD_REFINE_STD=1
ok: CONST LSD_REFINE_ADV=2

--- Incoming ---
[   u'enum cv.HistCompMethods',
    '',
    [],
    [   [u'const cv.HISTCMP_CORREL', u'0', [], [], None, ''],
        [u'const cv.HISTCMP_CHISQR', u'1', [], [], None, ''],
        [u'const cv.HISTCMP_INTERSECT', u'2', [], [], None, ''],
        [u'const cv.HISTCMP_BHATTACHARYYA', u'3', [], [], None, ''],
        [   u'const cv.HISTCMP_HELLINGER',
            u'HISTCMP_BHATTACHARYYA',
            [],
            [],
            None,
            ''],
        [u'const cv.HISTCMP_CHISQR_ALT', u'4', [], [], None, ''],
        [u'const cv.HISTCMP_KL_DIV', u'5', [], [], None, '']],
    None]
ok: CONST HISTCMP_CORREL=0
ok: CONST HISTCMP_CHISQR=1
ok: CONST HISTCMP_INTERSECT=2
ok: CONST HISTCMP_BHATTACHARYYA=3
ok: CONST HISTCMP_HELLINGER=HISTCMP_BHATTACHARYYA
ok: CONST HISTCMP_CHISQR_ALT=4
ok: CONST HISTCMP_KL_DIV=5

--- Incoming ---
[   u'enum cv.ColorConversionCodes',
    '',
    [],
    [   [u'const cv.COLOR_BGR2BGRA', u'0', [], [], None, ''],
        [u'const cv.COLOR_RGB2RGBA', u'COLOR_BGR2BGRA', [], [], None, ''],
        [u'const cv.COLOR_BGRA2BGR', u'1', [], [], None, ''],
        [u'const cv.COLOR_RGBA2RGB', u'COLOR_BGRA2BGR', [], [], None, ''],
        [u'const cv.COLOR_BGR2RGBA', u'2', [], [], None, ''],
        [u'const cv.COLOR_RGB2BGRA', u'COLOR_BGR2RGBA', [], [], None, ''],
        [u'const cv.COLOR_RGBA2BGR', u'3', [], [], None, ''],
        [u'const cv.COLOR_BGRA2RGB', u'COLOR_RGBA2BGR', [], [], None, ''],
        [u'const cv.COLOR_BGR2RGB', u'4', [], [], None, ''],
        [u'const cv.COLOR_RGB2BGR', u'COLOR_BGR2RGB', [], [], None, ''],
        [u'const cv.COLOR_BGRA2RGBA', u'5', [], [], None, ''],
        [u'const cv.COLOR_RGBA2BGRA', u'COLOR_BGRA2RGBA', [], [], None, ''],
        [u'const cv.COLOR_BGR2GRAY', u'6', [], [], None, ''],
        [u'const cv.COLOR_RGB2GRAY', u'7', [], [], None, ''],
        [u'const cv.COLOR_GRAY2BGR', u'8', [], [], None, ''],
        [u'const cv.COLOR_GRAY2RGB', u'COLOR_GRAY2BGR', [], [], None, ''],
        [u'const cv.COLOR_GRAY2BGRA', u'9', [], [], None, ''],
        [u'const cv.COLOR_GRAY2RGBA', u'COLOR_GRAY2BGRA', [], [], None, ''],
        [u'const cv.COLOR_BGRA2GRAY', u'10', [], [], None, ''],
        [u'const cv.COLOR_RGBA2GRAY', u'11', [], [], None, ''],
        [u'const cv.COLOR_BGR2BGR565', u'12', [], [], None, ''],
        [u'const cv.COLOR_RGB2BGR565', u'13', [], [], None, ''],
        [u'const cv.COLOR_BGR5652BGR', u'14', [], [], None, ''],
        [u'const cv.COLOR_BGR5652RGB', u'15', [], [], None, ''],
        [u'const cv.COLOR_BGRA2BGR565', u'16', [], [], None, ''],
        [u'const cv.COLOR_RGBA2BGR565', u'17', [], [], None, ''],
        [u'const cv.COLOR_BGR5652BGRA', u'18', [], [], None, ''],
        [u'const cv.COLOR_BGR5652RGBA', u'19', [], [], None, ''],
        [u'const cv.COLOR_GRAY2BGR565', u'20', [], [], None, ''],
        [u'const cv.COLOR_BGR5652GRAY', u'21', [], [], None, ''],
        [u'const cv.COLOR_BGR2BGR555', u'22', [], [], None, ''],
        [u'const cv.COLOR_RGB2BGR555', u'23', [], [], None, ''],
        [u'const cv.COLOR_BGR5552BGR', u'24', [], [], None, ''],
        [u'const cv.COLOR_BGR5552RGB', u'25', [], [], None, ''],
        [u'const cv.COLOR_BGRA2BGR555', u'26', [], [], None, ''],
        [u'const cv.COLOR_RGBA2BGR555', u'27', [], [], None, ''],
        [u'const cv.COLOR_BGR5552BGRA', u'28', [], [], None, ''],
        [u'const cv.COLOR_BGR5552RGBA', u'29', [], [], None, ''],
        [u'const cv.COLOR_GRAY2BGR555', u'30', [], [], None, ''],
        [u'const cv.COLOR_BGR5552GRAY', u'31', [], [], None, ''],
        [u'const cv.COLOR_BGR2XYZ', u'32', [], [], None, ''],
        [u'const cv.COLOR_RGB2XYZ', u'33', [], [], None, ''],
        [u'const cv.COLOR_XYZ2BGR', u'34', [], [], None, ''],
        [u'const cv.COLOR_XYZ2RGB', u'35', [], [], None, ''],
        [u'const cv.COLOR_BGR2YCrCb', u'36', [], [], None, ''],
        [u'const cv.COLOR_RGB2YCrCb', u'37', [], [], None, ''],
        [u'const cv.COLOR_YCrCb2BGR', u'38', [], [], None, ''],
        [u'const cv.COLOR_YCrCb2RGB', u'39', [], [], None, ''],
        [u'const cv.COLOR_BGR2HSV', u'40', [], [], None, ''],
        [u'const cv.COLOR_RGB2HSV', u'41', [], [], None, ''],
        [u'const cv.COLOR_BGR2Lab', u'44', [], [], None, ''],
        [u'const cv.COLOR_RGB2Lab', u'45', [], [], None, ''],
        [u'const cv.COLOR_BGR2Luv', u'50', [], [], None, ''],
        [u'const cv.COLOR_RGB2Luv', u'51', [], [], None, ''],
        [u'const cv.COLOR_BGR2HLS', u'52', [], [], None, ''],
        [u'const cv.COLOR_RGB2HLS', u'53', [], [], None, ''],
        [u'const cv.COLOR_HSV2BGR', u'54', [], [], None, ''],
        [u'const cv.COLOR_HSV2RGB', u'55', [], [], None, ''],
        [u'const cv.COLOR_Lab2BGR', u'56', [], [], None, ''],
        [u'const cv.COLOR_Lab2RGB', u'57', [], [], None, ''],
        [u'const cv.COLOR_Luv2BGR', u'58', [], [], None, ''],
        [u'const cv.COLOR_Luv2RGB', u'59', [], [], None, ''],
        [u'const cv.COLOR_HLS2BGR', u'60', [], [], None, ''],
        [u'const cv.COLOR_HLS2RGB', u'61', [], [], None, ''],
        [u'const cv.COLOR_BGR2HSV_FULL', u'66', [], [], None, ''],
        [u'const cv.COLOR_RGB2HSV_FULL', u'67', [], [], None, ''],
        [u'const cv.COLOR_BGR2HLS_FULL', u'68', [], [], None, ''],
        [u'const cv.COLOR_RGB2HLS_FULL', u'69', [], [], None, ''],
        [u'const cv.COLOR_HSV2BGR_FULL', u'70', [], [], None, ''],
        [u'const cv.COLOR_HSV2RGB_FULL', u'71', [], [], None, ''],
        [u'const cv.COLOR_HLS2BGR_FULL', u'72', [], [], None, ''],
        [u'const cv.COLOR_HLS2RGB_FULL', u'73', [], [], None, ''],
        [u'const cv.COLOR_LBGR2Lab', u'74', [], [], None, ''],
        [u'const cv.COLOR_LRGB2Lab', u'75', [], [], None, ''],
        [u'const cv.COLOR_LBGR2Luv', u'76', [], [], None, ''],
        [u'const cv.COLOR_LRGB2Luv', u'77', [], [], None, ''],
        [u'const cv.COLOR_Lab2LBGR', u'78', [], [], None, ''],
        [u'const cv.COLOR_Lab2LRGB', u'79', [], [], None, ''],
        [u'const cv.COLOR_Luv2LBGR', u'80', [], [], None, ''],
        [u'const cv.COLOR_Luv2LRGB', u'81', [], [], None, ''],
        [u'const cv.COLOR_BGR2YUV', u'82', [], [], None, ''],
        [u'const cv.COLOR_RGB2YUV', u'83', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR', u'84', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGB', u'85', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGB_NV12', u'90', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR_NV12', u'91', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGB_NV21', u'92', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR_NV21', u'93', [], [], None, ''],
        [   u'const cv.COLOR_YUV420sp2RGB',
            u'COLOR_YUV2RGB_NV21',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420sp2BGR',
            u'COLOR_YUV2BGR_NV21',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2RGBA_NV12', u'94', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGRA_NV12', u'95', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGBA_NV21', u'96', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGRA_NV21', u'97', [], [], None, ''],
        [   u'const cv.COLOR_YUV420sp2RGBA',
            u'COLOR_YUV2RGBA_NV21',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420sp2BGRA',
            u'COLOR_YUV2BGRA_NV21',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2RGB_YV12', u'98', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR_YV12', u'99', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGB_IYUV', u'100', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR_IYUV', u'101', [], [], None, ''],
        [   u'const cv.COLOR_YUV2RGB_I420',
            u'COLOR_YUV2RGB_IYUV',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGR_I420',
            u'COLOR_YUV2BGR_IYUV',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420p2RGB',
            u'COLOR_YUV2RGB_YV12',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420p2BGR',
            u'COLOR_YUV2BGR_YV12',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2RGBA_YV12', u'102', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGRA_YV12', u'103', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGBA_IYUV', u'104', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGRA_IYUV', u'105', [], [], None, ''],
        [   u'const cv.COLOR_YUV2RGBA_I420',
            u'COLOR_YUV2RGBA_IYUV',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGRA_I420',
            u'COLOR_YUV2BGRA_IYUV',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420p2RGBA',
            u'COLOR_YUV2RGBA_YV12',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420p2BGRA',
            u'COLOR_YUV2BGRA_YV12',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2GRAY_420', u'106', [], [], None, ''],
        [   u'const cv.COLOR_YUV2GRAY_NV21',
            u'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_NV12',
            u'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_YV12',
            u'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_IYUV',
            u'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_I420',
            u'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420sp2GRAY',
            u'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV420p2GRAY',
            u'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2RGB_UYVY', u'107', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR_UYVY', u'108', [], [], None, ''],
        [   u'const cv.COLOR_YUV2RGB_Y422',
            u'COLOR_YUV2RGB_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGR_Y422',
            u'COLOR_YUV2BGR_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2RGB_UYNV',
            u'COLOR_YUV2RGB_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGR_UYNV',
            u'COLOR_YUV2BGR_UYVY',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2RGBA_UYVY', u'111', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGRA_UYVY', u'112', [], [], None, ''],
        [   u'const cv.COLOR_YUV2RGBA_Y422',
            u'COLOR_YUV2RGBA_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGRA_Y422',
            u'COLOR_YUV2BGRA_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2RGBA_UYNV',
            u'COLOR_YUV2RGBA_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGRA_UYNV',
            u'COLOR_YUV2BGRA_UYVY',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2RGB_YUY2', u'115', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR_YUY2', u'116', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGB_YVYU', u'117', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGR_YVYU', u'118', [], [], None, ''],
        [   u'const cv.COLOR_YUV2RGB_YUYV',
            u'COLOR_YUV2RGB_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGR_YUYV',
            u'COLOR_YUV2BGR_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2RGB_YUNV',
            u'COLOR_YUV2RGB_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGR_YUNV',
            u'COLOR_YUV2BGR_YUY2',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2RGBA_YUY2', u'119', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGRA_YUY2', u'120', [], [], None, ''],
        [u'const cv.COLOR_YUV2RGBA_YVYU', u'121', [], [], None, ''],
        [u'const cv.COLOR_YUV2BGRA_YVYU', u'122', [], [], None, ''],
        [   u'const cv.COLOR_YUV2RGBA_YUYV',
            u'COLOR_YUV2RGBA_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGRA_YUYV',
            u'COLOR_YUV2BGRA_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2RGBA_YUNV',
            u'COLOR_YUV2RGBA_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2BGRA_YUNV',
            u'COLOR_YUV2BGRA_YUY2',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_YUV2GRAY_UYVY', u'123', [], [], None, ''],
        [u'const cv.COLOR_YUV2GRAY_YUY2', u'124', [], [], None, ''],
        [   u'const cv.COLOR_YUV2GRAY_Y422',
            u'COLOR_YUV2GRAY_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_UYNV',
            u'COLOR_YUV2GRAY_UYVY',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_YVYU',
            u'COLOR_YUV2GRAY_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_YUYV',
            u'COLOR_YUV2GRAY_YUY2',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_YUV2GRAY_YUNV',
            u'COLOR_YUV2GRAY_YUY2',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_RGBA2mRGBA', u'125', [], [], None, ''],
        [u'const cv.COLOR_mRGBA2RGBA', u'126', [], [], None, ''],
        [u'const cv.COLOR_RGB2YUV_I420', u'127', [], [], None, ''],
        [u'const cv.COLOR_BGR2YUV_I420', u'128', [], [], None, ''],
        [   u'const cv.COLOR_RGB2YUV_IYUV',
            u'COLOR_RGB2YUV_I420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BGR2YUV_IYUV',
            u'COLOR_BGR2YUV_I420',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_RGBA2YUV_I420', u'129', [], [], None, ''],
        [u'const cv.COLOR_BGRA2YUV_I420', u'130', [], [], None, ''],
        [   u'const cv.COLOR_RGBA2YUV_IYUV',
            u'COLOR_RGBA2YUV_I420',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BGRA2YUV_IYUV',
            u'COLOR_BGRA2YUV_I420',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_RGB2YUV_YV12', u'131', [], [], None, ''],
        [u'const cv.COLOR_BGR2YUV_YV12', u'132', [], [], None, ''],
        [u'const cv.COLOR_RGBA2YUV_YV12', u'133', [], [], None, ''],
        [u'const cv.COLOR_BGRA2YUV_YV12', u'134', [], [], None, ''],
        [u'const cv.COLOR_BayerBG2BGR', u'46', [], [], None, ''],
        [u'const cv.COLOR_BayerGB2BGR', u'47', [], [], None, ''],
        [u'const cv.COLOR_BayerRG2BGR', u'48', [], [], None, ''],
        [u'const cv.COLOR_BayerGR2BGR', u'49', [], [], None, ''],
        [   u'const cv.COLOR_BayerBG2RGB',
            u'COLOR_BayerRG2BGR',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGB2RGB',
            u'COLOR_BayerGR2BGR',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerRG2RGB',
            u'COLOR_BayerBG2BGR',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGR2RGB',
            u'COLOR_BayerGB2BGR',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_BayerBG2GRAY', u'86', [], [], None, ''],
        [u'const cv.COLOR_BayerGB2GRAY', u'87', [], [], None, ''],
        [u'const cv.COLOR_BayerRG2GRAY', u'88', [], [], None, ''],
        [u'const cv.COLOR_BayerGR2GRAY', u'89', [], [], None, ''],
        [u'const cv.COLOR_BayerBG2BGR_VNG', u'62', [], [], None, ''],
        [u'const cv.COLOR_BayerGB2BGR_VNG', u'63', [], [], None, ''],
        [u'const cv.COLOR_BayerRG2BGR_VNG', u'64', [], [], None, ''],
        [u'const cv.COLOR_BayerGR2BGR_VNG', u'65', [], [], None, ''],
        [   u'const cv.COLOR_BayerBG2RGB_VNG',
            u'COLOR_BayerRG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGB2RGB_VNG',
            u'COLOR_BayerGR2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerRG2RGB_VNG',
            u'COLOR_BayerBG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGR2RGB_VNG',
            u'COLOR_BayerGB2BGR_VNG',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_BayerBG2BGR_EA', u'135', [], [], None, ''],
        [u'const cv.COLOR_BayerGB2BGR_EA', u'136', [], [], None, ''],
        [u'const cv.COLOR_BayerRG2BGR_EA', u'137', [], [], None, ''],
        [u'const cv.COLOR_BayerGR2BGR_EA', u'138', [], [], None, ''],
        [   u'const cv.COLOR_BayerBG2RGB_EA',
            u'COLOR_BayerRG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGB2RGB_EA',
            u'COLOR_BayerGR2BGR_EA',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerRG2RGB_EA',
            u'COLOR_BayerBG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGR2RGB_EA',
            u'COLOR_BayerGB2BGR_EA',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_BayerBG2BGRA', u'139', [], [], None, ''],
        [u'const cv.COLOR_BayerGB2BGRA', u'140', [], [], None, ''],
        [u'const cv.COLOR_BayerRG2BGRA', u'141', [], [], None, ''],
        [u'const cv.COLOR_BayerGR2BGRA', u'142', [], [], None, ''],
        [   u'const cv.COLOR_BayerBG2RGBA',
            u'COLOR_BayerRG2BGRA',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGB2RGBA',
            u'COLOR_BayerGR2BGRA',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerRG2RGBA',
            u'COLOR_BayerBG2BGRA',
            [],
            [],
            None,
            ''],
        [   u'const cv.COLOR_BayerGR2RGBA',
            u'COLOR_BayerGB2BGRA',
            [],
            [],
            None,
            ''],
        [u'const cv.COLOR_COLORCVT_MAX', u'143', [], [], None, '']],
    None]
ok: CONST COLOR_BGR2BGRA=0
ok: CONST COLOR_RGB2RGBA=COLOR_BGR2BGRA
ok: CONST COLOR_BGRA2BGR=1
ok: CONST COLOR_RGBA2RGB=COLOR_BGRA2BGR
ok: CONST COLOR_BGR2RGBA=2
ok: CONST COLOR_RGB2BGRA=COLOR_BGR2RGBA
ok: CONST COLOR_RGBA2BGR=3
ok: CONST COLOR_BGRA2RGB=COLOR_RGBA2BGR
ok: CONST COLOR_BGR2RGB=4
ok: CONST COLOR_RGB2BGR=COLOR_BGR2RGB
ok: CONST COLOR_BGRA2RGBA=5
ok: CONST COLOR_RGBA2BGRA=COLOR_BGRA2RGBA
ok: CONST COLOR_BGR2GRAY=6
ok: CONST COLOR_RGB2GRAY=7
ok: CONST COLOR_GRAY2BGR=8
ok: CONST COLOR_GRAY2RGB=COLOR_GRAY2BGR
ok: CONST COLOR_GRAY2BGRA=9
ok: CONST COLOR_GRAY2RGBA=COLOR_GRAY2BGRA
ok: CONST COLOR_BGRA2GRAY=10
ok: CONST COLOR_RGBA2GRAY=11
ok: CONST COLOR_BGR2BGR565=12
ok: CONST COLOR_RGB2BGR565=13
ok: CONST COLOR_BGR5652BGR=14
ok: CONST COLOR_BGR5652RGB=15
ok: CONST COLOR_BGRA2BGR565=16
ok: CONST COLOR_RGBA2BGR565=17
ok: CONST COLOR_BGR5652BGRA=18
ok: CONST COLOR_BGR5652RGBA=19
ok: CONST COLOR_GRAY2BGR565=20
ok: CONST COLOR_BGR5652GRAY=21
ok: CONST COLOR_BGR2BGR555=22
ok: CONST COLOR_RGB2BGR555=23
ok: CONST COLOR_BGR5552BGR=24
ok: CONST COLOR_BGR5552RGB=25
ok: CONST COLOR_BGRA2BGR555=26
ok: CONST COLOR_RGBA2BGR555=27
ok: CONST COLOR_BGR5552BGRA=28
ok: CONST COLOR_BGR5552RGBA=29
ok: CONST COLOR_GRAY2BGR555=30
ok: CONST COLOR_BGR5552GRAY=31
ok: CONST COLOR_BGR2XYZ=32
ok: CONST COLOR_RGB2XYZ=33
ok: CONST COLOR_XYZ2BGR=34
ok: CONST COLOR_XYZ2RGB=35
ok: CONST COLOR_BGR2YCrCb=36
ok: CONST COLOR_RGB2YCrCb=37
ok: CONST COLOR_YCrCb2BGR=38
ok: CONST COLOR_YCrCb2RGB=39
ok: CONST COLOR_BGR2HSV=40
ok: CONST COLOR_RGB2HSV=41
ok: CONST COLOR_BGR2Lab=44
ok: CONST COLOR_RGB2Lab=45
ok: CONST COLOR_BGR2Luv=50
ok: CONST COLOR_RGB2Luv=51
ok: CONST COLOR_BGR2HLS=52
ok: CONST COLOR_RGB2HLS=53
ok: CONST COLOR_HSV2BGR=54
ok: CONST COLOR_HSV2RGB=55
ok: CONST COLOR_Lab2BGR=56
ok: CONST COLOR_Lab2RGB=57
ok: CONST COLOR_Luv2BGR=58
ok: CONST COLOR_Luv2RGB=59
ok: CONST COLOR_HLS2BGR=60
ok: CONST COLOR_HLS2RGB=61
ok: CONST COLOR_BGR2HSV_FULL=66
ok: CONST COLOR_RGB2HSV_FULL=67
ok: CONST COLOR_BGR2HLS_FULL=68
ok: CONST COLOR_RGB2HLS_FULL=69
ok: CONST COLOR_HSV2BGR_FULL=70
ok: CONST COLOR_HSV2RGB_FULL=71
ok: CONST COLOR_HLS2BGR_FULL=72
ok: CONST COLOR_HLS2RGB_FULL=73
ok: CONST COLOR_LBGR2Lab=74
ok: CONST COLOR_LRGB2Lab=75
ok: CONST COLOR_LBGR2Luv=76
ok: CONST COLOR_LRGB2Luv=77
ok: CONST COLOR_Lab2LBGR=78
ok: CONST COLOR_Lab2LRGB=79
ok: CONST COLOR_Luv2LBGR=80
ok: CONST COLOR_Luv2LRGB=81
ok: CONST COLOR_BGR2YUV=82
ok: CONST COLOR_RGB2YUV=83
ok: CONST COLOR_YUV2BGR=84
ok: CONST COLOR_YUV2RGB=85
ok: CONST COLOR_YUV2RGB_NV12=90
ok: CONST COLOR_YUV2BGR_NV12=91
ok: CONST COLOR_YUV2RGB_NV21=92
ok: CONST COLOR_YUV2BGR_NV21=93
ok: CONST COLOR_YUV420sp2RGB=COLOR_YUV2RGB_NV21
ok: CONST COLOR_YUV420sp2BGR=COLOR_YUV2BGR_NV21
ok: CONST COLOR_YUV2RGBA_NV12=94
ok: CONST COLOR_YUV2BGRA_NV12=95
ok: CONST COLOR_YUV2RGBA_NV21=96
ok: CONST COLOR_YUV2BGRA_NV21=97
ok: CONST COLOR_YUV420sp2RGBA=COLOR_YUV2RGBA_NV21
ok: CONST COLOR_YUV420sp2BGRA=COLOR_YUV2BGRA_NV21
ok: CONST COLOR_YUV2RGB_YV12=98
ok: CONST COLOR_YUV2BGR_YV12=99
ok: CONST COLOR_YUV2RGB_IYUV=100
ok: CONST COLOR_YUV2BGR_IYUV=101
ok: CONST COLOR_YUV2RGB_I420=COLOR_YUV2RGB_IYUV
ok: CONST COLOR_YUV2BGR_I420=COLOR_YUV2BGR_IYUV
ok: CONST COLOR_YUV420p2RGB=COLOR_YUV2RGB_YV12
ok: CONST COLOR_YUV420p2BGR=COLOR_YUV2BGR_YV12
ok: CONST COLOR_YUV2RGBA_YV12=102
ok: CONST COLOR_YUV2BGRA_YV12=103
ok: CONST COLOR_YUV2RGBA_IYUV=104
ok: CONST COLOR_YUV2BGRA_IYUV=105
ok: CONST COLOR_YUV2RGBA_I420=COLOR_YUV2RGBA_IYUV
ok: CONST COLOR_YUV2BGRA_I420=COLOR_YUV2BGRA_IYUV
ok: CONST COLOR_YUV420p2RGBA=COLOR_YUV2RGBA_YV12
ok: CONST COLOR_YUV420p2BGRA=COLOR_YUV2BGRA_YV12
ok: CONST COLOR_YUV2GRAY_420=106
ok: CONST COLOR_YUV2GRAY_NV21=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_NV12=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_YV12=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_IYUV=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_I420=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV420sp2GRAY=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV420p2GRAY=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2RGB_UYVY=107
ok: CONST COLOR_YUV2BGR_UYVY=108
ok: CONST COLOR_YUV2RGB_Y422=COLOR_YUV2RGB_UYVY
ok: CONST COLOR_YUV2BGR_Y422=COLOR_YUV2BGR_UYVY
ok: CONST COLOR_YUV2RGB_UYNV=COLOR_YUV2RGB_UYVY
ok: CONST COLOR_YUV2BGR_UYNV=COLOR_YUV2BGR_UYVY
ok: CONST COLOR_YUV2RGBA_UYVY=111
ok: CONST COLOR_YUV2BGRA_UYVY=112
ok: CONST COLOR_YUV2RGBA_Y422=COLOR_YUV2RGBA_UYVY
ok: CONST COLOR_YUV2BGRA_Y422=COLOR_YUV2BGRA_UYVY
ok: CONST COLOR_YUV2RGBA_UYNV=COLOR_YUV2RGBA_UYVY
ok: CONST COLOR_YUV2BGRA_UYNV=COLOR_YUV2BGRA_UYVY
ok: CONST COLOR_YUV2RGB_YUY2=115
ok: CONST COLOR_YUV2BGR_YUY2=116
ok: CONST COLOR_YUV2RGB_YVYU=117
ok: CONST COLOR_YUV2BGR_YVYU=118
ok: CONST COLOR_YUV2RGB_YUYV=COLOR_YUV2RGB_YUY2
ok: CONST COLOR_YUV2BGR_YUYV=COLOR_YUV2BGR_YUY2
ok: CONST COLOR_YUV2RGB_YUNV=COLOR_YUV2RGB_YUY2
ok: CONST COLOR_YUV2BGR_YUNV=COLOR_YUV2BGR_YUY2
ok: CONST COLOR_YUV2RGBA_YUY2=119
ok: CONST COLOR_YUV2BGRA_YUY2=120
ok: CONST COLOR_YUV2RGBA_YVYU=121
ok: CONST COLOR_YUV2BGRA_YVYU=122
ok: CONST COLOR_YUV2RGBA_YUYV=COLOR_YUV2RGBA_YUY2
ok: CONST COLOR_YUV2BGRA_YUYV=COLOR_YUV2BGRA_YUY2
ok: CONST COLOR_YUV2RGBA_YUNV=COLOR_YUV2RGBA_YUY2
ok: CONST COLOR_YUV2BGRA_YUNV=COLOR_YUV2BGRA_YUY2
ok: CONST COLOR_YUV2GRAY_UYVY=123
ok: CONST COLOR_YUV2GRAY_YUY2=124
ok: CONST COLOR_YUV2GRAY_Y422=COLOR_YUV2GRAY_UYVY
ok: CONST COLOR_YUV2GRAY_UYNV=COLOR_YUV2GRAY_UYVY
ok: CONST COLOR_YUV2GRAY_YVYU=COLOR_YUV2GRAY_YUY2
ok: CONST COLOR_YUV2GRAY_YUYV=COLOR_YUV2GRAY_YUY2
ok: CONST COLOR_YUV2GRAY_YUNV=COLOR_YUV2GRAY_YUY2
ok: CONST COLOR_RGBA2mRGBA=125
ok: CONST COLOR_mRGBA2RGBA=126
ok: CONST COLOR_RGB2YUV_I420=127
ok: CONST COLOR_BGR2YUV_I420=128
ok: CONST COLOR_RGB2YUV_IYUV=COLOR_RGB2YUV_I420
ok: CONST COLOR_BGR2YUV_IYUV=COLOR_BGR2YUV_I420
ok: CONST COLOR_RGBA2YUV_I420=129
ok: CONST COLOR_BGRA2YUV_I420=130
ok: CONST COLOR_RGBA2YUV_IYUV=COLOR_RGBA2YUV_I420
ok: CONST COLOR_BGRA2YUV_IYUV=COLOR_BGRA2YUV_I420
ok: CONST COLOR_RGB2YUV_YV12=131
ok: CONST COLOR_BGR2YUV_YV12=132
ok: CONST COLOR_RGBA2YUV_YV12=133
ok: CONST COLOR_BGRA2YUV_YV12=134
ok: CONST COLOR_BayerBG2BGR=46
ok: CONST COLOR_BayerGB2BGR=47
ok: CONST COLOR_BayerRG2BGR=48
ok: CONST COLOR_BayerGR2BGR=49
ok: CONST COLOR_BayerBG2RGB=COLOR_BayerRG2BGR
ok: CONST COLOR_BayerGB2RGB=COLOR_BayerGR2BGR
ok: CONST COLOR_BayerRG2RGB=COLOR_BayerBG2BGR
ok: CONST COLOR_BayerGR2RGB=COLOR_BayerGB2BGR
ok: CONST COLOR_BayerBG2GRAY=86
ok: CONST COLOR_BayerGB2GRAY=87
ok: CONST COLOR_BayerRG2GRAY=88
ok: CONST COLOR_BayerGR2GRAY=89
ok: CONST COLOR_BayerBG2BGR_VNG=62
ok: CONST COLOR_BayerGB2BGR_VNG=63
ok: CONST COLOR_BayerRG2BGR_VNG=64
ok: CONST COLOR_BayerGR2BGR_VNG=65
ok: CONST COLOR_BayerBG2RGB_VNG=COLOR_BayerRG2BGR_VNG
ok: CONST COLOR_BayerGB2RGB_VNG=COLOR_BayerGR2BGR_VNG
ok: CONST COLOR_BayerRG2RGB_VNG=COLOR_BayerBG2BGR_VNG
ok: CONST COLOR_BayerGR2RGB_VNG=COLOR_BayerGB2BGR_VNG
ok: CONST COLOR_BayerBG2BGR_EA=135
ok: CONST COLOR_BayerGB2BGR_EA=136
ok: CONST COLOR_BayerRG2BGR_EA=137
ok: CONST COLOR_BayerGR2BGR_EA=138
ok: CONST COLOR_BayerBG2RGB_EA=COLOR_BayerRG2BGR_EA
ok: CONST COLOR_BayerGB2RGB_EA=COLOR_BayerGR2BGR_EA
ok: CONST COLOR_BayerRG2RGB_EA=COLOR_BayerBG2BGR_EA
ok: CONST COLOR_BayerGR2RGB_EA=COLOR_BayerGB2BGR_EA
ok: CONST COLOR_BayerBG2BGRA=139
ok: CONST COLOR_BayerGB2BGRA=140
ok: CONST COLOR_BayerRG2BGRA=141
ok: CONST COLOR_BayerGR2BGRA=142
ok: CONST COLOR_BayerBG2RGBA=COLOR_BayerRG2BGRA
ok: CONST COLOR_BayerGB2RGBA=COLOR_BayerGR2BGRA
ok: CONST COLOR_BayerRG2RGBA=COLOR_BayerBG2BGRA
ok: CONST COLOR_BayerGR2RGBA=COLOR_BayerGB2BGRA
ok: CONST COLOR_COLORCVT_MAX=143

--- Incoming ---
[   u'enum cv.RectanglesIntersectTypes',
    '',
    [],
    [   [u'const cv.INTERSECT_NONE', u'0', [], [], None, ''],
        [u'const cv.INTERSECT_PARTIAL', u'1', [], [], None, ''],
        [u'const cv.INTERSECT_FULL', u'2', [], [], None, '']],
    None]
ok: CONST INTERSECT_NONE=0
ok: CONST INTERSECT_PARTIAL=1
ok: CONST INTERSECT_FULL=2

--- Incoming ---
[   u'enum cv.LineTypes',
    '',
    [],
    [   [u'const cv.FILLED', u'-1', [], [], None, ''],
        [u'const cv.LINE_4', u'4', [], [], None, ''],
        [u'const cv.LINE_8', u'8', [], [], None, ''],
        [u'const cv.LINE_AA', u'16', [], [], None, '']],
    None]
ok: CONST FILLED=-1
ok: CONST LINE_4=4
ok: CONST LINE_8=8
ok: CONST LINE_AA=16

--- Incoming ---
[   u'enum cv.HersheyFonts',
    '',
    [],
    [   [u'const cv.FONT_HERSHEY_SIMPLEX', u'0', [], [], None, ''],
        [u'const cv.FONT_HERSHEY_PLAIN', u'1', [], [], None, ''],
        [u'const cv.FONT_HERSHEY_DUPLEX', u'2', [], [], None, ''],
        [u'const cv.FONT_HERSHEY_COMPLEX', u'3', [], [], None, ''],
        [u'const cv.FONT_HERSHEY_TRIPLEX', u'4', [], [], None, ''],
        [u'const cv.FONT_HERSHEY_COMPLEX_SMALL', u'5', [], [], None, ''],
        [u'const cv.FONT_HERSHEY_SCRIPT_SIMPLEX', u'6', [], [], None, ''],
        [u'const cv.FONT_HERSHEY_SCRIPT_COMPLEX', u'7', [], [], None, ''],
        [u'const cv.FONT_ITALIC', u'16', [], [], None, '']],
    None]
ok: CONST FONT_HERSHEY_SIMPLEX=0
ok: CONST FONT_HERSHEY_PLAIN=1
ok: CONST FONT_HERSHEY_DUPLEX=2
ok: CONST FONT_HERSHEY_COMPLEX=3
ok: CONST FONT_HERSHEY_TRIPLEX=4
ok: CONST FONT_HERSHEY_COMPLEX_SMALL=5
ok: CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6
ok: CONST FONT_HERSHEY_SCRIPT_COMPLEX=7
ok: CONST FONT_ITALIC=16

--- Incoming ---
[   u'enum cv.MarkerTypes',
    '',
    [],
    [   [u'const cv.MARKER_CROSS', u'0', [], [], None, ''],
        [u'const cv.MARKER_TILTED_CROSS', u'1', [], [], None, ''],
        [u'const cv.MARKER_STAR', u'2', [], [], None, ''],
        [u'const cv.MARKER_DIAMOND', u'3', [], [], None, ''],
        [u'const cv.MARKER_SQUARE', u'4', [], [], None, ''],
        [u'const cv.MARKER_TRIANGLE_UP', u'5', [], [], None, ''],
        [u'const cv.MARKER_TRIANGLE_DOWN', u'6', [], [], None, '']],
    None]
ok: CONST MARKER_CROSS=0
ok: CONST MARKER_TILTED_CROSS=1
ok: CONST MARKER_STAR=2
ok: CONST MARKER_DIAMOND=3
ok: CONST MARKER_SQUARE=4
ok: CONST MARKER_TRIANGLE_UP=5
ok: CONST MARKER_TRIANGLE_DOWN=6

--- Incoming ---
[u'class cv.GeneralizedHough', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.GeneralizedHough : Algorithm, name: GeneralizedHough, base: Algorithm

--- Incoming ---
[   u'cv.GeneralizedHough.setTemplate',
    u'void',
    ['/V', '/PV'],
    [   ['Mat', u'templ', '', []],
        [u'Point', u'templCenter', u'Point(-1, -1)', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat templ=, ARG Point templCenter=Point(-1, -1)]>

--- Incoming ---
[   u'cv.GeneralizedHough.setTemplate',
    u'void',
    ['/V', '/PV'],
    [   ['Mat', u'edges', '', []],
        ['Mat', u'dx', '', []],
        ['Mat', u'dy', '', []],
        [u'Point', u'templCenter', u'Point(-1, -1)', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Point templCenter=Point(-1, -1)]>

--- Incoming ---
[   u'cv.GeneralizedHough.detect',
    u'void',
    ['/V', '/PV'],
    [   ['Mat', u'image', '', []],
        ['Mat', u'positions', '', ['/O']],
        ['Mat', u'votes', u'Mat()', ['/O']]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.detect [ARG Mat image=, ARG Mat positions=, ARG Mat votes=Mat()]>

--- Incoming ---
[   u'cv.GeneralizedHough.detect',
    u'void',
    ['/V', '/PV'],
    [   ['Mat', u'edges', '', []],
        ['Mat', u'dx', '', []],
        ['Mat', u'dy', '', []],
        ['Mat', u'positions', '', ['/O']],
        ['Mat', u'votes', u'Mat()', ['/O']]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.detect [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Mat positions=, ARG Mat votes=Mat()]>

--- Incoming ---
[   u'cv.GeneralizedHough.setCannyLowThresh',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'cannyLowThresh', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.setCannyLowThresh [ARG int cannyLowThresh=]>

--- Incoming ---
[   u'cv.GeneralizedHough.getCannyLowThresh',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHough.getCannyLowThresh []>

--- Incoming ---
[   u'cv.GeneralizedHough.setCannyHighThresh',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'cannyHighThresh', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.setCannyHighThresh [ARG int cannyHighThresh=]>

--- Incoming ---
[   u'cv.GeneralizedHough.getCannyHighThresh',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHough.getCannyHighThresh []>

--- Incoming ---
[   u'cv.GeneralizedHough.setMinDist',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'minDist', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.setMinDist [ARG double minDist=]>

--- Incoming ---
[   u'cv.GeneralizedHough.getMinDist',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHough.getMinDist []>

--- Incoming ---
[   u'cv.GeneralizedHough.setDp',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'dp', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.setDp [ARG double dp=]>

--- Incoming ---
[u'cv.GeneralizedHough.getDp', u'double', ['/C', '/V', '/PV'], [], u'double']
ok: FUNC <double cv.GeneralizedHough.getDp []>

--- Incoming ---
[   u'cv.GeneralizedHough.setMaxBufferSize',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'maxBufferSize', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHough.setMaxBufferSize [ARG int maxBufferSize=]>

--- Incoming ---
[   u'cv.GeneralizedHough.getMaxBufferSize',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHough.getMaxBufferSize []>

--- Incoming ---
[u'class cv.GeneralizedHoughBallard', u': cv::GeneralizedHough', [], [], None]
ok: class CLASS cv::.GeneralizedHoughBallard : GeneralizedHough, name: GeneralizedHoughBallard, base: GeneralizedHough

--- Incoming ---
[   u'cv.GeneralizedHoughBallard.setLevels',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'levels', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughBallard.setLevels [ARG int levels=]>

--- Incoming ---
[   u'cv.GeneralizedHoughBallard.getLevels',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHoughBallard.getLevels []>

--- Incoming ---
[   u'cv.GeneralizedHoughBallard.setVotesThreshold',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'votesThreshold', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughBallard.setVotesThreshold [ARG int votesThreshold=]>

--- Incoming ---
[   u'cv.GeneralizedHoughBallard.getVotesThreshold',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHoughBallard.getVotesThreshold []>

--- Incoming ---
[u'class cv.GeneralizedHoughGuil', u': cv::GeneralizedHough', [], [], None]
ok: class CLASS cv::.GeneralizedHoughGuil : GeneralizedHough, name: GeneralizedHoughGuil, base: GeneralizedHough

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setXi',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'xi', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setXi [ARG double xi=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getXi',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getXi []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setLevels',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'levels', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setLevels [ARG int levels=]>

--- Incoming ---
[u'cv.GeneralizedHoughGuil.getLevels', u'int', ['/C', '/V', '/PV'], [], u'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getLevels []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setAngleEpsilon',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'angleEpsilon', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setAngleEpsilon [ARG double angleEpsilon=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getAngleEpsilon',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getAngleEpsilon []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setMinAngle',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'minAngle', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMinAngle [ARG double minAngle=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getMinAngle',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMinAngle []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setMaxAngle',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'maxAngle', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMaxAngle [ARG double maxAngle=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getMaxAngle',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMaxAngle []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setAngleStep',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'angleStep', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setAngleStep [ARG double angleStep=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getAngleStep',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getAngleStep []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setAngleThresh',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'angleThresh', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setAngleThresh [ARG int angleThresh=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getAngleThresh',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getAngleThresh []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setMinScale',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'minScale', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMinScale [ARG double minScale=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getMinScale',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMinScale []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setMaxScale',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'maxScale', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMaxScale [ARG double maxScale=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getMaxScale',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMaxScale []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setScaleStep',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'scaleStep', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setScaleStep [ARG double scaleStep=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getScaleStep',
    u'double',
    ['/C', '/V', '/PV'],
    [],
    u'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getScaleStep []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setScaleThresh',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'scaleThresh', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setScaleThresh [ARG int scaleThresh=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getScaleThresh',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getScaleThresh []>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.setPosThresh',
    u'void',
    ['/V', '/PV'],
    [[u'int', u'posThresh', u'', []]],
    u'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setPosThresh [ARG int posThresh=]>

--- Incoming ---
[   u'cv.GeneralizedHoughGuil.getPosThresh',
    u'int',
    ['/C', '/V', '/PV'],
    [],
    u'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getPosThresh []>

--- Incoming ---
[u'class cv.CLAHE', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.CLAHE : Algorithm, name: CLAHE, base: Algorithm

--- Incoming ---
[   u'cv.CLAHE.apply',
    u'void',
    ['/V', '/PV'],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv.CLAHE.apply [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.CLAHE.setClipLimit',
    u'void',
    ['/V', '/PV'],
    [[u'double', u'clipLimit', u'', []]],
    u'void']
ok: FUNC <void cv.CLAHE.setClipLimit [ARG double clipLimit=]>

--- Incoming ---
[u'cv.CLAHE.getClipLimit', u'double', ['/C', '/V', '/PV'], [], u'double']
ok: FUNC <double cv.CLAHE.getClipLimit []>

--- Incoming ---
[   u'cv.CLAHE.setTilesGridSize',
    u'void',
    ['/V', '/PV'],
    [[u'Size', u'tileGridSize', u'', []]],
    u'void']
ok: FUNC <void cv.CLAHE.setTilesGridSize [ARG Size tileGridSize=]>

--- Incoming ---
[u'cv.CLAHE.getTilesGridSize', u'Size', ['/C', '/V', '/PV'], [], u'Size']
ok: FUNC <Size cv.CLAHE.getTilesGridSize []>

--- Incoming ---
[u'cv.CLAHE.collectGarbage', u'void', ['/V', '/PV'], [], u'void']
ok: FUNC <void cv.CLAHE.collectGarbage []>

--- Incoming ---
[u'class cv.Subdiv2D', '', [], [], None]
ok: class CLASS cv::.Subdiv2D : , name: Subdiv2D, base: 

--- Incoming ---
[   u'enum cv.Subdiv2D.<unnamed>',
    '',
    [],
    [   [u'const cv.Subdiv2D.PTLOC_ERROR', u'-2', [], [], None, ''],
        [u'const cv.Subdiv2D.PTLOC_OUTSIDE_RECT', u'-1', [], [], None, ''],
        [u'const cv.Subdiv2D.PTLOC_INSIDE', u'0', [], [], None, ''],
        [u'const cv.Subdiv2D.PTLOC_VERTEX', u'1', [], [], None, ''],
        [u'const cv.Subdiv2D.PTLOC_ON_EDGE', u'2', [], [], None, '']],
    None]
ok: CONST PTLOC_ERROR=-2
ok: CONST PTLOC_OUTSIDE_RECT=-1
ok: CONST PTLOC_INSIDE=0
ok: CONST PTLOC_VERTEX=1
ok: CONST PTLOC_ON_EDGE=2

--- Incoming ---
[   u'enum cv.Subdiv2D.<unnamed>',
    '',
    [],
    [   [u'const cv.Subdiv2D.NEXT_AROUND_ORG', u'0x00', [], [], None, ''],
        [u'const cv.Subdiv2D.NEXT_AROUND_DST', u'0x22', [], [], None, ''],
        [u'const cv.Subdiv2D.PREV_AROUND_ORG', u'0x11', [], [], None, ''],
        [u'const cv.Subdiv2D.PREV_AROUND_DST', u'0x33', [], [], None, ''],
        [u'const cv.Subdiv2D.NEXT_AROUND_LEFT', u'0x13', [], [], None, ''],
        [u'const cv.Subdiv2D.NEXT_AROUND_RIGHT', u'0x31', [], [], None, ''],
        [u'const cv.Subdiv2D.PREV_AROUND_LEFT', u'0x20', [], [], None, ''],
        [u'const cv.Subdiv2D.PREV_AROUND_RIGHT', u'0x02', [], [], None, '']],
    None]
ok: CONST NEXT_AROUND_ORG=0x00
ok: CONST NEXT_AROUND_DST=0x22
ok: CONST PREV_AROUND_ORG=0x11
ok: CONST PREV_AROUND_DST=0x33
ok: CONST NEXT_AROUND_LEFT=0x13
ok: CONST NEXT_AROUND_RIGHT=0x31
ok: CONST PREV_AROUND_LEFT=0x20
ok: CONST PREV_AROUND_RIGHT=0x02

--- Incoming ---
[u'cv.Subdiv2D.Subdiv2D', '', [], [], None]
ok: FUNC < cv.Subdiv2D.Subdiv2D []>

--- Incoming ---
[u'cv.Subdiv2D.Subdiv2D', '', [], [[u'Rect', u'rect', u'', []]], None]
ok: FUNC < cv.Subdiv2D.Subdiv2D [ARG Rect rect=]>

--- Incoming ---
[   u'cv.Subdiv2D.initDelaunay',
    u'void',
    [],
    [[u'Rect', u'rect', u'', []]],
    u'void']
ok: FUNC <void cv.Subdiv2D.initDelaunay [ARG Rect rect=]>

--- Incoming ---
[u'cv.Subdiv2D.insert', u'int', [], [[u'Point2f', u'pt', u'', []]], u'int']
ok: FUNC <int cv.Subdiv2D.insert [ARG Point2f pt=]>

--- Incoming ---
[   u'cv.Subdiv2D.insert',
    u'void',
    [],
    [[u'vector_Point2f', u'ptvec', u'', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv.Subdiv2D.insert [ARG vector_Point2f ptvec=]>

--- Incoming ---
[   u'cv.Subdiv2D.locate',
    u'int',
    [],
    [   [u'Point2f', u'pt', u'', []],
        [u'int', u'edge', u'', ['/O', '/Ref']],
        [u'int', u'vertex', u'', ['/O', '/Ref']]],
    u'int']
ok: FUNC <int cv.Subdiv2D.locate [ARG Point2f pt=, ARG int edge=, ARG int vertex=]>

--- Incoming ---
[   u'cv.Subdiv2D.findNearest',
    u'int',
    [],
    [[u'Point2f', u'pt', u'', []], [u'Point2f*', u'nearestPt', u'0', ['/O']]],
    u'int']
ok: FUNC <int cv.Subdiv2D.findNearest [ARG Point2f pt=, ARG Point2f * nearestPt=0]>

--- Incoming ---
[   u'cv.Subdiv2D.getEdgeList',
    u'void',
    ['/C'],
    [[u'vector_Vec4f', u'edgeList', u'', ['/O', '/Ref']]],
    u'void']
ok: FUNC <void cv.Subdiv2D.getEdgeList [ARG vector_Vec4f edgeList=]>

--- Incoming ---
[   u'cv.Subdiv2D.getLeadingEdgeList',
    u'void',
    ['/C'],
    [[u'vector_int', u'leadingEdgeList', u'', ['/O', '/Ref']]],
    u'void']
ok: FUNC <void cv.Subdiv2D.getLeadingEdgeList [ARG vector_int leadingEdgeList=]>

--- Incoming ---
[   u'cv.Subdiv2D.getTriangleList',
    u'void',
    ['/C'],
    [[u'vector_Vec6f', u'triangleList', u'', ['/O', '/Ref']]],
    u'void']
ok: FUNC <void cv.Subdiv2D.getTriangleList [ARG vector_Vec6f triangleList=]>

--- Incoming ---
[   u'cv.Subdiv2D.getVoronoiFacetList',
    u'void',
    [],
    [   [u'vector_int', u'idx', u'', ['/C', '/Ref']],
        [u'vector_vector_Point2f', u'facetList', u'', ['/O', '/Ref']],
        [u'vector_Point2f', u'facetCenters', u'', ['/O', '/Ref']]],
    u'void']
ok: FUNC <void cv.Subdiv2D.getVoronoiFacetList [ARG vector_int idx=, ARG vector_vector_Point2f facetList=, ARG vector_Point2f facetCenters=]>

--- Incoming ---
[   u'cv.Subdiv2D.getVertex',
    u'Point2f',
    ['/C'],
    [[u'int', u'vertex', u'', []], [u'int*', u'firstEdge', u'0', ['/O']]],
    u'Point2f']
ok: FUNC <Point2f cv.Subdiv2D.getVertex [ARG int vertex=, ARG int * firstEdge=0]>

--- Incoming ---
[   u'cv.Subdiv2D.getEdge',
    u'int',
    ['/C'],
    [[u'int', u'edge', u'', []], [u'int', u'nextEdgeType', u'', []]],
    u'int']
ok: FUNC <int cv.Subdiv2D.getEdge [ARG int edge=, ARG int nextEdgeType=]>

--- Incoming ---
[u'cv.Subdiv2D.nextEdge', u'int', ['/C'], [[u'int', u'edge', u'', []]], u'int']
ok: FUNC <int cv.Subdiv2D.nextEdge [ARG int edge=]>

--- Incoming ---
[   u'cv.Subdiv2D.rotateEdge',
    u'int',
    ['/C'],
    [[u'int', u'edge', u'', []], [u'int', u'rotate', u'', []]],
    u'int']
ok: FUNC <int cv.Subdiv2D.rotateEdge [ARG int edge=, ARG int rotate=]>

--- Incoming ---
[u'cv.Subdiv2D.symEdge', u'int', ['/C'], [[u'int', u'edge', u'', []]], u'int']
ok: FUNC <int cv.Subdiv2D.symEdge [ARG int edge=]>

--- Incoming ---
[   u'cv.Subdiv2D.edgeOrg',
    u'int',
    ['/C'],
    [[u'int', u'edge', u'', []], [u'Point2f*', u'orgpt', u'0', ['/O']]],
    u'int']
ok: FUNC <int cv.Subdiv2D.edgeOrg [ARG int edge=, ARG Point2f * orgpt=0]>

--- Incoming ---
[   u'cv.Subdiv2D.edgeDst',
    u'int',
    ['/C'],
    [[u'int', u'edge', u'', []], [u'Point2f*', u'dstpt', u'0', ['/O']]],
    u'int']
ok: FUNC <int cv.Subdiv2D.edgeDst [ARG int edge=, ARG Point2f * dstpt=0]>

--- Incoming ---
[u'class cv.LineSegmentDetector', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.LineSegmentDetector : Algorithm, name: LineSegmentDetector, base: Algorithm

--- Incoming ---
[   u'cv.LineSegmentDetector.detect',
    u'void',
    ['/V', '/PV'],
    [   ['Mat', u'_image', '', []],
        ['Mat', u'_lines', '', ['/O']],
        ['Mat', u'width', u'Mat()', ['/O']],
        ['Mat', u'prec', u'Mat()', ['/O']],
        ['Mat', u'nfa', u'Mat()', ['/O']]],
    u'void']
ok: FUNC <void cv.LineSegmentDetector.detect [ARG Mat _image=, ARG Mat _lines=, ARG Mat width=Mat(), ARG Mat prec=Mat(), ARG Mat nfa=Mat()]>

--- Incoming ---
[   u'cv.LineSegmentDetector.drawSegments',
    u'void',
    ['/V', '/PV'],
    [['Mat', u'_image', '', ['/IO']], ['Mat', u'lines', '', []]],
    u'void']
ok: FUNC <void cv.LineSegmentDetector.drawSegments [ARG Mat _image=, ARG Mat lines=]>

--- Incoming ---
[   u'cv.LineSegmentDetector.compareSegments',
    u'int',
    ['/V', '/PV'],
    [   [u'Size', u'size', u'', ['/C', '/Ref']],
        ['Mat', u'lines1', '', []],
        ['Mat', u'lines2', '', []],
        ['Mat', u'_image', u'Mat()', ['/IO']]],
    u'int']
ok: FUNC <int cv.LineSegmentDetector.compareSegments [ARG Size size=, ARG Mat lines1=, ARG Mat lines2=, ARG Mat _image=Mat()]>

--- Incoming ---
[   u'cv.createLineSegmentDetector',
    u'Ptr_LineSegmentDetector',
    [],
    [   [u'int', u'_refine', u'LSD_REFINE_STD', []],
        [u'double', u'_scale', u'0.8', []],
        [u'double', u'_sigma_scale', u'0.6', []],
        [u'double', u'_quant', u'2.0', []],
        [u'double', u'_ang_th', u'22.5', []],
        [u'double', u'_log_eps', u'0', []],
        [u'double', u'_density_th', u'0.7', []],
        [u'int', u'_n_bins', u'1024', []]],
    u'Ptr<LineSegmentDetector>']
ok: FUNC <Ptr_LineSegmentDetector cv..createLineSegmentDetector [ARG LineSegmentDetectorModes _refine=LSD_REFINE_STD, ARG double _scale=0.8, ARG double _sigma_scale=0.6, ARG double _quant=2.0, ARG double _ang_th=22.5, ARG double _log_eps=0, ARG double _density_th=0.7, ARG int _n_bins=1024]>

--- Incoming ---
[   u'cv.getGaussianKernel',
    u'Mat',
    [],
    [   [u'int', u'ksize', u'', []],
        [u'double', u'sigma', u'', []],
        [u'int', u'ktype', u'CV_64F', []]],
    u'Mat']
ok: FUNC <Mat cv..getGaussianKernel [ARG int ksize=, ARG double sigma=, ARG int ktype=CV_64F]>

--- Incoming ---
[   u'cv.getDerivKernels',
    u'void',
    [],
    [   ['Mat', u'kx', '', ['/O']],
        ['Mat', u'ky', '', ['/O']],
        [u'int', u'dx', u'', []],
        [u'int', u'dy', u'', []],
        [u'int', u'ksize', u'', []],
        [u'bool', u'normalize', u'false', []],
        [u'int', u'ktype', u'CV_32F', []]],
    u'void']
ok: FUNC <void cv..getDerivKernels [ARG Mat kx=, ARG Mat ky=, ARG int dx=, ARG int dy=, ARG int ksize=, ARG bool normalize=false, ARG int ktype=CV_32F]>

--- Incoming ---
[   u'cv.getGaborKernel',
    u'Mat',
    [],
    [   [u'Size', u'ksize', u'', []],
        [u'double', u'sigma', u'', []],
        [u'double', u'theta', u'', []],
        [u'double', u'lambd', u'', []],
        [u'double', u'gamma', u'', []],
        [u'double', u'psi', u'CV_PI*0.5', []],
        [u'int', u'ktype', u'CV_64F', []]],
    u'Mat']
ok: FUNC <Mat cv..getGaborKernel [ARG Size ksize=, ARG double sigma=, ARG double theta=, ARG double lambd=, ARG double gamma=, ARG double psi=CV_PI*0.5, ARG int ktype=CV_64F]>

--- Incoming ---
[   u'cv.getStructuringElement',
    u'Mat',
    [],
    [   [u'int', u'shape', u'', []],
        [u'Size', u'ksize', u'', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []]],
    u'Mat']
ok: FUNC <Mat cv..getStructuringElement [ARG MorphShapes shape=, ARG Size ksize=, ARG Point anchor=Point(-1,-1)]>

--- Incoming ---
[   u'cv.medianBlur',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ksize', u'', []]],
    u'void']
ok: FUNC <void cv..medianBlur [ARG Mat src=, ARG Mat dst=, ARG int ksize=]>

--- Incoming ---
[   u'cv.GaussianBlur',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Size', u'ksize', u'', []],
        [u'double', u'sigmaX', u'', []],
        [u'double', u'sigmaY', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..GaussianBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG double sigmaX=, ARG double sigmaY=0, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.bilateralFilter',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'd', u'', []],
        [u'double', u'sigmaColor', u'', []],
        [u'double', u'sigmaSpace', u'', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..bilateralFilter [ARG Mat src=, ARG Mat dst=, ARG int d=, ARG double sigmaColor=, ARG double sigmaSpace=, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.boxFilter',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ddepth', u'', []],
        [u'Size', u'ksize', u'', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'bool', u'normalize', u'true', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..boxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG bool normalize=true, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.sqrBoxFilter',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ddepth', u'', []],
        [u'Size', u'ksize', u'', []],
        [u'Point', u'anchor', u'Point(-1, -1)', []],
        [u'bool', u'normalize', u'true', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..sqrBoxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1, -1), ARG bool normalize=true, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.blur',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Size', u'ksize', u'', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..blur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.filter2D',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ddepth', u'', []],
        ['Mat', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..filter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.sepFilter2D',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ddepth', u'', []],
        ['Mat', u'kernelX', '', []],
        ['Mat', u'kernelY', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..sepFilter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernelX=, ARG Mat kernelY=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.Sobel',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ddepth', u'', []],
        [u'int', u'dx', u'', []],
        [u'int', u'dy', u'', []],
        [u'int', u'ksize', u'3', []],
        [u'double', u'scale', u'1', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..Sobel [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG int ksize=3, ARG double scale=1, ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.spatialGradient',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dx', '', ['/O']],
        ['Mat', u'dy', '', ['/O']],
        [u'int', u'ksize', u'3', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..spatialGradient [ARG Mat src=, ARG Mat dx=, ARG Mat dy=, ARG int ksize=3, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.Scharr',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ddepth', u'', []],
        [u'int', u'dx', u'', []],
        [u'int', u'dy', u'', []],
        [u'double', u'scale', u'1', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..Scharr [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG double scale=1, ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.Laplacian',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ddepth', u'', []],
        [u'int', u'ksize', u'1', []],
        [u'double', u'scale', u'1', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..Laplacian [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int ksize=1, ARG double scale=1, ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.Canny',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'edges', '', ['/O']],
        [u'double', u'threshold1', u'', []],
        [u'double', u'threshold2', u'', []],
        [u'int', u'apertureSize', u'3', []],
        [u'bool', u'L2gradient', u'false', []]],
    u'void']
ok: FUNC <void cv..Canny [ARG Mat image=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>

--- Incoming ---
[   u'cv.Canny',
    u'void',
    [],
    [   ['Mat', u'dx', '', []],
        ['Mat', u'dy', '', []],
        ['Mat', u'edges', '', ['/O']],
        [u'double', u'threshold1', u'', []],
        [u'double', u'threshold2', u'', []],
        [u'bool', u'L2gradient', u'false', []]],
    u'void']
ok: FUNC <void cv..Canny [ARG Mat dx=, ARG Mat dy=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG bool L2gradient=false]>

--- Incoming ---
[   u'cv.cornerMinEigenVal',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'blockSize', u'', []],
        [u'int', u'ksize', u'3', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..cornerMinEigenVal [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=3, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.cornerHarris',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'blockSize', u'', []],
        [u'int', u'ksize', u'', []],
        [u'double', u'k', u'', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..cornerHarris [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG double k=, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.cornerEigenValsAndVecs',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'blockSize', u'', []],
        [u'int', u'ksize', u'', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..cornerEigenValsAndVecs [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.preCornerDetect',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'ksize', u'', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..preCornerDetect [ARG Mat src=, ARG Mat dst=, ARG int ksize=, ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.cornerSubPix',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'corners', '', ['/IO']],
        [u'Size', u'winSize', u'', []],
        [u'Size', u'zeroZone', u'', []],
        [u'TermCriteria', u'criteria', u'', []]],
    u'void']
ok: FUNC <void cv..cornerSubPix [ARG Mat image=, ARG Mat corners=, ARG Size winSize=, ARG Size zeroZone=, ARG TermCriteria criteria=]>

--- Incoming ---
[   u'cv.goodFeaturesToTrack',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'corners', '', ['/O']],
        [u'int', u'maxCorners', u'', []],
        [u'double', u'qualityLevel', u'', []],
        [u'double', u'minDistance', u'', []],
        ['Mat', u'mask', u'Mat()', []],
        [u'int', u'blockSize', u'3', []],
        [u'bool', u'useHarrisDetector', u'false', []],
        [u'double', u'k', u'0.04', []]],
    u'void']
ok: FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=Mat(), ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   u'cv.goodFeaturesToTrack',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'corners', '', ['/O']],
        [u'int', u'maxCorners', u'', []],
        [u'double', u'qualityLevel', u'', []],
        [u'double', u'minDistance', u'', []],
        ['Mat', u'mask', '', []],
        [u'int', u'blockSize', u'', []],
        [u'int', u'gradientSize', u'', []],
        [u'bool', u'useHarrisDetector', u'false', []],
        [u'double', u'k', u'0.04', []]],
    u'void']
ok: FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG int blockSize=, ARG int gradientSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   u'cv.HoughLines',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'lines', '', ['/O']],
        [u'double', u'rho', u'', []],
        [u'double', u'theta', u'', []],
        [u'int', u'threshold', u'', []],
        [u'double', u'srn', u'0', []],
        [u'double', u'stn', u'0', []],
        [u'double', u'min_theta', u'0', []],
        [u'double', u'max_theta', u'CV_PI', []]],
    u'void']
ok: FUNC <void cv..HoughLines [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>

--- Incoming ---
[   u'cv.HoughLinesP',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'lines', '', ['/O']],
        [u'double', u'rho', u'', []],
        [u'double', u'theta', u'', []],
        [u'int', u'threshold', u'', []],
        [u'double', u'minLineLength', u'0', []],
        [u'double', u'maxLineGap', u'0', []]],
    u'void']
ok: FUNC <void cv..HoughLinesP [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double minLineLength=0, ARG double maxLineGap=0]>

--- Incoming ---
[   u'cv.HoughLinesPointSet',
    u'void',
    [],
    [   ['Mat', u'_point', '', []],
        ['Mat', u'_lines', '', ['/O']],
        [u'int', u'lines_max', u'', []],
        [u'int', u'threshold', u'', []],
        [u'double', u'min_rho', u'', []],
        [u'double', u'max_rho', u'', []],
        [u'double', u'rho_step', u'', []],
        [u'double', u'min_theta', u'', []],
        [u'double', u'max_theta', u'', []],
        [u'double', u'theta_step', u'', []]],
    u'void']
ok: FUNC <void cv..HoughLinesPointSet [ARG Mat _point=, ARG Mat _lines=, ARG int lines_max=, ARG int threshold=, ARG double min_rho=, ARG double max_rho=, ARG double rho_step=, ARG double min_theta=, ARG double max_theta=, ARG double theta_step=]>

--- Incoming ---
[   u'cv.HoughCircles',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'circles', '', ['/O']],
        [u'int', u'method', u'', []],
        [u'double', u'dp', u'', []],
        [u'double', u'minDist', u'', []],
        [u'double', u'param1', u'100', []],
        [u'double', u'param2', u'100', []],
        [u'int', u'minRadius', u'0', []],
        [u'int', u'maxRadius', u'0', []]],
    u'void']
ok: FUNC <void cv..HoughCircles [ARG Mat image=, ARG Mat circles=, ARG HoughModes method=, ARG double dp=, ARG double minDist=, ARG double param1=100, ARG double param2=100, ARG int minRadius=0, ARG int maxRadius=0]>

--- Incoming ---
[   u'cv.erode',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'iterations', u'1', []],
        [u'int', u'borderType', u'BORDER_CONSTANT', []],
        [   u'Scalar',
            u'borderValue',
            u'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..erode [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG BorderTypes borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   u'cv.dilate',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'iterations', u'1', []],
        [u'int', u'borderType', u'BORDER_CONSTANT', []],
        [   u'Scalar',
            u'borderValue',
            u'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..dilate [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG BorderTypes borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   u'cv.morphologyEx',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'op', u'', []],
        ['Mat', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'iterations', u'1', []],
        [u'int', u'borderType', u'BORDER_CONSTANT', []],
        [   u'Scalar',
            u'borderValue',
            u'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..morphologyEx [ARG Mat src=, ARG Mat dst=, ARG MorphTypes op=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG BorderTypes borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   u'cv.resize',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Size', u'dsize', u'', []],
        [u'double', u'fx', u'0', []],
        [u'double', u'fy', u'0', []],
        [u'int', u'interpolation', u'INTER_LINEAR', []]],
    u'void']
ok: FUNC <void cv..resize [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG double fx=0, ARG double fy=0, ARG int interpolation=INTER_LINEAR]>

--- Incoming ---
[   u'cv.warpAffine',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'M', '', []],
        [u'Size', u'dsize', u'', []],
        [u'int', u'flags', u'INTER_LINEAR', []],
        [u'int', u'borderMode', u'BORDER_CONSTANT', []],
        [u'Scalar', u'borderValue', u'Scalar()', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..warpAffine [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG BorderTypes borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   u'cv.warpPerspective',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'M', '', []],
        [u'Size', u'dsize', u'', []],
        [u'int', u'flags', u'INTER_LINEAR', []],
        [u'int', u'borderMode', u'BORDER_CONSTANT', []],
        [u'Scalar', u'borderValue', u'Scalar()', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..warpPerspective [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG BorderTypes borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   u'cv.remap',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'map1', '', []],
        ['Mat', u'map2', '', []],
        [u'int', u'interpolation', u'', []],
        [u'int', u'borderMode', u'BORDER_CONSTANT', []],
        [u'Scalar', u'borderValue', u'Scalar()', ['/C', '/Ref']]],
    u'void']
ok: FUNC <void cv..remap [ARG Mat src=, ARG Mat dst=, ARG Mat map1=, ARG Mat map2=, ARG int interpolation=, ARG BorderTypes borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   u'cv.convertMaps',
    u'void',
    [],
    [   ['Mat', u'map1', '', []],
        ['Mat', u'map2', '', []],
        ['Mat', u'dstmap1', '', ['/O']],
        ['Mat', u'dstmap2', '', ['/O']],
        [u'int', u'dstmap1type', u'', []],
        [u'bool', u'nninterpolation', u'false', []]],
    u'void']
ok: FUNC <void cv..convertMaps [ARG Mat map1=, ARG Mat map2=, ARG Mat dstmap1=, ARG Mat dstmap2=, ARG int dstmap1type=, ARG bool nninterpolation=false]>

--- Incoming ---
[   u'cv.getRotationMatrix2D',
    u'Mat',
    [],
    [   [u'Point2f', u'center', u'', []],
        [u'double', u'angle', u'', []],
        [u'double', u'scale', u'', []]],
    u'Mat']
ok: FUNC <Mat cv..getRotationMatrix2D [ARG Point2f center=, ARG double angle=, ARG double scale=]>

--- Incoming ---
[   u'cv.invertAffineTransform',
    u'void',
    [],
    [['Mat', u'M', '', []], ['Mat', u'iM', '', ['/O']]],
    u'void']
ok: FUNC <void cv..invertAffineTransform [ARG Mat M=, ARG Mat iM=]>

--- Incoming ---
[   u'cv.getPerspectiveTransform',
    u'Mat',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', []],
        [u'int', u'solveMethod', u'DECOMP_LU', []]],
    u'Mat']
ok: FUNC <Mat cv..getPerspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG int solveMethod=DECOMP_LU]>

--- Incoming ---
[   u'cv.getAffineTransform',
    u'Mat',
    [],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', []]],
    u'Mat']
ok: FUNC <Mat cv..getAffineTransform [ARG vector_Point2f src=, ARG vector_Point2f dst=]>

--- Incoming ---
[   u'cv.getRectSubPix',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        [u'Size', u'patchSize', u'', []],
        [u'Point2f', u'center', u'', []],
        ['Mat', u'patch', '', ['/O']],
        [u'int', u'patchType', u'-1', []]],
    u'void']
ok: FUNC <void cv..getRectSubPix [ARG Mat image=, ARG Size patchSize=, ARG Point2f center=, ARG Mat patch=, ARG int patchType=-1]>

--- Incoming ---
[   u'cv.logPolar',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Point2f', u'center', u'', []],
        [u'double', u'M', u'', []],
        [u'int', u'flags', u'', []]],
    u'void']
ok: FUNC <void cv..logPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double M=, ARG int flags=]>

--- Incoming ---
[   u'cv.linearPolar',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Point2f', u'center', u'', []],
        [u'double', u'maxRadius', u'', []],
        [u'int', u'flags', u'', []]],
    u'void']
ok: FUNC <void cv..linearPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>

--- Incoming ---
[   u'cv.warpPolar',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Size', u'dsize', u'', []],
        [u'Point2f', u'center', u'', []],
        [u'double', u'maxRadius', u'', []],
        [u'int', u'flags', u'', []]],
    u'void']
ok: FUNC <void cv..warpPolar [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>

--- Incoming ---
[   u'cv.integral',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'sum', '', ['/O']],
        [u'int', u'sdepth', u'-1', []]],
    u'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG int sdepth=-1]>

--- Incoming ---
[   u'cv.integral',
    u'void',
    [u'=integral2'],
    [   ['Mat', u'src', '', []],
        ['Mat', u'sum', '', ['/O']],
        ['Mat', u'sqsum', '', ['/O']],
        [u'int', u'sdepth', u'-1', []],
        [u'int', u'sqdepth', u'-1', []]],
    u'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG int sdepth=-1, ARG int sqdepth=-1]>

--- Incoming ---
[   u'cv.integral',
    u'void',
    [u'=integral3'],
    [   ['Mat', u'src', '', []],
        ['Mat', u'sum', '', ['/O']],
        ['Mat', u'sqsum', '', ['/O']],
        ['Mat', u'tilted', '', ['/O']],
        [u'int', u'sdepth', u'-1', []],
        [u'int', u'sqdepth', u'-1', []]],
    u'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG Mat tilted=, ARG int sdepth=-1, ARG int sqdepth=-1]>

--- Incoming ---
[   u'cv.accumulate',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/IO']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..accumulate [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.accumulateSquare',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/IO']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..accumulateSquare [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.accumulateProduct',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/IO']],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..accumulateProduct [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.accumulateWeighted',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/IO']],
        [u'double', u'alpha', u'', []],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..accumulateWeighted [ARG Mat src=, ARG Mat dst=, ARG double alpha=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.phaseCorrelate',
    u'Point2d',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'window', u'Mat()', []],
        [u'double*', u'response', u'0', ['/O']]],
    u'Point2d']
ok: FUNC <Point2d cv..phaseCorrelate [ARG Mat src1=, ARG Mat src2=, ARG Mat window=Mat(), ARG double * response=0]>

--- Incoming ---
[   u'cv.createHanningWindow',
    u'void',
    [],
    [   ['Mat', u'dst', '', ['/O']],
        [u'Size', u'winSize', u'', []],
        [u'int', u'type', u'', []]],
    u'void']
ok: FUNC <void cv..createHanningWindow [ARG Mat dst=, ARG Size winSize=, ARG int type=]>

--- Incoming ---
[   u'cv.threshold',
    u'double',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'thresh', u'', []],
        [u'double', u'maxval', u'', []],
        [u'int', u'type', u'', []]],
    u'double']
ok: FUNC <double cv..threshold [ARG Mat src=, ARG Mat dst=, ARG double thresh=, ARG double maxval=, ARG ThresholdTypes type=]>

--- Incoming ---
[   u'cv.adaptiveThreshold',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'maxValue', u'', []],
        [u'int', u'adaptiveMethod', u'', []],
        [u'int', u'thresholdType', u'', []],
        [u'int', u'blockSize', u'', []],
        [u'double', u'C', u'', []]],
    u'void']
ok: FUNC <void cv..adaptiveThreshold [ARG Mat src=, ARG Mat dst=, ARG double maxValue=, ARG AdaptiveThresholdTypes adaptiveMethod=, ARG ThresholdTypes thresholdType=, ARG int blockSize=, ARG double C=]>

--- Incoming ---
[   u'cv.pyrDown',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Size', u'dstsize', u'Size()', ['/C', '/Ref']],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..pyrDown [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.pyrUp',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'Size', u'dstsize', u'Size()', ['/C', '/Ref']],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'void']
ok: FUNC <void cv..pyrUp [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG BorderTypes borderType=BORDER_DEFAULT]>

--- Incoming ---
[   u'cv.calcHist',
    u'void',
    [],
    [   ['vector_Mat', u'images', '', []],
        [u'vector_int', u'channels', u'', ['/C', '/Ref']],
        ['Mat', u'mask', '', []],
        ['Mat', u'hist', '', ['/O']],
        [u'vector_int', u'histSize', u'', ['/C', '/Ref']],
        [u'vector_float', u'ranges', u'', ['/C', '/Ref']],
        [u'bool', u'accumulate', u'false', []]],
    u'void']
ok: FUNC <void cv..calcHist [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat mask=, ARG Mat hist=, ARG vector_int histSize=, ARG vector_float ranges=, ARG bool accumulate=false]>

--- Incoming ---
[   u'cv.calcBackProject',
    u'void',
    [],
    [   ['vector_Mat', u'images', '', []],
        [u'vector_int', u'channels', u'', ['/C', '/Ref']],
        ['Mat', u'hist', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'vector_float', u'ranges', u'', ['/C', '/Ref']],
        [u'double', u'scale', u'', []]],
    u'void']
ok: FUNC <void cv..calcBackProject [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat hist=, ARG Mat dst=, ARG vector_float ranges=, ARG double scale=]>

--- Incoming ---
[   u'cv.compareHist',
    u'double',
    [],
    [   ['Mat', u'H1', '', []],
        ['Mat', u'H2', '', []],
        [u'int', u'method', u'', []]],
    u'double']
ok: FUNC <double cv..compareHist [ARG Mat H1=, ARG Mat H2=, ARG HistCompMethods method=]>

--- Incoming ---
[   u'cv.equalizeHist',
    u'void',
    [],
    [['Mat', u'src', '', []], ['Mat', u'dst', '', ['/O']]],
    u'void']
ok: FUNC <void cv..equalizeHist [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   u'cv.createCLAHE',
    u'Ptr_CLAHE',
    [],
    [   [u'double', u'clipLimit', u'40.0', []],
        [u'Size', u'tileGridSize', u'Size(8, 8)', []]],
    u'Ptr<CLAHE>']
ok: FUNC <Ptr_CLAHE cv..createCLAHE [ARG double clipLimit=40.0, ARG Size tileGridSize=Size(8, 8)]>

--- Incoming ---
[   u'cv.wrapperEMD',
    u'float',
    [u'=EMD'],
    [   ['Mat', u'signature1', '', []],
        ['Mat', u'signature2', '', []],
        [u'int', u'distType', u'', []],
        ['Mat', u'cost', u'Mat()', []],
        [u'Ptr_float', u'lowerBound', u'Ptr<float>()', ['/IO']],
        ['Mat', u'flow', u'Mat()', ['/O']]],
    u'float']
ok: FUNC <float cv..wrapperEMD [ARG Mat signature1=, ARG Mat signature2=, ARG DistanceTypes distType=, ARG Mat cost=Mat(), ARG  lowerBound=cv::Ptr<float>(), ARG Mat flow=Mat()]>

--- Incoming ---
[   u'cv.watershed',
    u'void',
    [],
    [['Mat', u'image', '', []], ['Mat', u'markers', '', ['/IO']]],
    u'void']
ok: FUNC <void cv..watershed [ARG Mat image=, ARG Mat markers=]>

--- Incoming ---
[   u'cv.pyrMeanShiftFiltering',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'double', u'sp', u'', []],
        [u'double', u'sr', u'', []],
        [u'int', u'maxLevel', u'1', []],
        [   u'TermCriteria',
            u'termcrit',
            u'TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)',
            []]],
    u'void']
ok: FUNC <void cv..pyrMeanShiftFiltering [ARG Mat src=, ARG Mat dst=, ARG double sp=, ARG double sr=, ARG int maxLevel=1, ARG TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)]>

--- Incoming ---
[   u'cv.grabCut',
    u'void',
    [],
    [   ['Mat', u'img', '', []],
        ['Mat', u'mask', '', ['/IO']],
        [u'Rect', u'rect', u'', []],
        ['Mat', u'bgdModel', '', ['/IO']],
        ['Mat', u'fgdModel', '', ['/IO']],
        [u'int', u'iterCount', u'', []],
        [u'int', u'mode', u'GC_EVAL', []]],
    u'void']
ok: FUNC <void cv..grabCut [ARG Mat img=, ARG Mat mask=, ARG Rect rect=, ARG Mat bgdModel=, ARG Mat fgdModel=, ARG int iterCount=, ARG int mode=GC_EVAL]>

--- Incoming ---
[   u'cv.distanceTransform',
    u'void',
    [u'=distanceTransformWithLabels'],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'labels', '', ['/O']],
        [u'int', u'distanceType', u'', []],
        [u'int', u'maskSize', u'', []],
        [u'int', u'labelType', u'DIST_LABEL_CCOMP', []]],
    u'void']
ok: FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG Mat labels=, ARG DistanceTypes distanceType=, ARG DistanceTransformMasks maskSize=, ARG DistanceTransformLabelTypes labelType=DIST_LABEL_CCOMP]>

--- Incoming ---
[   u'cv.distanceTransform',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'distanceType', u'', []],
        [u'int', u'maskSize', u'', []],
        [u'int', u'dstType', u'CV_32F', []]],
    u'void']
ok: FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG DistanceTypes distanceType=, ARG DistanceTransformMasks maskSize=, ARG int dstType=CV_32F]>

--- Incoming ---
[   u'cv.floodFill',
    u'int',
    [],
    [   ['Mat', u'image', '', ['/IO']],
        ['Mat', u'mask', '', ['/IO']],
        [u'Point', u'seedPoint', u'', []],
        [u'Scalar', u'newVal', u'', []],
        [u'Rect*', u'rect', u'0', ['/O']],
        [u'Scalar', u'loDiff', u'Scalar()', []],
        [u'Scalar', u'upDiff', u'Scalar()', []],
        [u'int', u'flags', u'4', []]],
    u'int']
ok: FUNC <int cv..floodFill [ARG Mat image=, ARG Mat mask=, ARG Point seedPoint=, ARG Scalar newVal=, ARG Rect * rect=0, ARG Scalar loDiff=Scalar(), ARG Scalar upDiff=Scalar(), ARG int flags=4]>

--- Incoming ---
[   u'cv.cvtColor',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'code', u'', []],
        [u'int', u'dstCn', u'0', []]],
    u'void']
ok: FUNC <void cv..cvtColor [ARG Mat src=, ARG Mat dst=, ARG ColorConversionCodes code=, ARG int dstCn=0]>

--- Incoming ---
[   u'cv.cvtColorTwoPlane',
    u'void',
    [],
    [   ['Mat', u'src1', '', []],
        ['Mat', u'src2', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'code', u'', []]],
    u'void']
ok: FUNC <void cv..cvtColorTwoPlane [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int code=]>

--- Incoming ---
[   u'cv.demosaicing',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'code', u'', []],
        [u'int', u'dstCn', u'0', []]],
    u'void']
ok: FUNC <void cv..demosaicing [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>

--- Incoming ---
[   u'cv.moments',
    u'Moments',
    [],
    [['Mat', u'array', '', []], [u'bool', u'binaryImage', u'false', []]],
    u'Moments']
ok: FUNC <Moments cv..moments [ARG Mat array=, ARG bool binaryImage=false]>

--- Incoming ---
[   u'cv.HuMoments',
    u'void',
    [],
    [[u'Moments', u'm', u'', ['/C', '/Ref']], ['Mat', u'hu', '', ['/O']]],
    u'void']
ok: FUNC <void cv..HuMoments [ARG Moments m=, ARG Mat hu=]>

--- Incoming ---
[   u'enum cv.TemplateMatchModes',
    '',
    [],
    [   [u'const cv.TM_SQDIFF', u'0', [], [], None, ''],
        [u'const cv.TM_SQDIFF_NORMED', u'1', [], [], None, ''],
        [u'const cv.TM_CCORR', u'2', [], [], None, ''],
        [u'const cv.TM_CCORR_NORMED', u'3', [], [], None, ''],
        [u'const cv.TM_CCOEFF', u'4', [], [], None, ''],
        [u'const cv.TM_CCOEFF_NORMED', u'5', [], [], None, '']],
    None]
ok: CONST TM_SQDIFF=0
ok: CONST TM_SQDIFF_NORMED=1
ok: CONST TM_CCORR=2
ok: CONST TM_CCORR_NORMED=3
ok: CONST TM_CCOEFF=4
ok: CONST TM_CCOEFF_NORMED=5

--- Incoming ---
[   u'cv.matchTemplate',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'templ', '', []],
        ['Mat', u'result', '', ['/O']],
        [u'int', u'method', u'', []],
        ['Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv..matchTemplate [ARG Mat image=, ARG Mat templ=, ARG Mat result=, ARG TemplateMatchModes method=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.connectedComponents',
    u'int',
    [u'=connectedComponentsWithAlgorithm'],
    [   ['Mat', u'image', '', []],
        ['Mat', u'labels', '', ['/O']],
        [u'int', u'connectivity', u'', []],
        [u'int', u'ltype', u'', []],
        [u'int', u'ccltype', u'', []]],
    u'int']
ok: FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>

--- Incoming ---
[   u'cv.connectedComponents',
    u'int',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'labels', '', ['/O']],
        [u'int', u'connectivity', u'8', []],
        [u'int', u'ltype', u'CV_32S', []]],
    u'int']
ok: FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=8, ARG int ltype=CV_32S]>

--- Incoming ---
[   u'cv.connectedComponentsWithStats',
    u'int',
    [u'=connectedComponentsWithStatsWithAlgorithm'],
    [   ['Mat', u'image', '', []],
        ['Mat', u'labels', '', ['/O']],
        ['Mat', u'stats', '', ['/O']],
        ['Mat', u'centroids', '', ['/O']],
        [u'int', u'connectivity', u'', []],
        [u'int', u'ltype', u'', []],
        [u'int', u'ccltype', u'', []]],
    u'int']
ok: FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=, ARG int ltype=, ARG ConnectedComponentsAlgorithmsTypes ccltype=]>

--- Incoming ---
[   u'cv.connectedComponentsWithStats',
    u'int',
    [],
    [   ['Mat', u'image', '', []],
        ['Mat', u'labels', '', ['/O']],
        ['Mat', u'stats', '', ['/O']],
        ['Mat', u'centroids', '', ['/O']],
        [u'int', u'connectivity', u'8', []],
        [u'int', u'ltype', u'CV_32S', []]],
    u'int']
ok: FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=8, ARG int ltype=CV_32S]>

--- Incoming ---
[   u'cv.findContours',
    u'void',
    [],
    [   ['Mat', u'image', '', []],
        ['vector_Mat', u'contours', '', ['/O']],
        ['Mat', u'hierarchy', '', ['/O']],
        [u'int', u'mode', u'', []],
        [u'int', u'method', u'', []],
        [u'Point', u'offset', u'Point()', []]],
    u'void']
ok: FUNC <void cv..findContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG Mat hierarchy=, ARG RetrievalModes mode=, ARG ContourApproximationModes method=, ARG Point offset=Point()]>

--- Incoming ---
[   u'cv.approxPolyDP',
    u'void',
    [],
    [   ['Mat', u'curve', '', []],
        ['Mat', u'approxCurve', '', ['/O']],
        [u'double', u'epsilon', u'', []],
        [u'bool', u'closed', u'', []]],
    u'void']
ok: FUNC <void cv..approxPolyDP [ARG vector_Point2f curve=, ARG vector_Point2f approxCurve=, ARG double epsilon=, ARG bool closed=]>

--- Incoming ---
[   u'cv.arcLength',
    u'double',
    [],
    [['Mat', u'curve', '', []], [u'bool', u'closed', u'', []]],
    u'double']
ok: FUNC <double cv..arcLength [ARG vector_Point2f curve=, ARG bool closed=]>

--- Incoming ---
[u'cv.boundingRect', u'Rect', [], [['Mat', u'array', '', []]], u'Rect']
ok: FUNC <Rect cv..boundingRect [ARG Mat array=]>

--- Incoming ---
[   u'cv.contourArea',
    u'double',
    [],
    [['Mat', u'contour', '', []], [u'bool', u'oriented', u'false', []]],
    u'double']
ok: FUNC <double cv..contourArea [ARG Mat contour=, ARG bool oriented=false]>

--- Incoming ---
[   u'cv.minAreaRect',
    u'RotatedRect',
    [],
    [['Mat', u'points', '', []]],
    u'RotatedRect']
ok: FUNC <RotatedRect cv..minAreaRect [ARG vector_Point2f points=]>

--- Incoming ---
[   u'cv.boxPoints',
    u'void',
    [],
    [[u'RotatedRect', u'box', u'', []], ['Mat', u'points', '', ['/O']]],
    u'void']
ok: FUNC <void cv..boxPoints [ARG RotatedRect box=, ARG Mat points=]>

--- Incoming ---
[   u'cv.minEnclosingCircle',
    u'void',
    [],
    [   ['Mat', u'points', '', []],
        [u'Point2f', u'center', u'', ['/O', '/Ref']],
        [u'float', u'radius', u'', ['/O', '/Ref']]],
    u'void']
ok: FUNC <void cv..minEnclosingCircle [ARG vector_Point2f points=, ARG Point2f center=, ARG float radius=]>

--- Incoming ---
[   u'cv.minEnclosingTriangle',
    u'double',
    [],
    [['Mat', u'points', '', []], ['Mat', u'triangle', '', ['/O', '/O']]],
    u'double']
ok: FUNC <double cv..minEnclosingTriangle [ARG Mat points=, ARG Mat triangle=]>

--- Incoming ---
[   u'cv.matchShapes',
    u'double',
    [],
    [   ['Mat', u'contour1', '', []],
        ['Mat', u'contour2', '', []],
        [u'int', u'method', u'', []],
        [u'double', u'parameter', u'', []]],
    u'double']
ok: FUNC <double cv..matchShapes [ARG Mat contour1=, ARG Mat contour2=, ARG ShapeMatchModes method=, ARG double parameter=]>

--- Incoming ---
[   u'cv.convexHull',
    u'void',
    [],
    [   ['Mat', u'points', '', []],
        ['Mat', u'hull', '', ['/O']],
        [u'bool', u'clockwise', u'false', []],
        [u'bool', u'returnPoints', u'true', []]],
    u'void']
ok: FUNC <void cv..convexHull [ARG vector_Point points=, ARG vector_int hull=, ARG bool clockwise=false, ARG  returnPoints=true]>

--- Incoming ---
[   u'cv.convexityDefects',
    u'void',
    [],
    [   ['Mat', u'contour', '', []],
        ['Mat', u'convexhull', '', []],
        ['Mat', u'convexityDefects', '', ['/O']]],
    u'void']
ok: FUNC <void cv..convexityDefects [ARG vector_Point contour=, ARG vector_int convexhull=, ARG vector_Vec4i convexityDefects=]>

--- Incoming ---
[u'cv.isContourConvex', u'bool', [], [['Mat', u'contour', '', []]], u'bool']
ok: FUNC <bool cv..isContourConvex [ARG vector_Point contour=]>

--- Incoming ---
[   u'cv.intersectConvexConvex',
    u'float',
    [],
    [   ['Mat', u'_p1', '', []],
        ['Mat', u'_p2', '', []],
        ['Mat', u'_p12', '', ['/O']],
        [u'bool', u'handleNested', u'true', []]],
    u'float']
ok: FUNC <float cv..intersectConvexConvex [ARG Mat _p1=, ARG Mat _p2=, ARG Mat _p12=, ARG bool handleNested=true]>

--- Incoming ---
[   u'cv.fitEllipse',
    u'RotatedRect',
    [],
    [['Mat', u'points', '', []]],
    u'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipse [ARG vector_Point2f points=]>

--- Incoming ---
[   u'cv.fitEllipseAMS',
    u'RotatedRect',
    [],
    [['Mat', u'points', '', []]],
    u'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipseAMS [ARG Mat points=]>

--- Incoming ---
[   u'cv.fitEllipseDirect',
    u'RotatedRect',
    [],
    [['Mat', u'points', '', []]],
    u'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipseDirect [ARG Mat points=]>

--- Incoming ---
[   u'cv.fitLine',
    u'void',
    [],
    [   ['Mat', u'points', '', []],
        ['Mat', u'line', '', ['/O']],
        [u'int', u'distType', u'', []],
        [u'double', u'param', u'', []],
        [u'double', u'reps', u'', []],
        [u'double', u'aeps', u'', []]],
    u'void']
ok: FUNC <void cv..fitLine [ARG Mat points=, ARG Mat line=, ARG DistanceTypes distType=, ARG double param=, ARG double reps=, ARG double aeps=]>

--- Incoming ---
[   u'cv.pointPolygonTest',
    u'double',
    [],
    [   ['Mat', u'contour', '', []],
        [u'Point2f', u'pt', u'', []],
        [u'bool', u'measureDist', u'', []]],
    u'double']
ok: FUNC <double cv..pointPolygonTest [ARG vector_Point2f contour=, ARG Point2f pt=, ARG bool measureDist=]>

--- Incoming ---
[   u'cv.rotatedRectangleIntersection',
    u'int',
    [],
    [   [u'RotatedRect', u'rect1', u'', ['/C', '/Ref']],
        [u'RotatedRect', u'rect2', u'', ['/C', '/Ref']],
        ['Mat', u'intersectingRegion', '', ['/O']]],
    u'int']
ok: FUNC <int cv..rotatedRectangleIntersection [ARG RotatedRect rect1=, ARG RotatedRect rect2=, ARG Mat intersectingRegion=]>

--- Incoming ---
[   u'cv.createGeneralizedHoughBallard',
    u'Ptr_GeneralizedHoughBallard',
    [],
    [],
    u'Ptr<GeneralizedHoughBallard>']
ok: FUNC <Ptr_GeneralizedHoughBallard cv..createGeneralizedHoughBallard []>

--- Incoming ---
[   u'cv.createGeneralizedHoughGuil',
    u'Ptr_GeneralizedHoughGuil',
    [],
    [],
    u'Ptr<GeneralizedHoughGuil>']
ok: FUNC <Ptr_GeneralizedHoughGuil cv..createGeneralizedHoughGuil []>

--- Incoming ---
[   u'enum cv.ColormapTypes',
    '',
    [],
    [   [u'const cv.COLORMAP_AUTUMN', u'0', [], [], None, ''],
        [u'const cv.COLORMAP_BONE', u'1', [], [], None, ''],
        [u'const cv.COLORMAP_JET', u'2', [], [], None, ''],
        [u'const cv.COLORMAP_WINTER', u'3', [], [], None, ''],
        [u'const cv.COLORMAP_RAINBOW', u'4', [], [], None, ''],
        [u'const cv.COLORMAP_OCEAN', u'5', [], [], None, ''],
        [u'const cv.COLORMAP_SUMMER', u'6', [], [], None, ''],
        [u'const cv.COLORMAP_SPRING', u'7', [], [], None, ''],
        [u'const cv.COLORMAP_COOL', u'8', [], [], None, ''],
        [u'const cv.COLORMAP_HSV', u'9', [], [], None, ''],
        [u'const cv.COLORMAP_PINK', u'10', [], [], None, ''],
        [u'const cv.COLORMAP_HOT', u'11', [], [], None, ''],
        [u'const cv.COLORMAP_PARULA', u'12', [], [], None, ''],
        [u'const cv.COLORMAP_MAGMA', u'13', [], [], None, ''],
        [u'const cv.COLORMAP_INFERNO', u'14', [], [], None, ''],
        [u'const cv.COLORMAP_PLASMA', u'15', [], [], None, ''],
        [u'const cv.COLORMAP_VIRIDIS', u'16', [], [], None, ''],
        [u'const cv.COLORMAP_CIVIDIS', u'17', [], [], None, ''],
        [u'const cv.COLORMAP_TWILIGHT', u'18', [], [], None, ''],
        [u'const cv.COLORMAP_TWILIGHT_SHIFTED', u'19', [], [], None, ''],
        [u'const cv.COLORMAP_TURBO', u'20', [], [], None, ''],
        [u'const cv.COLORMAP_DEEPGREEN', u'21', [], [], None, '']],
    None]
ok: CONST COLORMAP_AUTUMN=0
ok: CONST COLORMAP_BONE=1
ok: CONST COLORMAP_JET=2
ok: CONST COLORMAP_WINTER=3
ok: CONST COLORMAP_RAINBOW=4
ok: CONST COLORMAP_OCEAN=5
ok: CONST COLORMAP_SUMMER=6
ok: CONST COLORMAP_SPRING=7
ok: CONST COLORMAP_COOL=8
ok: CONST COLORMAP_HSV=9
ok: CONST COLORMAP_PINK=10
ok: CONST COLORMAP_HOT=11
ok: CONST COLORMAP_PARULA=12
ok: CONST COLORMAP_MAGMA=13
ok: CONST COLORMAP_INFERNO=14
ok: CONST COLORMAP_PLASMA=15
ok: CONST COLORMAP_VIRIDIS=16
ok: CONST COLORMAP_CIVIDIS=17
ok: CONST COLORMAP_TWILIGHT=18
ok: CONST COLORMAP_TWILIGHT_SHIFTED=19
ok: CONST COLORMAP_TURBO=20
ok: CONST COLORMAP_DEEPGREEN=21

--- Incoming ---
[   u'cv.applyColorMap',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        [u'int', u'colormap', u'', []]],
    u'void']
ok: FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG ColormapTypes colormap=]>

--- Incoming ---
[   u'cv.applyColorMap',
    u'void',
    [],
    [   ['Mat', u'src', '', []],
        ['Mat', u'dst', '', ['/O']],
        ['Mat', u'userColor', '', []]],
    u'void']
ok: FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG Mat userColor=]>

--- Incoming ---
[   u'cv.line',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'Point', u'pt1', u'', []],
        [u'Point', u'pt2', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []]],
    u'void']
ok: FUNC <void cv..line [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   u'cv.arrowedLine',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'Point', u'pt1', u'', []],
        [u'Point', u'pt2', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'line_type', u'8', []],
        [u'int', u'shift', u'0', []],
        [u'double', u'tipLength', u'0.1', []]],
    u'void']
ok: FUNC <void cv..arrowedLine [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes line_type=8, ARG int shift=0, ARG double tipLength=0.1]>

--- Incoming ---
[   u'cv.rectangle',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'Point', u'pt1', u'', []],
        [u'Point', u'pt2', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []]],
    u'void']
ok: FUNC <void cv..rectangle [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   u'cv.rectangle',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'Rect', u'rec', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []]],
    u'void']
ok: FUNC <void cv..rectangle [ARG Mat img=, ARG Rect rec=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   u'cv.circle',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'Point', u'center', u'', []],
        [u'int', u'radius', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []]],
    u'void']
ok: FUNC <void cv..circle [ARG Mat img=, ARG Point center=, ARG int radius=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   u'cv.ellipse',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'Point', u'center', u'', []],
        [u'Size', u'axes', u'', []],
        [u'double', u'angle', u'', []],
        [u'double', u'startAngle', u'', []],
        [u'double', u'endAngle', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []]],
    u'void']
ok: FUNC <void cv..ellipse [ARG Mat img=, ARG Point center=, ARG Size axes=, ARG double angle=, ARG double startAngle=, ARG double endAngle=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   u'cv.ellipse',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'RotatedRect', u'box', u'', ['/C', '/Ref']],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []]],
    u'void']
ok: FUNC <void cv..ellipse [ARG Mat img=, ARG RotatedRect box=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8]>

--- Incoming ---
[   u'cv.drawMarker',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'Point', u'position', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'markerType', u'MARKER_CROSS', []],
        [u'int', u'markerSize', u'20', []],
        [u'int', u'thickness', u'1', []],
        [u'int', u'line_type', u'8', []]],
    u'void']
ok: FUNC <void cv..drawMarker [ARG Mat img=, ARG Point position=, ARG Scalar color=, ARG MarkerTypes markerType=MARKER_CROSS, ARG int markerSize=20, ARG int thickness=1, ARG LineTypes line_type=8]>

--- Incoming ---
[   u'cv.fillConvexPoly',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        ['Mat', u'points', '', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []]],
    u'void']
ok: FUNC <void cv..fillConvexPoly [ARG Mat img=, ARG vector_Point points=, ARG Scalar color=, ARG LineTypes lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   u'cv.fillPoly',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        ['vector_Mat', u'pts', '', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []],
        [u'Point', u'offset', u'Point()', []]],
    u'void']
ok: FUNC <void cv..fillPoly [ARG Mat img=, ARG vector_vector_Point pts=, ARG Scalar color=, ARG LineTypes lineType=LINE_8, ARG int shift=0, ARG Point offset=Point()]>

--- Incoming ---
[   u'cv.polylines',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        ['vector_Mat', u'pts', '', []],
        [u'bool', u'isClosed', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        [u'int', u'shift', u'0', []]],
    u'void']
ok: FUNC <void cv..polylines [ARG Mat img=, ARG vector_vector_Point pts=, ARG bool isClosed=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   u'cv.drawContours',
    u'void',
    [],
    [   ['Mat', u'image', '', ['/IO']],
        ['vector_Mat', u'contours', '', []],
        [u'int', u'contourIdx', u'', []],
        [u'Scalar', u'color', u'', ['/C', '/Ref']],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        ['Mat', u'hierarchy', u'Mat()', []],
        [u'int', u'maxLevel', u'INT_MAX', []],
        [u'Point', u'offset', u'Point()', []]],
    u'void']
ok: FUNC <void cv..drawContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG int contourIdx=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG Mat hierarchy=Mat(), ARG int maxLevel=INT_MAX, ARG Point offset=Point()]>

--- Incoming ---
[   u'cv.clipLine',
    u'bool',
    [],
    [   [u'Rect', u'imgRect', u'', []],
        [u'Point', u'pt1', u'', ['/O', '/IO', '/Ref']],
        [u'Point', u'pt2', u'', ['/O', '/IO', '/Ref']]],
    u'bool']
ok: FUNC <bool cv..clipLine [ARG Rect imgRect=, ARG Point pt1=, ARG Point pt2=]>

--- Incoming ---
[   u'cv.ellipse2Poly',
    u'void',
    [],
    [   [u'Point', u'center', u'', []],
        [u'Size', u'axes', u'', []],
        [u'int', u'angle', u'', []],
        [u'int', u'arcStart', u'', []],
        [u'int', u'arcEnd', u'', []],
        [u'int', u'delta', u'', []],
        [u'vector_Point', u'pts', u'', ['/O', '/Ref']]],
    u'void']
ok: FUNC <void cv..ellipse2Poly [ARG Point center=, ARG Size axes=, ARG int angle=, ARG int arcStart=, ARG int arcEnd=, ARG int delta=, ARG vector_Point pts=]>

--- Incoming ---
[   u'cv.putText',
    u'void',
    [],
    [   ['Mat', u'img', '', ['/IO']],
        [u'String', u'text', u'', ['/C', '/Ref']],
        [u'Point', u'org', u'', []],
        [u'int', u'fontFace', u'', []],
        [u'double', u'fontScale', u'', []],
        [u'Scalar', u'color', u'', []],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'LINE_8', []],
        [u'bool', u'bottomLeftOrigin', u'false', []]],
    u'void']
ok: FUNC <void cv..putText [ARG Mat img=, ARG String text=, ARG Point org=, ARG HersheyFonts fontFace=, ARG double fontScale=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG bool bottomLeftOrigin=false]>

--- Incoming ---
[   u'cv.getTextSize',
    u'Size',
    [],
    [   [u'String', u'text', u'', ['/C', '/Ref']],
        [u'int', u'fontFace', u'', []],
        [u'double', u'fontScale', u'', []],
        [u'int', u'thickness', u'', []],
        [u'int*', u'baseLine', u'', ['/O']]],
    u'Size']
ok: FUNC <Size cv..getTextSize [ARG String text=, ARG HersheyFonts fontFace=, ARG double fontScale=, ARG int thickness=, ARG int * baseLine=]>

--- Incoming ---
[   u'cv.getFontScaleFromHeight',
    u'double',
    [],
    [   [u'int', u'fontFace', u'', ['/C']],
        [u'int', u'pixelHeight', u'', ['/C']],
        [u'int', u'thickness', u'1', ['/C']]],
    u'double']
ok: FUNC <double cv..getFontScaleFromHeight [ARG int fontFace=, ARG int pixelHeight=, ARG int thickness=1]>


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/imgproc.hpp =====
Namespaces: set(['', u'cv'])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/imgproc.hpp


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/hal/hal.hpp =====
Namespaces: set(['', u'cv.hal', u'cv'])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/hal/hal.hpp


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp =====
Namespaces: set(['', u'cv.detail', u'cv.hal', u'cv'])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp


===== Generating... =====
CLASS ::.Imgproc : NSObject
[CONST FONT_HERSHEY_SIMPLEX=0, CONST FONT_HERSHEY_PLAIN=1, CONST FONT_HERSHEY_DUPLEX=2, CONST FONT_HERSHEY_COMPLEX=3, CONST FONT_HERSHEY_TRIPLEX=4, CONST FONT_HERSHEY_COMPLEX_SMALL=5, CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6, CONST FONT_HERSHEY_SCRIPT_COMPLEX=7, CONST FONT_ITALIC=16]
[CONST INTER_BITS=5, CONST INTER_BITS2=INTER_BITS * 2, CONST INTER_TAB_SIZE=1 << INTER_BITS, CONST INTER_TAB_SIZE2=INTER_TAB_SIZE * INTER_TAB_SIZE]
[CONST MORPH_ERODE=0, CONST MORPH_DILATE=1, CONST MORPH_OPEN=2, CONST MORPH_CLOSE=3, CONST MORPH_GRADIENT=4, CONST MORPH_TOPHAT=5, CONST MORPH_BLACKHAT=6, CONST MORPH_HITMISS=7]
[CONST FLOODFILL_FIXED_RANGE=1 << 16, CONST FLOODFILL_MASK_ONLY=1 << 17]
[CONST HOUGH_STANDARD=0, CONST HOUGH_PROBABILISTIC=1, CONST HOUGH_MULTI_SCALE=2, CONST HOUGH_GRADIENT=3, CONST HOUGH_GRADIENT_ALT=4]
[CONST CCL_WU=0, CONST CCL_DEFAULT=-1, CONST CCL_GRANA=1]
[CONST RETR_EXTERNAL=0, CONST RETR_LIST=1, CONST RETR_CCOMP=2, CONST RETR_TREE=3, CONST RETR_FLOODFILL=4]
[CONST GC_BGD=0, CONST GC_FGD=1, CONST GC_PR_BGD=2, CONST GC_PR_FGD=3]
[CONST COLORMAP_AUTUMN=0, CONST COLORMAP_BONE=1, CONST COLORMAP_JET=2, CONST COLORMAP_WINTER=3, CONST COLORMAP_RAINBOW=4, CONST COLORMAP_OCEAN=5, CONST COLORMAP_SUMMER=6, CONST COLORMAP_SPRING=7, CONST COLORMAP_COOL=8, CONST COLORMAP_HSV=9, CONST COLORMAP_PINK=10, CONST COLORMAP_HOT=11, CONST COLORMAP_PARULA=12, CONST COLORMAP_MAGMA=13, CONST COLORMAP_INFERNO=14, CONST COLORMAP_PLASMA=15, CONST COLORMAP_VIRIDIS=16, CONST COLORMAP_CIVIDIS=17, CONST COLORMAP_TWILIGHT=18, CONST COLORMAP_TWILIGHT_SHIFTED=19, CONST COLORMAP_TURBO=20, CONST COLORMAP_DEEPGREEN=21]
[CONST HISTCMP_CORREL=0, CONST HISTCMP_CHISQR=1, CONST HISTCMP_INTERSECT=2, CONST HISTCMP_BHATTACHARYYA=3, CONST HISTCMP_HELLINGER=HISTCMP_BHATTACHARYYA, CONST HISTCMP_CHISQR_ALT=4, CONST HISTCMP_KL_DIV=5]
[CONST FILLED=-1, CONST LINE_4=4, CONST LINE_8=8, CONST LINE_AA=16]
[CONST INTER_NEAREST=0, CONST INTER_LINEAR=1, CONST INTER_CUBIC=2, CONST INTER_AREA=3, CONST INTER_LANCZOS4=4, CONST INTER_LINEAR_EXACT=5, CONST INTER_NEAREST_EXACT=6, CONST INTER_MAX=7, CONST WARP_FILL_OUTLIERS=8, CONST WARP_INVERSE_MAP=16]
[CONST CV_GAUSSIAN_5x5=7, CONST CV_SCHARR=-1, CONST CV_MAX_SOBEL_KSIZE=7, CONST CV_RGBA2mRGBA=125, CONST CV_mRGBA2RGBA=126, CONST CV_WARP_FILL_OUTLIERS=8, CONST CV_WARP_INVERSE_MAP=16, CONST CV_CHAIN_CODE=0, CONST CV_LINK_RUNS=5, CONST CV_POLY_APPROX_DP=0, CONST CV_CLOCKWISE=1, CONST CV_COUNTER_CLOCKWISE=2, CONST CV_CANNY_L2_GRADIENT=(1 << 31)]
[CONST FILTER_SCHARR=-1]
[CONST CHAIN_APPROX_NONE=1, CONST CHAIN_APPROX_SIMPLE=2, CONST CHAIN_APPROX_TC89_L1=3, CONST CHAIN_APPROX_TC89_KCOS=4]
[CONST INTERSECT_NONE=0, CONST INTERSECT_PARTIAL=1, CONST INTERSECT_FULL=2]
[CONST COLOR_BGR2BGRA=0, CONST COLOR_RGB2RGBA=COLOR_BGR2BGRA, CONST COLOR_BGRA2BGR=1, CONST COLOR_RGBA2RGB=COLOR_BGRA2BGR, CONST COLOR_BGR2RGBA=2, CONST COLOR_RGB2BGRA=COLOR_BGR2RGBA, CONST COLOR_RGBA2BGR=3, CONST COLOR_BGRA2RGB=COLOR_RGBA2BGR, CONST COLOR_BGR2RGB=4, CONST COLOR_RGB2BGR=COLOR_BGR2RGB, CONST COLOR_BGRA2RGBA=5, CONST COLOR_RGBA2BGRA=COLOR_BGRA2RGBA, CONST COLOR_BGR2GRAY=6, CONST COLOR_RGB2GRAY=7, CONST COLOR_GRAY2BGR=8, CONST COLOR_GRAY2RGB=COLOR_GRAY2BGR, CONST COLOR_GRAY2BGRA=9, CONST COLOR_GRAY2RGBA=COLOR_GRAY2BGRA, CONST COLOR_BGRA2GRAY=10, CONST COLOR_RGBA2GRAY=11, CONST COLOR_BGR2BGR565=12, CONST COLOR_RGB2BGR565=13, CONST COLOR_BGR5652BGR=14, CONST COLOR_BGR5652RGB=15, CONST COLOR_BGRA2BGR565=16, CONST COLOR_RGBA2BGR565=17, CONST COLOR_BGR5652BGRA=18, CONST COLOR_BGR5652RGBA=19, CONST COLOR_GRAY2BGR565=20, CONST COLOR_BGR5652GRAY=21, CONST COLOR_BGR2BGR555=22, CONST COLOR_RGB2BGR555=23, CONST COLOR_BGR5552BGR=24, CONST COLOR_BGR5552RGB=25, CONST COLOR_BGRA2BGR555=26, CONST COLOR_RGBA2BGR555=27, CONST COLOR_BGR5552BGRA=28, CONST COLOR_BGR5552RGBA=29, CONST COLOR_GRAY2BGR555=30, CONST COLOR_BGR5552GRAY=31, CONST COLOR_BGR2XYZ=32, CONST COLOR_RGB2XYZ=33, CONST COLOR_XYZ2BGR=34, CONST COLOR_XYZ2RGB=35, CONST COLOR_BGR2YCrCb=36, CONST COLOR_RGB2YCrCb=37, CONST COLOR_YCrCb2BGR=38, CONST COLOR_YCrCb2RGB=39, CONST COLOR_BGR2HSV=40, CONST COLOR_RGB2HSV=41, CONST COLOR_BGR2Lab=44, CONST COLOR_RGB2Lab=45, CONST COLOR_BGR2Luv=50, CONST COLOR_RGB2Luv=51, CONST COLOR_BGR2HLS=52, CONST COLOR_RGB2HLS=53, CONST COLOR_HSV2BGR=54, CONST COLOR_HSV2RGB=55, CONST COLOR_Lab2BGR=56, CONST COLOR_Lab2RGB=57, CONST COLOR_Luv2BGR=58, CONST COLOR_Luv2RGB=59, CONST COLOR_HLS2BGR=60, CONST COLOR_HLS2RGB=61, CONST COLOR_BGR2HSV_FULL=66, CONST COLOR_RGB2HSV_FULL=67, CONST COLOR_BGR2HLS_FULL=68, CONST COLOR_RGB2HLS_FULL=69, CONST COLOR_HSV2BGR_FULL=70, CONST COLOR_HSV2RGB_FULL=71, CONST COLOR_HLS2BGR_FULL=72, CONST COLOR_HLS2RGB_FULL=73, CONST COLOR_LBGR2Lab=74, CONST COLOR_LRGB2Lab=75, CONST COLOR_LBGR2Luv=76, CONST COLOR_LRGB2Luv=77, CONST COLOR_Lab2LBGR=78, CONST COLOR_Lab2LRGB=79, CONST COLOR_Luv2LBGR=80, CONST COLOR_Luv2LRGB=81, CONST COLOR_BGR2YUV=82, CONST COLOR_RGB2YUV=83, CONST COLOR_YUV2BGR=84, CONST COLOR_YUV2RGB=85, CONST COLOR_YUV2RGB_NV12=90, CONST COLOR_YUV2BGR_NV12=91, CONST COLOR_YUV2RGB_NV21=92, CONST COLOR_YUV2BGR_NV21=93, CONST COLOR_YUV420sp2RGB=COLOR_YUV2RGB_NV21, CONST COLOR_YUV420sp2BGR=COLOR_YUV2BGR_NV21, CONST COLOR_YUV2RGBA_NV12=94, CONST COLOR_YUV2BGRA_NV12=95, CONST COLOR_YUV2RGBA_NV21=96, CONST COLOR_YUV2BGRA_NV21=97, CONST COLOR_YUV420sp2RGBA=COLOR_YUV2RGBA_NV21, CONST COLOR_YUV420sp2BGRA=COLOR_YUV2BGRA_NV21, CONST COLOR_YUV2RGB_YV12=98, CONST COLOR_YUV2BGR_YV12=99, CONST COLOR_YUV2RGB_IYUV=100, CONST COLOR_YUV2BGR_IYUV=101, CONST COLOR_YUV2RGB_I420=COLOR_YUV2RGB_IYUV, CONST COLOR_YUV2BGR_I420=COLOR_YUV2BGR_IYUV, CONST COLOR_YUV420p2RGB=COLOR_YUV2RGB_YV12, CONST COLOR_YUV420p2BGR=COLOR_YUV2BGR_YV12, CONST COLOR_YUV2RGBA_YV12=102, CONST COLOR_YUV2BGRA_YV12=103, CONST COLOR_YUV2RGBA_IYUV=104, CONST COLOR_YUV2BGRA_IYUV=105, CONST COLOR_YUV2RGBA_I420=COLOR_YUV2RGBA_IYUV, CONST COLOR_YUV2BGRA_I420=COLOR_YUV2BGRA_IYUV, CONST COLOR_YUV420p2RGBA=COLOR_YUV2RGBA_YV12, CONST COLOR_YUV420p2BGRA=COLOR_YUV2BGRA_YV12, CONST COLOR_YUV2GRAY_420=106, CONST COLOR_YUV2GRAY_NV21=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_NV12=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_YV12=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_IYUV=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_I420=COLOR_YUV2GRAY_420, CONST COLOR_YUV420sp2GRAY=COLOR_YUV2GRAY_420, CONST COLOR_YUV420p2GRAY=COLOR_YUV2GRAY_420, CONST COLOR_YUV2RGB_UYVY=107, CONST COLOR_YUV2BGR_UYVY=108, CONST COLOR_YUV2RGB_Y422=COLOR_YUV2RGB_UYVY, CONST COLOR_YUV2BGR_Y422=COLOR_YUV2BGR_UYVY, CONST COLOR_YUV2RGB_UYNV=COLOR_YUV2RGB_UYVY, CONST COLOR_YUV2BGR_UYNV=COLOR_YUV2BGR_UYVY, CONST COLOR_YUV2RGBA_UYVY=111, CONST COLOR_YUV2BGRA_UYVY=112, CONST COLOR_YUV2RGBA_Y422=COLOR_YUV2RGBA_UYVY, CONST COLOR_YUV2BGRA_Y422=COLOR_YUV2BGRA_UYVY, CONST COLOR_YUV2RGBA_UYNV=COLOR_YUV2RGBA_UYVY, CONST COLOR_YUV2BGRA_UYNV=COLOR_YUV2BGRA_UYVY, CONST COLOR_YUV2RGB_YUY2=115, CONST COLOR_YUV2BGR_YUY2=116, CONST COLOR_YUV2RGB_YVYU=117, CONST COLOR_YUV2BGR_YVYU=118, CONST COLOR_YUV2RGB_YUYV=COLOR_YUV2RGB_YUY2, CONST COLOR_YUV2BGR_YUYV=COLOR_YUV2BGR_YUY2, CONST COLOR_YUV2RGB_YUNV=COLOR_YUV2RGB_YUY2, CONST COLOR_YUV2BGR_YUNV=COLOR_YUV2BGR_YUY2, CONST COLOR_YUV2RGBA_YUY2=119, CONST COLOR_YUV2BGRA_YUY2=120, CONST COLOR_YUV2RGBA_YVYU=121, CONST COLOR_YUV2BGRA_YVYU=122, CONST COLOR_YUV2RGBA_YUYV=COLOR_YUV2RGBA_YUY2, CONST COLOR_YUV2BGRA_YUYV=COLOR_YUV2BGRA_YUY2, CONST COLOR_YUV2RGBA_YUNV=COLOR_YUV2RGBA_YUY2, CONST COLOR_YUV2BGRA_YUNV=COLOR_YUV2BGRA_YUY2, CONST COLOR_YUV2GRAY_UYVY=123, CONST COLOR_YUV2GRAY_YUY2=124, CONST COLOR_YUV2GRAY_Y422=COLOR_YUV2GRAY_UYVY, CONST COLOR_YUV2GRAY_UYNV=COLOR_YUV2GRAY_UYVY, CONST COLOR_YUV2GRAY_YVYU=COLOR_YUV2GRAY_YUY2, CONST COLOR_YUV2GRAY_YUYV=COLOR_YUV2GRAY_YUY2, CONST COLOR_YUV2GRAY_YUNV=COLOR_YUV2GRAY_YUY2, CONST COLOR_RGBA2mRGBA=125, CONST COLOR_mRGBA2RGBA=126, CONST COLOR_RGB2YUV_I420=127, CONST COLOR_BGR2YUV_I420=128, CONST COLOR_RGB2YUV_IYUV=COLOR_RGB2YUV_I420, CONST COLOR_BGR2YUV_IYUV=COLOR_BGR2YUV_I420, CONST COLOR_RGBA2YUV_I420=129, CONST COLOR_BGRA2YUV_I420=130, CONST COLOR_RGBA2YUV_IYUV=COLOR_RGBA2YUV_I420, CONST COLOR_BGRA2YUV_IYUV=COLOR_BGRA2YUV_I420, CONST COLOR_RGB2YUV_YV12=131, CONST COLOR_BGR2YUV_YV12=132, CONST COLOR_RGBA2YUV_YV12=133, CONST COLOR_BGRA2YUV_YV12=134, CONST COLOR_BayerBG2BGR=46, CONST COLOR_BayerGB2BGR=47, CONST COLOR_BayerRG2BGR=48, CONST COLOR_BayerGR2BGR=49, CONST COLOR_BayerBG2RGB=COLOR_BayerRG2BGR, CONST COLOR_BayerGB2RGB=COLOR_BayerGR2BGR, CONST COLOR_BayerRG2RGB=COLOR_BayerBG2BGR, CONST COLOR_BayerGR2RGB=COLOR_BayerGB2BGR, CONST COLOR_BayerBG2GRAY=86, CONST COLOR_BayerGB2GRAY=87, CONST COLOR_BayerRG2GRAY=88, CONST COLOR_BayerGR2GRAY=89, CONST COLOR_BayerBG2BGR_VNG=62, CONST COLOR_BayerGB2BGR_VNG=63, CONST COLOR_BayerRG2BGR_VNG=64, CONST COLOR_BayerGR2BGR_VNG=65, CONST COLOR_BayerBG2RGB_VNG=COLOR_BayerRG2BGR_VNG, CONST COLOR_BayerGB2RGB_VNG=COLOR_BayerGR2BGR_VNG, CONST COLOR_BayerRG2RGB_VNG=COLOR_BayerBG2BGR_VNG, CONST COLOR_BayerGR2RGB_VNG=COLOR_BayerGB2BGR_VNG, CONST COLOR_BayerBG2BGR_EA=135, CONST COLOR_BayerGB2BGR_EA=136, CONST COLOR_BayerRG2BGR_EA=137, CONST COLOR_BayerGR2BGR_EA=138, CONST COLOR_BayerBG2RGB_EA=COLOR_BayerRG2BGR_EA, CONST COLOR_BayerGB2RGB_EA=COLOR_BayerGR2BGR_EA, CONST COLOR_BayerRG2RGB_EA=COLOR_BayerBG2BGR_EA, CONST COLOR_BayerGR2RGB_EA=COLOR_BayerGB2BGR_EA, CONST COLOR_BayerBG2BGRA=139, CONST COLOR_BayerGB2BGRA=140, CONST COLOR_BayerRG2BGRA=141, CONST COLOR_BayerGR2BGRA=142, CONST COLOR_BayerBG2RGBA=COLOR_BayerRG2BGRA, CONST COLOR_BayerGB2RGBA=COLOR_BayerGR2BGRA, CONST COLOR_BayerRG2RGBA=COLOR_BayerBG2BGRA, CONST COLOR_BayerGR2RGBA=COLOR_BayerGB2BGRA, CONST COLOR_COLORCVT_MAX=143]
[CONST WARP_POLAR_LINEAR=0, CONST WARP_POLAR_LOG=256]
[CONST CONTOURS_MATCH_I1=1, CONST CONTOURS_MATCH_I2=2, CONST CONTOURS_MATCH_I3=3]
[CONST LSD_REFINE_NONE=0, CONST LSD_REFINE_STD=1, CONST LSD_REFINE_ADV=2]
[CONST THRESH_BINARY=0, CONST THRESH_BINARY_INV=1, CONST THRESH_TRUNC=2, CONST THRESH_TOZERO=3, CONST THRESH_TOZERO_INV=4, CONST THRESH_MASK=7, CONST THRESH_OTSU=8, CONST THRESH_TRIANGLE=16]
[CONST ADAPTIVE_THRESH_MEAN_C=0, CONST ADAPTIVE_THRESH_GAUSSIAN_C=1]
[CONST GC_INIT_WITH_RECT=0, CONST GC_INIT_WITH_MASK=1, CONST GC_EVAL=2, CONST GC_EVAL_FREEZE_MODEL=3]
[CONST MORPH_RECT=0, CONST MORPH_CROSS=1, CONST MORPH_ELLIPSE=2]
[CONST DIST_LABEL_CCOMP=0, CONST DIST_LABEL_PIXEL=1]
[CONST DIST_USER=-1, CONST DIST_L1=1, CONST DIST_L2=2, CONST DIST_C=3, CONST DIST_L12=4, CONST DIST_FAIR=5, CONST DIST_WELSCH=6, CONST DIST_HUBER=7]
[CONST TM_SQDIFF=0, CONST TM_SQDIFF_NORMED=1, CONST TM_CCORR=2, CONST TM_CCORR_NORMED=3, CONST TM_CCOEFF=4, CONST TM_CCOEFF_NORMED=5]
[CONST DIST_MASK_3=3, CONST DIST_MASK_5=5, CONST DIST_MASK_PRECISE=0]
[CONST CC_STAT_LEFT=0, CONST CC_STAT_TOP=1, CONST CC_STAT_WIDTH=2, CONST CC_STAT_HEIGHT=3, CONST CC_STAT_AREA=4, CONST CC_STAT_MAX=5]
[CONST MARKER_CROSS=0, CONST MARKER_TILTED_CROSS=1, CONST MARKER_STAR=2, CONST MARKER_DIAMOND=3, CONST MARKER_SQUARE=4, CONST MARKER_TRIANGLE_UP=5, CONST MARKER_TRIANGLE_DOWN=6]
FUNC <Mat cv..getAffineTransform [ARG vector_Point2f src=, ARG vector_Point2f dst=]>
Objective-C: (Mat*)getAffineTransform:(NSArray<Point2f*>*)src dst:(NSArray<Point2f*>*)dst
FUNC <Mat cv..getGaborKernel [ARG Size ksize=, ARG double sigma=, ARG double theta=, ARG double lambd=, ARG double gamma=, ARG double psi=CV_PI*0.5, ARG int ktype=CV_64F]>
Objective-C: (Mat*)getGaborKernel:(Size2i*)ksize sigma:(double)sigma theta:(double)theta lambd:(double)lambd gamma:(double)gamma psi:(double)psi ktype:(int)ktype
Objective-C: (Mat*)getGaborKernel:(Size2i*)ksize sigma:(double)sigma theta:(double)theta lambd:(double)lambd gamma:(double)gamma psi:(double)psi
Objective-C: (Mat*)getGaborKernel:(Size2i*)ksize sigma:(double)sigma theta:(double)theta lambd:(double)lambd gamma:(double)gamma
FUNC <Mat cv..getGaussianKernel [ARG int ksize=, ARG double sigma=, ARG int ktype=CV_64F]>
Objective-C: (Mat*)getGaussianKernel:(int)ksize sigma:(double)sigma ktype:(int)ktype
Objective-C: (Mat*)getGaussianKernel:(int)ksize sigma:(double)sigma
FUNC <Mat cv..getPerspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG int solveMethod=DECOMP_LU]>
Objective-C: (Mat*)getPerspectiveTransform:(Mat*)src dst:(Mat*)dst solveMethod:(int)solveMethod
Objective-C: (Mat*)getPerspectiveTransform:(Mat*)src dst:(Mat*)dst
FUNC <Mat cv..getRotationMatrix2D [ARG Point2f center=, ARG double angle=, ARG double scale=]>
Objective-C: (Mat*)getRotationMatrix2D:(Point2f*)center angle:(double)angle scale:(double)scale
FUNC <Mat cv..getStructuringElement [ARG MorphShapes shape=, ARG Size ksize=, ARG Point anchor=Point(-1,-1)]>
Objective-C: (Mat*)getStructuringElement:(MorphShapes)shape ksize:(Size2i*)ksize anchor:(Point2i*)anchor
Objective-C: (Mat*)getStructuringElement:(MorphShapes)shape ksize:(Size2i*)ksize
FUNC <Moments cv..moments [ARG Mat array=, ARG bool binaryImage=false]>
Objective-C: (Moments*)moments:(Mat*)array binaryImage:(BOOL)binaryImage
Objective-C: (Moments*)moments:(Mat*)array
FUNC <Point2d cv..phaseCorrelate [ARG Mat src1=, ARG Mat src2=, ARG Mat window=Mat(), ARG double * response=0]>
Objective-C: (Point2d*)phaseCorrelate:(Mat*)src1 src2:(Mat*)src2 window:(Mat*)window response:(double*)response
Objective-C: (Point2d*)phaseCorrelate:(Mat*)src1 src2:(Mat*)src2 window:(Mat*)window
Objective-C: (Point2d*)phaseCorrelate:(Mat*)src1 src2:(Mat*)src2
FUNC <Ptr_CLAHE cv..createCLAHE [ARG double clipLimit=40.0, ARG Size tileGridSize=Size(8, 8)]>
Objective-C: (CLAHE*)createCLAHE:(double)clipLimit tileGridSize:(Size2i*)tileGridSize
Objective-C: (CLAHE*)createCLAHE:(double)clipLimit
Objective-C: (CLAHE*)createCLAHE
FUNC <Ptr_GeneralizedHoughBallard cv..createGeneralizedHoughBallard []>
Objective-C: (GeneralizedHoughBallard*)createGeneralizedHoughBallard
FUNC <Ptr_GeneralizedHoughGuil cv..createGeneralizedHoughGuil []>
Objective-C: (GeneralizedHoughGuil*)createGeneralizedHoughGuil
FUNC <Ptr_LineSegmentDetector cv..createLineSegmentDetector [ARG LineSegmentDetectorModes _refine=LSD_REFINE_STD, ARG double _scale=0.8, ARG double _sigma_scale=0.6, ARG double _quant=2.0, ARG double _ang_th=22.5, ARG double _log_eps=0, ARG double _density_th=0.7, ARG int _n_bins=1024]>
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine _scale:(double)_scale _sigma_scale:(double)_sigma_scale _quant:(double)_quant _ang_th:(double)_ang_th _log_eps:(double)_log_eps _density_th:(double)_density_th _n_bins:(int)_n_bins
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine _scale:(double)_scale _sigma_scale:(double)_sigma_scale _quant:(double)_quant _ang_th:(double)_ang_th _log_eps:(double)_log_eps _density_th:(double)_density_th
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine _scale:(double)_scale _sigma_scale:(double)_sigma_scale _quant:(double)_quant _ang_th:(double)_ang_th _log_eps:(double)_log_eps
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine _scale:(double)_scale _sigma_scale:(double)_sigma_scale _quant:(double)_quant _ang_th:(double)_ang_th
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine _scale:(double)_scale _sigma_scale:(double)_sigma_scale _quant:(double)_quant
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine _scale:(double)_scale _sigma_scale:(double)_sigma_scale
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine _scale:(double)_scale
Objective-C: (LineSegmentDetector*)createLineSegmentDetector:(LineSegmentDetectorModes)_refine
Objective-C: (LineSegmentDetector*)createLineSegmentDetector
FUNC <Rect cv..boundingRect [ARG Mat array=]>
Objective-C: (Rect2i*)boundingRect:(Mat*)array
FUNC <RotatedRect cv..fitEllipse [ARG vector_Point2f points=]>
Objective-C: (RotatedRect*)fitEllipse:(NSArray<Point2f*>*)points
FUNC <RotatedRect cv..fitEllipseAMS [ARG Mat points=]>
Objective-C: (RotatedRect*)fitEllipseAMS:(Mat*)points
FUNC <RotatedRect cv..fitEllipseDirect [ARG Mat points=]>
Objective-C: (RotatedRect*)fitEllipseDirect:(Mat*)points
FUNC <RotatedRect cv..minAreaRect [ARG vector_Point2f points=]>
Objective-C: (RotatedRect*)minAreaRect:(NSArray<Point2f*>*)points
FUNC <Size cv..getTextSize [ARG String text=, ARG HersheyFonts fontFace=, ARG double fontScale=, ARG int thickness=, ARG int * baseLine=]>
Objective-C: (Size2i*)getTextSize:(NSString*)text fontFace:(HersheyFonts)fontFace fontScale:(double)fontScale thickness:(int)thickness baseLine:(int*)baseLine
FUNC <bool cv..clipLine [ARG Rect imgRect=, ARG Point pt1=, ARG Point pt2=]>
Objective-C: (BOOL)clipLine:(Rect2i*)imgRect pt1:(Point2i*)pt1 pt2:(Point2i*)pt2
FUNC <bool cv..isContourConvex [ARG vector_Point contour=]>
Objective-C: (BOOL)isContourConvex:(NSArray<Point2i*>*)contour
FUNC <double cv..arcLength [ARG vector_Point2f curve=, ARG bool closed=]>
Objective-C: (double)arcLength:(NSArray<Point2f*>*)curve closed:(BOOL)closed
FUNC <double cv..compareHist [ARG Mat H1=, ARG Mat H2=, ARG HistCompMethods method=]>
Objective-C: (double)compareHist:(Mat*)H1 H2:(Mat*)H2 method:(HistCompMethods)method
FUNC <double cv..contourArea [ARG Mat contour=, ARG bool oriented=false]>
Objective-C: (double)contourArea:(Mat*)contour oriented:(BOOL)oriented
Objective-C: (double)contourArea:(Mat*)contour
FUNC <double cv..getFontScaleFromHeight [ARG int fontFace=, ARG int pixelHeight=, ARG int thickness=1]>
Objective-C: (double)getFontScaleFromHeight:(int)fontFace pixelHeight:(int)pixelHeight thickness:(int)thickness
Objective-C: (double)getFontScaleFromHeight:(int)fontFace pixelHeight:(int)pixelHeight
FUNC <double cv..matchShapes [ARG Mat contour1=, ARG Mat contour2=, ARG ShapeMatchModes method=, ARG double parameter=]>
Objective-C: (double)matchShapes:(Mat*)contour1 contour2:(Mat*)contour2 method:(ShapeMatchModes)method parameter:(double)parameter
FUNC <double cv..minEnclosingTriangle [ARG Mat points=, ARG Mat triangle=]>
Objective-C: (double)minEnclosingTriangle:(Mat*)points triangle:(Mat*)triangle
FUNC <double cv..pointPolygonTest [ARG vector_Point2f contour=, ARG Point2f pt=, ARG bool measureDist=]>
Objective-C: (double)pointPolygonTest:(NSArray<Point2f*>*)contour pt:(Point2f*)pt measureDist:(BOOL)measureDist
FUNC <double cv..threshold [ARG Mat src=, ARG Mat dst=, ARG double thresh=, ARG double maxval=, ARG ThresholdTypes type=]>
Objective-C: (double)threshold:(Mat*)src dst:(Mat*)dst thresh:(double)thresh maxval:(double)maxval type:(ThresholdTypes)type
FUNC <float cv..intersectConvexConvex [ARG Mat _p1=, ARG Mat _p2=, ARG Mat _p12=, ARG bool handleNested=true]>
Objective-C: (float)intersectConvexConvex:(Mat*)_p1 _p2:(Mat*)_p2 _p12:(Mat*)_p12 handleNested:(BOOL)handleNested
Objective-C: (float)intersectConvexConvex:(Mat*)_p1 _p2:(Mat*)_p2 _p12:(Mat*)_p12
FUNC <float cv..wrapperEMD [ARG Mat signature1=, ARG Mat signature2=, ARG DistanceTypes distType=, ARG Mat cost=Mat(), ARG  lowerBound=cv::Ptr<float>(), ARG Mat flow=Mat()]>
Objective-C: (float)EMD:(Mat*)signature1 signature2:(Mat*)signature2 distType:(DistanceTypes)distType cost:(Mat*)cost flow:(Mat*)flow
Objective-C: (float)EMD:(Mat*)signature1 signature2:(Mat*)signature2 distType:(DistanceTypes)distType cost:(Mat*)cost
Objective-C: (float)EMD:(Mat*)signature1 signature2:(Mat*)signature2 distType:(DistanceTypes)distType cost:(Mat*)cost
Objective-C: (float)EMD:(Mat*)signature1 signature2:(Mat*)signature2 distType:(DistanceTypes)distType
FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>
Objective-C: (int)connectedComponentsWithAlgorithm:(Mat*)image labels:(Mat*)labels connectivity:(int)connectivity ltype:(int)ltype ccltype:(int)ccltype
FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=8, ARG int ltype=CV_32S]>
Objective-C: (int)connectedComponents:(Mat*)image labels:(Mat*)labels connectivity:(int)connectivity ltype:(int)ltype
Objective-C: (int)connectedComponents:(Mat*)image labels:(Mat*)labels connectivity:(int)connectivity
Objective-C: (int)connectedComponents:(Mat*)image labels:(Mat*)labels
FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=, ARG int ltype=, ARG ConnectedComponentsAlgorithmsTypes ccltype=]>
Objective-C: (int)connectedComponentsWithStatsWithAlgorithm:(Mat*)image labels:(Mat*)labels stats:(Mat*)stats centroids:(Mat*)centroids connectivity:(int)connectivity ltype:(int)ltype ccltype:(ConnectedComponentsAlgorithmsTypes)ccltype
FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=8, ARG int ltype=CV_32S]>
Objective-C: (int)connectedComponentsWithStats:(Mat*)image labels:(Mat*)labels stats:(Mat*)stats centroids:(Mat*)centroids connectivity:(int)connectivity ltype:(int)ltype
Objective-C: (int)connectedComponentsWithStats:(Mat*)image labels:(Mat*)labels stats:(Mat*)stats centroids:(Mat*)centroids connectivity:(int)connectivity
Objective-C: (int)connectedComponentsWithStats:(Mat*)image labels:(Mat*)labels stats:(Mat*)stats centroids:(Mat*)centroids
FUNC <int cv..floodFill [ARG Mat image=, ARG Mat mask=, ARG Point seedPoint=, ARG Scalar newVal=, ARG Rect * rect=0, ARG Scalar loDiff=Scalar(), ARG Scalar upDiff=Scalar(), ARG int flags=4]>
Objective-C: (int)floodFill:(Mat*)image mask:(Mat*)mask seedPoint:(Point2i*)seedPoint newVal:(Scalar*)newVal rect:(Rect2i*)rect loDiff:(Scalar*)loDiff upDiff:(Scalar*)upDiff flags:(int)flags
Objective-C: (int)floodFill:(Mat*)image mask:(Mat*)mask seedPoint:(Point2i*)seedPoint newVal:(Scalar*)newVal rect:(Rect2i*)rect loDiff:(Scalar*)loDiff upDiff:(Scalar*)upDiff
Objective-C: (int)floodFill:(Mat*)image mask:(Mat*)mask seedPoint:(Point2i*)seedPoint newVal:(Scalar*)newVal rect:(Rect2i*)rect loDiff:(Scalar*)loDiff
Objective-C: (int)floodFill:(Mat*)image mask:(Mat*)mask seedPoint:(Point2i*)seedPoint newVal:(Scalar*)newVal rect:(Rect2i*)rect
Objective-C: (int)floodFill:(Mat*)image mask:(Mat*)mask seedPoint:(Point2i*)seedPoint newVal:(Scalar*)newVal
FUNC <int cv..rotatedRectangleIntersection [ARG RotatedRect rect1=, ARG RotatedRect rect2=, ARG Mat intersectingRegion=]>
Objective-C: (int)rotatedRectangleIntersection:(RotatedRect*)rect1 rect2:(RotatedRect*)rect2 intersectingRegion:(Mat*)intersectingRegion
FUNC <void cv..Canny [ARG Mat dx=, ARG Mat dy=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG bool L2gradient=false]>
Objective-C: (void)Canny:(Mat*)dx dy:(Mat*)dy edges:(Mat*)edges threshold1:(double)threshold1 threshold2:(double)threshold2 L2gradient:(BOOL)L2gradient
Objective-C: (void)Canny:(Mat*)dx dy:(Mat*)dy edges:(Mat*)edges threshold1:(double)threshold1 threshold2:(double)threshold2
FUNC <void cv..Canny [ARG Mat image=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>
Objective-C: (void)Canny:(Mat*)image edges:(Mat*)edges threshold1:(double)threshold1 threshold2:(double)threshold2 apertureSize:(int)apertureSize L2gradient:(BOOL)L2gradient
Objective-C: (void)Canny:(Mat*)image edges:(Mat*)edges threshold1:(double)threshold1 threshold2:(double)threshold2 apertureSize:(int)apertureSize
Objective-C: (void)Canny:(Mat*)image edges:(Mat*)edges threshold1:(double)threshold1 threshold2:(double)threshold2
FUNC <void cv..GaussianBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG double sigmaX=, ARG double sigmaY=0, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)GaussianBlur:(Mat*)src dst:(Mat*)dst ksize:(Size2i*)ksize sigmaX:(double)sigmaX sigmaY:(double)sigmaY borderType:(BorderTypes)borderType
Objective-C: (void)GaussianBlur:(Mat*)src dst:(Mat*)dst ksize:(Size2i*)ksize sigmaX:(double)sigmaX sigmaY:(double)sigmaY
Objective-C: (void)GaussianBlur:(Mat*)src dst:(Mat*)dst ksize:(Size2i*)ksize sigmaX:(double)sigmaX
FUNC <void cv..HoughCircles [ARG Mat image=, ARG Mat circles=, ARG HoughModes method=, ARG double dp=, ARG double minDist=, ARG double param1=100, ARG double param2=100, ARG int minRadius=0, ARG int maxRadius=0]>
Objective-C: (void)HoughCircles:(Mat*)image circles:(Mat*)circles method:(HoughModes)method dp:(double)dp minDist:(double)minDist param1:(double)param1 param2:(double)param2 minRadius:(int)minRadius maxRadius:(int)maxRadius
Objective-C: (void)HoughCircles:(Mat*)image circles:(Mat*)circles method:(HoughModes)method dp:(double)dp minDist:(double)minDist param1:(double)param1 param2:(double)param2 minRadius:(int)minRadius
Objective-C: (void)HoughCircles:(Mat*)image circles:(Mat*)circles method:(HoughModes)method dp:(double)dp minDist:(double)minDist param1:(double)param1 param2:(double)param2
Objective-C: (void)HoughCircles:(Mat*)image circles:(Mat*)circles method:(HoughModes)method dp:(double)dp minDist:(double)minDist param1:(double)param1
Objective-C: (void)HoughCircles:(Mat*)image circles:(Mat*)circles method:(HoughModes)method dp:(double)dp minDist:(double)minDist
FUNC <void cv..HoughLines [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>
Objective-C: (void)HoughLines:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold srn:(double)srn stn:(double)stn min_theta:(double)min_theta max_theta:(double)max_theta
Objective-C: (void)HoughLines:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold srn:(double)srn stn:(double)stn min_theta:(double)min_theta
Objective-C: (void)HoughLines:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold srn:(double)srn stn:(double)stn
Objective-C: (void)HoughLines:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold srn:(double)srn
Objective-C: (void)HoughLines:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold
FUNC <void cv..HoughLinesP [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double minLineLength=0, ARG double maxLineGap=0]>
Objective-C: (void)HoughLinesP:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold minLineLength:(double)minLineLength maxLineGap:(double)maxLineGap
Objective-C: (void)HoughLinesP:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold minLineLength:(double)minLineLength
Objective-C: (void)HoughLinesP:(Mat*)image lines:(Mat*)lines rho:(double)rho theta:(double)theta threshold:(int)threshold
FUNC <void cv..HoughLinesPointSet [ARG Mat _point=, ARG Mat _lines=, ARG int lines_max=, ARG int threshold=, ARG double min_rho=, ARG double max_rho=, ARG double rho_step=, ARG double min_theta=, ARG double max_theta=, ARG double theta_step=]>
Objective-C: (void)HoughLinesPointSet:(Mat*)_point _lines:(Mat*)_lines lines_max:(int)lines_max threshold:(int)threshold min_rho:(double)min_rho max_rho:(double)max_rho rho_step:(double)rho_step min_theta:(double)min_theta max_theta:(double)max_theta theta_step:(double)theta_step
FUNC <void cv..HuMoments [ARG Moments m=, ARG Mat hu=]>
Objective-C: (void)HuMoments:(Moments*)m hu:(Mat*)hu
FUNC <void cv..Laplacian [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int ksize=1, ARG double scale=1, ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)Laplacian:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(int)ksize scale:(double)scale delta:(double)delta borderType:(BorderTypes)borderType
Objective-C: (void)Laplacian:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(int)ksize scale:(double)scale delta:(double)delta
Objective-C: (void)Laplacian:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(int)ksize scale:(double)scale
Objective-C: (void)Laplacian:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(int)ksize
Objective-C: (void)Laplacian:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth
FUNC <void cv..Scharr [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG double scale=1, ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)Scharr:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy scale:(double)scale delta:(double)delta borderType:(BorderTypes)borderType
Objective-C: (void)Scharr:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy scale:(double)scale delta:(double)delta
Objective-C: (void)Scharr:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy scale:(double)scale
Objective-C: (void)Scharr:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy
FUNC <void cv..Sobel [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG int ksize=3, ARG double scale=1, ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)Sobel:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy ksize:(int)ksize scale:(double)scale delta:(double)delta borderType:(BorderTypes)borderType
Objective-C: (void)Sobel:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy ksize:(int)ksize scale:(double)scale delta:(double)delta
Objective-C: (void)Sobel:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy ksize:(int)ksize scale:(double)scale
Objective-C: (void)Sobel:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy ksize:(int)ksize
Objective-C: (void)Sobel:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth dx:(int)dx dy:(int)dy
FUNC <void cv..accumulate [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
Objective-C: (void)accumulate:(Mat*)src dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)accumulate:(Mat*)src dst:(Mat*)dst
FUNC <void cv..accumulateProduct [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
Objective-C: (void)accumulateProduct:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)accumulateProduct:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst
FUNC <void cv..accumulateSquare [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
Objective-C: (void)accumulateSquare:(Mat*)src dst:(Mat*)dst mask:(Mat*)mask
Objective-C: (void)accumulateSquare:(Mat*)src dst:(Mat*)dst
FUNC <void cv..accumulateWeighted [ARG Mat src=, ARG Mat dst=, ARG double alpha=, ARG Mat mask=Mat()]>
Objective-C: (void)accumulateWeighted:(Mat*)src dst:(Mat*)dst alpha:(double)alpha mask:(Mat*)mask
Objective-C: (void)accumulateWeighted:(Mat*)src dst:(Mat*)dst alpha:(double)alpha
FUNC <void cv..adaptiveThreshold [ARG Mat src=, ARG Mat dst=, ARG double maxValue=, ARG AdaptiveThresholdTypes adaptiveMethod=, ARG ThresholdTypes thresholdType=, ARG int blockSize=, ARG double C=]>
Objective-C: (void)adaptiveThreshold:(Mat*)src dst:(Mat*)dst maxValue:(double)maxValue adaptiveMethod:(AdaptiveThresholdTypes)adaptiveMethod thresholdType:(ThresholdTypes)thresholdType blockSize:(int)blockSize C:(double)C
FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG ColormapTypes colormap=]>
Objective-C: (void)applyColorMap:(Mat*)src dst:(Mat*)dst colormap:(ColormapTypes)colormap
FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG Mat userColor=]>
Objective-C: (void)applyColorMap:(Mat*)src dst:(Mat*)dst userColor:(Mat*)userColor
FUNC <void cv..approxPolyDP [ARG vector_Point2f curve=, ARG vector_Point2f approxCurve=, ARG double epsilon=, ARG bool closed=]>
Objective-C: (void)approxPolyDP:(NSArray<Point2f*>*)curve approxCurve:(NSMutableArray<Point2f*>*)approxCurve epsilon:(double)epsilon closed:(BOOL)closed
FUNC <void cv..arrowedLine [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes line_type=8, ARG int shift=0, ARG double tipLength=0.1]>
Objective-C: (void)arrowedLine:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness line_type:(LineTypes)line_type shift:(int)shift tipLength:(double)tipLength
Objective-C: (void)arrowedLine:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness line_type:(LineTypes)line_type shift:(int)shift
Objective-C: (void)arrowedLine:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness line_type:(LineTypes)line_type
Objective-C: (void)arrowedLine:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)arrowedLine:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color
FUNC <void cv..bilateralFilter [ARG Mat src=, ARG Mat dst=, ARG int d=, ARG double sigmaColor=, ARG double sigmaSpace=, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)bilateralFilter:(Mat*)src dst:(Mat*)dst d:(int)d sigmaColor:(double)sigmaColor sigmaSpace:(double)sigmaSpace borderType:(BorderTypes)borderType
Objective-C: (void)bilateralFilter:(Mat*)src dst:(Mat*)dst d:(int)d sigmaColor:(double)sigmaColor sigmaSpace:(double)sigmaSpace
FUNC <void cv..blur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)blur:(Mat*)src dst:(Mat*)dst ksize:(Size2i*)ksize anchor:(Point2i*)anchor borderType:(BorderTypes)borderType
Objective-C: (void)blur:(Mat*)src dst:(Mat*)dst ksize:(Size2i*)ksize anchor:(Point2i*)anchor
Objective-C: (void)blur:(Mat*)src dst:(Mat*)dst ksize:(Size2i*)ksize
FUNC <void cv..boxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG bool normalize=true, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)boxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize anchor:(Point2i*)anchor normalize:(BOOL)normalize borderType:(BorderTypes)borderType
Objective-C: (void)boxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize anchor:(Point2i*)anchor normalize:(BOOL)normalize
Objective-C: (void)boxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize anchor:(Point2i*)anchor
Objective-C: (void)boxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize
FUNC <void cv..boxPoints [ARG RotatedRect box=, ARG Mat points=]>
Objective-C: (void)boxPoints:(RotatedRect*)box points:(Mat*)points
FUNC <void cv..calcBackProject [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat hist=, ARG Mat dst=, ARG vector_float ranges=, ARG double scale=]>
Objective-C: (void)calcBackProject:(NSArray<Mat*>*)images channels:(IntVector*)channels hist:(Mat*)hist dst:(Mat*)dst ranges:(FloatVector*)ranges scale:(double)scale
FUNC <void cv..calcHist [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat mask=, ARG Mat hist=, ARG vector_int histSize=, ARG vector_float ranges=, ARG bool accumulate=false]>
Objective-C: (void)calcHist:(NSArray<Mat*>*)images channels:(IntVector*)channels mask:(Mat*)mask hist:(Mat*)hist histSize:(IntVector*)histSize ranges:(FloatVector*)ranges accumulate:(BOOL)accumulate
Objective-C: (void)calcHist:(NSArray<Mat*>*)images channels:(IntVector*)channels mask:(Mat*)mask hist:(Mat*)hist histSize:(IntVector*)histSize ranges:(FloatVector*)ranges
FUNC <void cv..circle [ARG Mat img=, ARG Point center=, ARG int radius=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>
Objective-C: (void)circle:(Mat*)img center:(Point2i*)center radius:(int)radius color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)circle:(Mat*)img center:(Point2i*)center radius:(int)radius color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)circle:(Mat*)img center:(Point2i*)center radius:(int)radius color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)circle:(Mat*)img center:(Point2i*)center radius:(int)radius color:(Scalar*)color
FUNC <void cv..convertMaps [ARG Mat map1=, ARG Mat map2=, ARG Mat dstmap1=, ARG Mat dstmap2=, ARG int dstmap1type=, ARG bool nninterpolation=false]>
Objective-C: (void)convertMaps:(Mat*)map1 map2:(Mat*)map2 dstmap1:(Mat*)dstmap1 dstmap2:(Mat*)dstmap2 dstmap1type:(int)dstmap1type nninterpolation:(BOOL)nninterpolation
Objective-C: (void)convertMaps:(Mat*)map1 map2:(Mat*)map2 dstmap1:(Mat*)dstmap1 dstmap2:(Mat*)dstmap2 dstmap1type:(int)dstmap1type
FUNC <void cv..convexHull [ARG vector_Point points=, ARG vector_int hull=, ARG bool clockwise=false, ARG  returnPoints=true]>
Objective-C: (void)convexHull:(NSArray<Point2i*>*)points hull:(IntVector*)hull clockwise:(BOOL)clockwise
Objective-C: (void)convexHull:(NSArray<Point2i*>*)points hull:(IntVector*)hull clockwise:(BOOL)clockwise
Objective-C: (void)convexHull:(NSArray<Point2i*>*)points hull:(IntVector*)hull
FUNC <void cv..convexityDefects [ARG vector_Point contour=, ARG vector_int convexhull=, ARG vector_Vec4i convexityDefects=]>
Objective-C: (void)convexityDefects:(NSArray<Point2i*>*)contour convexhull:(IntVector*)convexhull convexityDefects:(NSMutableArray<Int4*>*)convexityDefects
FUNC <void cv..cornerEigenValsAndVecs [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)cornerEigenValsAndVecs:(Mat*)src dst:(Mat*)dst blockSize:(int)blockSize ksize:(int)ksize borderType:(BorderTypes)borderType
Objective-C: (void)cornerEigenValsAndVecs:(Mat*)src dst:(Mat*)dst blockSize:(int)blockSize ksize:(int)ksize
FUNC <void cv..cornerHarris [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG double k=, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)cornerHarris:(Mat*)src dst:(Mat*)dst blockSize:(int)blockSize ksize:(int)ksize k:(double)k borderType:(BorderTypes)borderType
Objective-C: (void)cornerHarris:(Mat*)src dst:(Mat*)dst blockSize:(int)blockSize ksize:(int)ksize k:(double)k
FUNC <void cv..cornerMinEigenVal [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=3, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)cornerMinEigenVal:(Mat*)src dst:(Mat*)dst blockSize:(int)blockSize ksize:(int)ksize borderType:(BorderTypes)borderType
Objective-C: (void)cornerMinEigenVal:(Mat*)src dst:(Mat*)dst blockSize:(int)blockSize ksize:(int)ksize
Objective-C: (void)cornerMinEigenVal:(Mat*)src dst:(Mat*)dst blockSize:(int)blockSize
FUNC <void cv..cornerSubPix [ARG Mat image=, ARG Mat corners=, ARG Size winSize=, ARG Size zeroZone=, ARG TermCriteria criteria=]>
Objective-C: (void)cornerSubPix:(Mat*)image corners:(Mat*)corners winSize:(Size2i*)winSize zeroZone:(Size2i*)zeroZone criteria:(TermCriteria*)criteria
FUNC <void cv..createHanningWindow [ARG Mat dst=, ARG Size winSize=, ARG int type=]>
Objective-C: (void)createHanningWindow:(Mat*)dst winSize:(Size2i*)winSize type:(int)type
FUNC <void cv..cvtColor [ARG Mat src=, ARG Mat dst=, ARG ColorConversionCodes code=, ARG int dstCn=0]>
Objective-C: (void)cvtColor:(Mat*)src dst:(Mat*)dst code:(ColorConversionCodes)code dstCn:(int)dstCn
Objective-C: (void)cvtColor:(Mat*)src dst:(Mat*)dst code:(ColorConversionCodes)code
FUNC <void cv..cvtColorTwoPlane [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int code=]>
Objective-C: (void)cvtColorTwoPlane:(Mat*)src1 src2:(Mat*)src2 dst:(Mat*)dst code:(int)code
FUNC <void cv..demosaicing [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>
Objective-C: (void)demosaicing:(Mat*)src dst:(Mat*)dst code:(int)code dstCn:(int)dstCn
Objective-C: (void)demosaicing:(Mat*)src dst:(Mat*)dst code:(int)code
FUNC <void cv..dilate [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG BorderTypes borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
Objective-C: (void)dilate:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations borderType:(BorderTypes)borderType borderValue:(Scalar*)borderValue
Objective-C: (void)dilate:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations borderType:(BorderTypes)borderType
Objective-C: (void)dilate:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations
Objective-C: (void)dilate:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor
Objective-C: (void)dilate:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel
FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG DistanceTypes distanceType=, ARG DistanceTransformMasks maskSize=, ARG int dstType=CV_32F]>
Objective-C: (void)distanceTransform:(Mat*)src dst:(Mat*)dst distanceType:(DistanceTypes)distanceType maskSize:(DistanceTransformMasks)maskSize dstType:(int)dstType
Objective-C: (void)distanceTransform:(Mat*)src dst:(Mat*)dst distanceType:(DistanceTypes)distanceType maskSize:(DistanceTransformMasks)maskSize
FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG Mat labels=, ARG DistanceTypes distanceType=, ARG DistanceTransformMasks maskSize=, ARG DistanceTransformLabelTypes labelType=DIST_LABEL_CCOMP]>
Objective-C: (void)distanceTransformWithLabels:(Mat*)src dst:(Mat*)dst labels:(Mat*)labels distanceType:(DistanceTypes)distanceType maskSize:(DistanceTransformMasks)maskSize labelType:(DistanceTransformLabelTypes)labelType
Objective-C: (void)distanceTransformWithLabels:(Mat*)src dst:(Mat*)dst labels:(Mat*)labels distanceType:(DistanceTypes)distanceType maskSize:(DistanceTransformMasks)maskSize
FUNC <void cv..drawContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG int contourIdx=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG Mat hierarchy=Mat(), ARG int maxLevel=INT_MAX, ARG Point offset=Point()]>
Objective-C: (void)drawContours:(Mat*)image contours:(NSArray<NSArray<Point2i*>*>*)contours contourIdx:(int)contourIdx color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType hierarchy:(Mat*)hierarchy maxLevel:(int)maxLevel offset:(Point2i*)offset
Objective-C: (void)drawContours:(Mat*)image contours:(NSArray<NSArray<Point2i*>*>*)contours contourIdx:(int)contourIdx color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType hierarchy:(Mat*)hierarchy maxLevel:(int)maxLevel
Objective-C: (void)drawContours:(Mat*)image contours:(NSArray<NSArray<Point2i*>*>*)contours contourIdx:(int)contourIdx color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType hierarchy:(Mat*)hierarchy
Objective-C: (void)drawContours:(Mat*)image contours:(NSArray<NSArray<Point2i*>*>*)contours contourIdx:(int)contourIdx color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)drawContours:(Mat*)image contours:(NSArray<NSArray<Point2i*>*>*)contours contourIdx:(int)contourIdx color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)drawContours:(Mat*)image contours:(NSArray<NSArray<Point2i*>*>*)contours contourIdx:(int)contourIdx color:(Scalar*)color
FUNC <void cv..drawMarker [ARG Mat img=, ARG Point position=, ARG Scalar color=, ARG MarkerTypes markerType=MARKER_CROSS, ARG int markerSize=20, ARG int thickness=1, ARG LineTypes line_type=8]>
Objective-C: (void)drawMarker:(Mat*)img position:(Point2i*)position color:(Scalar*)color markerType:(MarkerTypes)markerType markerSize:(int)markerSize thickness:(int)thickness line_type:(LineTypes)line_type
Objective-C: (void)drawMarker:(Mat*)img position:(Point2i*)position color:(Scalar*)color markerType:(MarkerTypes)markerType markerSize:(int)markerSize thickness:(int)thickness
Objective-C: (void)drawMarker:(Mat*)img position:(Point2i*)position color:(Scalar*)color markerType:(MarkerTypes)markerType markerSize:(int)markerSize
Objective-C: (void)drawMarker:(Mat*)img position:(Point2i*)position color:(Scalar*)color markerType:(MarkerTypes)markerType
Objective-C: (void)drawMarker:(Mat*)img position:(Point2i*)position color:(Scalar*)color
FUNC <void cv..ellipse [ARG Mat img=, ARG Point center=, ARG Size axes=, ARG double angle=, ARG double startAngle=, ARG double endAngle=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>
Objective-C: (void)ellipse:(Mat*)img center:(Point2i*)center axes:(Size2i*)axes angle:(double)angle startAngle:(double)startAngle endAngle:(double)endAngle color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)ellipse:(Mat*)img center:(Point2i*)center axes:(Size2i*)axes angle:(double)angle startAngle:(double)startAngle endAngle:(double)endAngle color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)ellipse:(Mat*)img center:(Point2i*)center axes:(Size2i*)axes angle:(double)angle startAngle:(double)startAngle endAngle:(double)endAngle color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)ellipse:(Mat*)img center:(Point2i*)center axes:(Size2i*)axes angle:(double)angle startAngle:(double)startAngle endAngle:(double)endAngle color:(Scalar*)color
FUNC <void cv..ellipse [ARG Mat img=, ARG RotatedRect box=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8]>
Objective-C: (void)ellipse:(Mat*)img box:(RotatedRect*)box color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)ellipse:(Mat*)img box:(RotatedRect*)box color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)ellipse:(Mat*)img box:(RotatedRect*)box color:(Scalar*)color
FUNC <void cv..ellipse2Poly [ARG Point center=, ARG Size axes=, ARG int angle=, ARG int arcStart=, ARG int arcEnd=, ARG int delta=, ARG vector_Point pts=]>
Objective-C: (void)ellipse2Poly:(Point2i*)center axes:(Size2i*)axes angle:(int)angle arcStart:(int)arcStart arcEnd:(int)arcEnd delta:(int)delta pts:(NSMutableArray<Point2i*>*)pts
FUNC <void cv..equalizeHist [ARG Mat src=, ARG Mat dst=]>
Objective-C: (void)equalizeHist:(Mat*)src dst:(Mat*)dst
FUNC <void cv..erode [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG BorderTypes borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
Objective-C: (void)erode:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations borderType:(BorderTypes)borderType borderValue:(Scalar*)borderValue
Objective-C: (void)erode:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations borderType:(BorderTypes)borderType
Objective-C: (void)erode:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations
Objective-C: (void)erode:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel anchor:(Point2i*)anchor
Objective-C: (void)erode:(Mat*)src dst:(Mat*)dst kernel:(Mat*)kernel
FUNC <void cv..fillConvexPoly [ARG Mat img=, ARG vector_Point points=, ARG Scalar color=, ARG LineTypes lineType=LINE_8, ARG int shift=0]>
Objective-C: (void)fillConvexPoly:(Mat*)img points:(NSArray<Point2i*>*)points color:(Scalar*)color lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)fillConvexPoly:(Mat*)img points:(NSArray<Point2i*>*)points color:(Scalar*)color lineType:(LineTypes)lineType
Objective-C: (void)fillConvexPoly:(Mat*)img points:(NSArray<Point2i*>*)points color:(Scalar*)color
FUNC <void cv..fillPoly [ARG Mat img=, ARG vector_vector_Point pts=, ARG Scalar color=, ARG LineTypes lineType=LINE_8, ARG int shift=0, ARG Point offset=Point()]>
Objective-C: (void)fillPoly:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts color:(Scalar*)color lineType:(LineTypes)lineType shift:(int)shift offset:(Point2i*)offset
Objective-C: (void)fillPoly:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts color:(Scalar*)color lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)fillPoly:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts color:(Scalar*)color lineType:(LineTypes)lineType
Objective-C: (void)fillPoly:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts color:(Scalar*)color
FUNC <void cv..filter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)filter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernel:(Mat*)kernel anchor:(Point2i*)anchor delta:(double)delta borderType:(BorderTypes)borderType
Objective-C: (void)filter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernel:(Mat*)kernel anchor:(Point2i*)anchor delta:(double)delta
Objective-C: (void)filter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernel:(Mat*)kernel anchor:(Point2i*)anchor
Objective-C: (void)filter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernel:(Mat*)kernel
FUNC <void cv..findContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG Mat hierarchy=, ARG RetrievalModes mode=, ARG ContourApproximationModes method=, ARG Point offset=Point()]>
Objective-C: (void)findContours:(Mat*)image contours:(NSMutableArray<NSMutableArray<Point2i*>*>*)contours hierarchy:(Mat*)hierarchy mode:(RetrievalModes)mode method:(ContourApproximationModes)method offset:(Point2i*)offset
Objective-C: (void)findContours:(Mat*)image contours:(NSMutableArray<NSMutableArray<Point2i*>*>*)contours hierarchy:(Mat*)hierarchy mode:(RetrievalModes)mode method:(ContourApproximationModes)method
FUNC <void cv..fitLine [ARG Mat points=, ARG Mat line=, ARG DistanceTypes distType=, ARG double param=, ARG double reps=, ARG double aeps=]>
Objective-C: (void)fitLine:(Mat*)points line:(Mat*)line distType:(DistanceTypes)distType param:(double)param reps:(double)reps aeps:(double)aeps
FUNC <void cv..getDerivKernels [ARG Mat kx=, ARG Mat ky=, ARG int dx=, ARG int dy=, ARG int ksize=, ARG bool normalize=false, ARG int ktype=CV_32F]>
Objective-C: (void)getDerivKernels:(Mat*)kx ky:(Mat*)ky dx:(int)dx dy:(int)dy ksize:(int)ksize normalize:(BOOL)normalize ktype:(int)ktype
Objective-C: (void)getDerivKernels:(Mat*)kx ky:(Mat*)ky dx:(int)dx dy:(int)dy ksize:(int)ksize normalize:(BOOL)normalize
Objective-C: (void)getDerivKernels:(Mat*)kx ky:(Mat*)ky dx:(int)dx dy:(int)dy ksize:(int)ksize
FUNC <void cv..getRectSubPix [ARG Mat image=, ARG Size patchSize=, ARG Point2f center=, ARG Mat patch=, ARG int patchType=-1]>
Objective-C: (void)getRectSubPix:(Mat*)image patchSize:(Size2i*)patchSize center:(Point2f*)center patch:(Mat*)patch patchType:(int)patchType
Objective-C: (void)getRectSubPix:(Mat*)image patchSize:(Size2i*)patchSize center:(Point2f*)center patch:(Mat*)patch
FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG int blockSize=, ARG int gradientSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance mask:(Mat*)mask blockSize:(int)blockSize gradientSize:(int)gradientSize useHarrisDetector:(BOOL)useHarrisDetector k:(double)k
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance mask:(Mat*)mask blockSize:(int)blockSize gradientSize:(int)gradientSize useHarrisDetector:(BOOL)useHarrisDetector
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance mask:(Mat*)mask blockSize:(int)blockSize gradientSize:(int)gradientSize
FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=Mat(), ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance mask:(Mat*)mask blockSize:(int)blockSize useHarrisDetector:(BOOL)useHarrisDetector k:(double)k
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance mask:(Mat*)mask blockSize:(int)blockSize useHarrisDetector:(BOOL)useHarrisDetector
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance mask:(Mat*)mask blockSize:(int)blockSize
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance mask:(Mat*)mask
Objective-C: (void)goodFeaturesToTrack:(Mat*)image corners:(NSMutableArray<Point2i*>*)corners maxCorners:(int)maxCorners qualityLevel:(double)qualityLevel minDistance:(double)minDistance
FUNC <void cv..grabCut [ARG Mat img=, ARG Mat mask=, ARG Rect rect=, ARG Mat bgdModel=, ARG Mat fgdModel=, ARG int iterCount=, ARG int mode=GC_EVAL]>
Objective-C: (void)grabCut:(Mat*)img mask:(Mat*)mask rect:(Rect2i*)rect bgdModel:(Mat*)bgdModel fgdModel:(Mat*)fgdModel iterCount:(int)iterCount mode:(int)mode
Objective-C: (void)grabCut:(Mat*)img mask:(Mat*)mask rect:(Rect2i*)rect bgdModel:(Mat*)bgdModel fgdModel:(Mat*)fgdModel iterCount:(int)iterCount
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG Mat tilted=, ARG int sdepth=-1, ARG int sqdepth=-1]>
Objective-C: (void)integral3:(Mat*)src sum:(Mat*)sum sqsum:(Mat*)sqsum tilted:(Mat*)tilted sdepth:(int)sdepth sqdepth:(int)sqdepth
Objective-C: (void)integral3:(Mat*)src sum:(Mat*)sum sqsum:(Mat*)sqsum tilted:(Mat*)tilted sdepth:(int)sdepth
Objective-C: (void)integral3:(Mat*)src sum:(Mat*)sum sqsum:(Mat*)sqsum tilted:(Mat*)tilted
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG int sdepth=-1, ARG int sqdepth=-1]>
Objective-C: (void)integral2:(Mat*)src sum:(Mat*)sum sqsum:(Mat*)sqsum sdepth:(int)sdepth sqdepth:(int)sqdepth
Objective-C: (void)integral2:(Mat*)src sum:(Mat*)sum sqsum:(Mat*)sqsum sdepth:(int)sdepth
Objective-C: (void)integral2:(Mat*)src sum:(Mat*)sum sqsum:(Mat*)sqsum
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG int sdepth=-1]>
Objective-C: (void)integral:(Mat*)src sum:(Mat*)sum sdepth:(int)sdepth
Objective-C: (void)integral:(Mat*)src sum:(Mat*)sum
FUNC <void cv..invertAffineTransform [ARG Mat M=, ARG Mat iM=]>
Objective-C: (void)invertAffineTransform:(Mat*)M iM:(Mat*)iM
FUNC <void cv..line [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>
Objective-C: (void)line:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)line:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)line:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)line:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color
FUNC <void cv..linearPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>
Objective-C: (void)linearPolar:(Mat*)src dst:(Mat*)dst center:(Point2f*)center maxRadius:(double)maxRadius flags:(int)flags
FUNC <void cv..logPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double M=, ARG int flags=]>
Objective-C: (void)logPolar:(Mat*)src dst:(Mat*)dst center:(Point2f*)center M:(double)M flags:(int)flags
FUNC <void cv..matchTemplate [ARG Mat image=, ARG Mat templ=, ARG Mat result=, ARG TemplateMatchModes method=, ARG Mat mask=Mat()]>
Objective-C: (void)matchTemplate:(Mat*)image templ:(Mat*)templ result:(Mat*)result method:(TemplateMatchModes)method mask:(Mat*)mask
Objective-C: (void)matchTemplate:(Mat*)image templ:(Mat*)templ result:(Mat*)result method:(TemplateMatchModes)method
FUNC <void cv..medianBlur [ARG Mat src=, ARG Mat dst=, ARG int ksize=]>
Objective-C: (void)medianBlur:(Mat*)src dst:(Mat*)dst ksize:(int)ksize
FUNC <void cv..minEnclosingCircle [ARG vector_Point2f points=, ARG Point2f center=, ARG float radius=]>
Objective-C: (void)minEnclosingCircle:(NSArray<Point2f*>*)points center:(Point2f*)center radius:(float*)radius
FUNC <void cv..morphologyEx [ARG Mat src=, ARG Mat dst=, ARG MorphTypes op=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG BorderTypes borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
Objective-C: (void)morphologyEx:(Mat*)src dst:(Mat*)dst op:(MorphTypes)op kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations borderType:(BorderTypes)borderType borderValue:(Scalar*)borderValue
Objective-C: (void)morphologyEx:(Mat*)src dst:(Mat*)dst op:(MorphTypes)op kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations borderType:(BorderTypes)borderType
Objective-C: (void)morphologyEx:(Mat*)src dst:(Mat*)dst op:(MorphTypes)op kernel:(Mat*)kernel anchor:(Point2i*)anchor iterations:(int)iterations
Objective-C: (void)morphologyEx:(Mat*)src dst:(Mat*)dst op:(MorphTypes)op kernel:(Mat*)kernel anchor:(Point2i*)anchor
Objective-C: (void)morphologyEx:(Mat*)src dst:(Mat*)dst op:(MorphTypes)op kernel:(Mat*)kernel
FUNC <void cv..polylines [ARG Mat img=, ARG vector_vector_Point pts=, ARG bool isClosed=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>
Objective-C: (void)polylines:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts isClosed:(BOOL)isClosed color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)polylines:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts isClosed:(BOOL)isClosed color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)polylines:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts isClosed:(BOOL)isClosed color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)polylines:(Mat*)img pts:(NSArray<NSArray<Point2i*>*>*)pts isClosed:(BOOL)isClosed color:(Scalar*)color
FUNC <void cv..preCornerDetect [ARG Mat src=, ARG Mat dst=, ARG int ksize=, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)preCornerDetect:(Mat*)src dst:(Mat*)dst ksize:(int)ksize borderType:(BorderTypes)borderType
Objective-C: (void)preCornerDetect:(Mat*)src dst:(Mat*)dst ksize:(int)ksize
FUNC <void cv..putText [ARG Mat img=, ARG String text=, ARG Point org=, ARG HersheyFonts fontFace=, ARG double fontScale=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG bool bottomLeftOrigin=false]>
Objective-C: (void)putText:(Mat*)img text:(NSString*)text org:(Point2i*)org fontFace:(HersheyFonts)fontFace fontScale:(double)fontScale color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType bottomLeftOrigin:(BOOL)bottomLeftOrigin
Objective-C: (void)putText:(Mat*)img text:(NSString*)text org:(Point2i*)org fontFace:(HersheyFonts)fontFace fontScale:(double)fontScale color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)putText:(Mat*)img text:(NSString*)text org:(Point2i*)org fontFace:(HersheyFonts)fontFace fontScale:(double)fontScale color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)putText:(Mat*)img text:(NSString*)text org:(Point2i*)org fontFace:(HersheyFonts)fontFace fontScale:(double)fontScale color:(Scalar*)color
FUNC <void cv..pyrDown [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)pyrDown:(Mat*)src dst:(Mat*)dst dstsize:(Size2i*)dstsize borderType:(BorderTypes)borderType
Objective-C: (void)pyrDown:(Mat*)src dst:(Mat*)dst dstsize:(Size2i*)dstsize
Objective-C: (void)pyrDown:(Mat*)src dst:(Mat*)dst
FUNC <void cv..pyrMeanShiftFiltering [ARG Mat src=, ARG Mat dst=, ARG double sp=, ARG double sr=, ARG int maxLevel=1, ARG TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)]>
Objective-C: (void)pyrMeanShiftFiltering:(Mat*)src dst:(Mat*)dst sp:(double)sp sr:(double)sr maxLevel:(int)maxLevel termcrit:(TermCriteria*)termcrit
Objective-C: (void)pyrMeanShiftFiltering:(Mat*)src dst:(Mat*)dst sp:(double)sp sr:(double)sr maxLevel:(int)maxLevel
Objective-C: (void)pyrMeanShiftFiltering:(Mat*)src dst:(Mat*)dst sp:(double)sp sr:(double)sr
FUNC <void cv..pyrUp [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)pyrUp:(Mat*)src dst:(Mat*)dst dstsize:(Size2i*)dstsize borderType:(BorderTypes)borderType
Objective-C: (void)pyrUp:(Mat*)src dst:(Mat*)dst dstsize:(Size2i*)dstsize
Objective-C: (void)pyrUp:(Mat*)src dst:(Mat*)dst
FUNC <void cv..rectangle [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>
Objective-C: (void)rectangle:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)rectangle:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)rectangle:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)rectangle:(Mat*)img pt1:(Point2i*)pt1 pt2:(Point2i*)pt2 color:(Scalar*)color
FUNC <void cv..rectangle [ARG Mat img=, ARG Rect rec=, ARG Scalar color=, ARG int thickness=1, ARG LineTypes lineType=LINE_8, ARG int shift=0]>
Objective-C: (void)rectangle:(Mat*)img rec:(Rect2i*)rec color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType shift:(int)shift
Objective-C: (void)rectangle:(Mat*)img rec:(Rect2i*)rec color:(Scalar*)color thickness:(int)thickness lineType:(LineTypes)lineType
Objective-C: (void)rectangle:(Mat*)img rec:(Rect2i*)rec color:(Scalar*)color thickness:(int)thickness
Objective-C: (void)rectangle:(Mat*)img rec:(Rect2i*)rec color:(Scalar*)color
FUNC <void cv..remap [ARG Mat src=, ARG Mat dst=, ARG Mat map1=, ARG Mat map2=, ARG int interpolation=, ARG BorderTypes borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
Objective-C: (void)remap:(Mat*)src dst:(Mat*)dst map1:(Mat*)map1 map2:(Mat*)map2 interpolation:(int)interpolation borderMode:(BorderTypes)borderMode borderValue:(Scalar*)borderValue
Objective-C: (void)remap:(Mat*)src dst:(Mat*)dst map1:(Mat*)map1 map2:(Mat*)map2 interpolation:(int)interpolation borderMode:(BorderTypes)borderMode
Objective-C: (void)remap:(Mat*)src dst:(Mat*)dst map1:(Mat*)map1 map2:(Mat*)map2 interpolation:(int)interpolation
FUNC <void cv..resize [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG double fx=0, ARG double fy=0, ARG int interpolation=INTER_LINEAR]>
Objective-C: (void)resize:(Mat*)src dst:(Mat*)dst dsize:(Size2i*)dsize fx:(double)fx fy:(double)fy interpolation:(int)interpolation
Objective-C: (void)resize:(Mat*)src dst:(Mat*)dst dsize:(Size2i*)dsize fx:(double)fx fy:(double)fy
Objective-C: (void)resize:(Mat*)src dst:(Mat*)dst dsize:(Size2i*)dsize fx:(double)fx
Objective-C: (void)resize:(Mat*)src dst:(Mat*)dst dsize:(Size2i*)dsize
FUNC <void cv..sepFilter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernelX=, ARG Mat kernelY=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)sepFilter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernelX:(Mat*)kernelX kernelY:(Mat*)kernelY anchor:(Point2i*)anchor delta:(double)delta borderType:(BorderTypes)borderType
Objective-C: (void)sepFilter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernelX:(Mat*)kernelX kernelY:(Mat*)kernelY anchor:(Point2i*)anchor delta:(double)delta
Objective-C: (void)sepFilter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernelX:(Mat*)kernelX kernelY:(Mat*)kernelY anchor:(Point2i*)anchor
Objective-C: (void)sepFilter2D:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth kernelX:(Mat*)kernelX kernelY:(Mat*)kernelY
FUNC <void cv..spatialGradient [ARG Mat src=, ARG Mat dx=, ARG Mat dy=, ARG int ksize=3, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)spatialGradient:(Mat*)src dx:(Mat*)dx dy:(Mat*)dy ksize:(int)ksize borderType:(BorderTypes)borderType
Objective-C: (void)spatialGradient:(Mat*)src dx:(Mat*)dx dy:(Mat*)dy ksize:(int)ksize
Objective-C: (void)spatialGradient:(Mat*)src dx:(Mat*)dx dy:(Mat*)dy
FUNC <void cv..sqrBoxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1, -1), ARG bool normalize=true, ARG BorderTypes borderType=BORDER_DEFAULT]>
Objective-C: (void)sqrBoxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize anchor:(Point2i*)anchor normalize:(BOOL)normalize borderType:(BorderTypes)borderType
Objective-C: (void)sqrBoxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize anchor:(Point2i*)anchor normalize:(BOOL)normalize
Objective-C: (void)sqrBoxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize anchor:(Point2i*)anchor
Objective-C: (void)sqrBoxFilter:(Mat*)src dst:(Mat*)dst ddepth:(int)ddepth ksize:(Size2i*)ksize
FUNC <void cv..warpAffine [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG BorderTypes borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
Objective-C: (void)warpAffine:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize flags:(int)flags borderMode:(BorderTypes)borderMode borderValue:(Scalar*)borderValue
Objective-C: (void)warpAffine:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize flags:(int)flags borderMode:(BorderTypes)borderMode
Objective-C: (void)warpAffine:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize flags:(int)flags
Objective-C: (void)warpAffine:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize
FUNC <void cv..warpPerspective [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG BorderTypes borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
Objective-C: (void)warpPerspective:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize flags:(int)flags borderMode:(BorderTypes)borderMode borderValue:(Scalar*)borderValue
Objective-C: (void)warpPerspective:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize flags:(int)flags borderMode:(BorderTypes)borderMode
Objective-C: (void)warpPerspective:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize flags:(int)flags
Objective-C: (void)warpPerspective:(Mat*)src dst:(Mat*)dst M:(Mat*)M dsize:(Size2i*)dsize
FUNC <void cv..warpPolar [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>
Objective-C: (void)warpPolar:(Mat*)src dst:(Mat*)dst dsize:(Size2i*)dsize center:(Point2f*)center maxRadius:(double)maxRadius flags:(int)flags
FUNC <void cv..watershed [ARG Mat image=, ARG Mat markers=]>
Objective-C: (void)watershed:(Mat*)image markers:(Mat*)markers
CLASS cv::.CLAHE : Algorithm
FUNC <Size cv.CLAHE.getTilesGridSize []>
Objective-C: (Size2i*)getTilesGridSize
FUNC <double cv.CLAHE.getClipLimit []>
Objective-C: (double)getClipLimit
FUNC <void cv.CLAHE.apply [ARG Mat src=, ARG Mat dst=]>
Objective-C: (void)apply:(Mat*)src dst:(Mat*)dst
FUNC <void cv.CLAHE.collectGarbage []>
Objective-C: (void)collectGarbage
FUNC <void cv.CLAHE.setClipLimit [ARG double clipLimit=]>
Objective-C: (void)setClipLimit:(double)clipLimit
FUNC <void cv.CLAHE.setTilesGridSize [ARG Size tileGridSize=]>
Objective-C: (void)setTilesGridSize:(Size2i*)tileGridSize
CLASS cv::.Subdiv2D : NSObject
[CONST PTLOC_ERROR=-2, CONST PTLOC_OUTSIDE_RECT=-1, CONST PTLOC_INSIDE=0, CONST PTLOC_VERTEX=1, CONST PTLOC_ON_EDGE=2, CONST NEXT_AROUND_ORG=0x00, CONST NEXT_AROUND_DST=0x22, CONST PREV_AROUND_ORG=0x11, CONST PREV_AROUND_DST=0x33, CONST NEXT_AROUND_LEFT=0x13, CONST NEXT_AROUND_RIGHT=0x31, CONST PREV_AROUND_LEFT=0x20, CONST PREV_AROUND_RIGHT=0x02]
FUNC < cv.Subdiv2D.Subdiv2D [ARG Rect rect=]>
Objective-C: ()Subdiv2D:(Rect2i*)rect
FUNC < cv.Subdiv2D.Subdiv2D []>
Objective-C: ()Subdiv2D
FUNC <Point2f cv.Subdiv2D.getVertex [ARG int vertex=, ARG int * firstEdge=0]>
Objective-C: (Point2f*)getVertex:(int)vertex firstEdge:(int*)firstEdge
Objective-C: (Point2f*)getVertex:(int)vertex
FUNC <int cv.Subdiv2D.edgeDst [ARG int edge=, ARG Point2f * dstpt=0]>
Objective-C: (int)edgeDst:(int)edge dstpt:(Point2f*)dstpt
Objective-C: (int)edgeDst:(int)edge
FUNC <int cv.Subdiv2D.edgeOrg [ARG int edge=, ARG Point2f * orgpt=0]>
Objective-C: (int)edgeOrg:(int)edge orgpt:(Point2f*)orgpt
Objective-C: (int)edgeOrg:(int)edge
FUNC <int cv.Subdiv2D.findNearest [ARG Point2f pt=, ARG Point2f * nearestPt=0]>
Objective-C: (int)findNearest:(Point2f*)pt nearestPt:(Point2f*)nearestPt
Objective-C: (int)findNearest:(Point2f*)pt
FUNC <int cv.Subdiv2D.getEdge [ARG int edge=, ARG int nextEdgeType=]>
Objective-C: (int)getEdge:(int)edge nextEdgeType:(int)nextEdgeType
FUNC <int cv.Subdiv2D.insert [ARG Point2f pt=]>
Objective-C: (int)insert:(Point2f*)pt
FUNC <int cv.Subdiv2D.locate [ARG Point2f pt=, ARG int edge=, ARG int vertex=]>
Objective-C: (int)locate:(Point2f*)pt edge:(int*)edge vertex:(int*)vertex
FUNC <int cv.Subdiv2D.nextEdge [ARG int edge=]>
Objective-C: (int)nextEdge:(int)edge
FUNC <int cv.Subdiv2D.rotateEdge [ARG int edge=, ARG int rotate=]>
Objective-C: (int)rotateEdge:(int)edge rotate:(int)rotate
FUNC <int cv.Subdiv2D.symEdge [ARG int edge=]>
Objective-C: (int)symEdge:(int)edge
FUNC <void cv.Subdiv2D.getEdgeList [ARG vector_Vec4f edgeList=]>
Objective-C: (void)getEdgeList:(NSMutableArray<Float4*>*)edgeList
FUNC <void cv.Subdiv2D.getLeadingEdgeList [ARG vector_int leadingEdgeList=]>
Objective-C: (void)getLeadingEdgeList:(IntVector*)leadingEdgeList
FUNC <void cv.Subdiv2D.getTriangleList [ARG vector_Vec6f triangleList=]>
Objective-C: (void)getTriangleList:(NSMutableArray<Float6*>*)triangleList
FUNC <void cv.Subdiv2D.getVoronoiFacetList [ARG vector_int idx=, ARG vector_vector_Point2f facetList=, ARG vector_Point2f facetCenters=]>
Objective-C: (void)getVoronoiFacetList:(IntVector*)idx facetList:(NSMutableArray<NSMutableArray<Point2f*>*>*)facetList facetCenters:(NSMutableArray<Point2f*>*)facetCenters
FUNC <void cv.Subdiv2D.initDelaunay [ARG Rect rect=]>
Objective-C: (void)initDelaunay:(Rect2i*)rect
FUNC <void cv.Subdiv2D.insert [ARG vector_Point2f ptvec=]>
Objective-C: (void)insertVector:(NSArray<Point2f*>*)ptvec
CLASS cv::.GeneralizedHoughBallard : GeneralizedHough
FUNC <int cv.GeneralizedHoughBallard.getLevels []>
Objective-C: (int)getLevels
FUNC <int cv.GeneralizedHoughBallard.getVotesThreshold []>
Objective-C: (int)getVotesThreshold
FUNC <void cv.GeneralizedHoughBallard.setLevels [ARG int levels=]>
Objective-C: (void)setLevels:(int)levels
FUNC <void cv.GeneralizedHoughBallard.setVotesThreshold [ARG int votesThreshold=]>
Objective-C: (void)setVotesThreshold:(int)votesThreshold
CLASS cv::.GeneralizedHough : Algorithm
FUNC <double cv.GeneralizedHough.getDp []>
Objective-C: (double)getDp
FUNC <double cv.GeneralizedHough.getMinDist []>
Objective-C: (double)getMinDist
FUNC <int cv.GeneralizedHough.getCannyHighThresh []>
Objective-C: (int)getCannyHighThresh
FUNC <int cv.GeneralizedHough.getCannyLowThresh []>
Objective-C: (int)getCannyLowThresh
FUNC <int cv.GeneralizedHough.getMaxBufferSize []>
Objective-C: (int)getMaxBufferSize
FUNC <void cv.GeneralizedHough.detect [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Mat positions=, ARG Mat votes=Mat()]>
Objective-C: (void)detect:(Mat*)edges dx:(Mat*)dx dy:(Mat*)dy positions:(Mat*)positions votes:(Mat*)votes
Objective-C: (void)detect:(Mat*)edges dx:(Mat*)dx dy:(Mat*)dy positions:(Mat*)positions
FUNC <void cv.GeneralizedHough.detect [ARG Mat image=, ARG Mat positions=, ARG Mat votes=Mat()]>
Objective-C: (void)detect:(Mat*)image positions:(Mat*)positions votes:(Mat*)votes
Objective-C: (void)detect:(Mat*)image positions:(Mat*)positions
FUNC <void cv.GeneralizedHough.setCannyHighThresh [ARG int cannyHighThresh=]>
Objective-C: (void)setCannyHighThresh:(int)cannyHighThresh
FUNC <void cv.GeneralizedHough.setCannyLowThresh [ARG int cannyLowThresh=]>
Objective-C: (void)setCannyLowThresh:(int)cannyLowThresh
FUNC <void cv.GeneralizedHough.setDp [ARG double dp=]>
Objective-C: (void)setDp:(double)dp
FUNC <void cv.GeneralizedHough.setMaxBufferSize [ARG int maxBufferSize=]>
Objective-C: (void)setMaxBufferSize:(int)maxBufferSize
FUNC <void cv.GeneralizedHough.setMinDist [ARG double minDist=]>
Objective-C: (void)setMinDist:(double)minDist
FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Point templCenter=Point(-1, -1)]>
Objective-C: (void)setTemplate:(Mat*)edges dx:(Mat*)dx dy:(Mat*)dy templCenter:(Point2i*)templCenter
Objective-C: (void)setTemplate:(Mat*)edges dx:(Mat*)dx dy:(Mat*)dy
FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat templ=, ARG Point templCenter=Point(-1, -1)]>
Objective-C: (void)setTemplate:(Mat*)templ templCenter:(Point2i*)templCenter
Objective-C: (void)setTemplate:(Mat*)templ
CLASS cv::.GeneralizedHoughGuil : GeneralizedHough
FUNC <double cv.GeneralizedHoughGuil.getAngleEpsilon []>
Objective-C: (double)getAngleEpsilon
FUNC <double cv.GeneralizedHoughGuil.getAngleStep []>
Objective-C: (double)getAngleStep
FUNC <double cv.GeneralizedHoughGuil.getMaxAngle []>
Objective-C: (double)getMaxAngle
FUNC <double cv.GeneralizedHoughGuil.getMaxScale []>
Objective-C: (double)getMaxScale
FUNC <double cv.GeneralizedHoughGuil.getMinAngle []>
Objective-C: (double)getMinAngle
FUNC <double cv.GeneralizedHoughGuil.getMinScale []>
Objective-C: (double)getMinScale
FUNC <double cv.GeneralizedHoughGuil.getScaleStep []>
Objective-C: (double)getScaleStep
FUNC <double cv.GeneralizedHoughGuil.getXi []>
Objective-C: (double)getXi
FUNC <int cv.GeneralizedHoughGuil.getAngleThresh []>
Objective-C: (int)getAngleThresh
FUNC <int cv.GeneralizedHoughGuil.getLevels []>
Objective-C: (int)getLevels
FUNC <int cv.GeneralizedHoughGuil.getPosThresh []>
Objective-C: (int)getPosThresh
FUNC <int cv.GeneralizedHoughGuil.getScaleThresh []>
Objective-C: (int)getScaleThresh
FUNC <void cv.GeneralizedHoughGuil.setAngleEpsilon [ARG double angleEpsilon=]>
Objective-C: (void)setAngleEpsilon:(double)angleEpsilon
FUNC <void cv.GeneralizedHoughGuil.setAngleStep [ARG double angleStep=]>
Objective-C: (void)setAngleStep:(double)angleStep
FUNC <void cv.GeneralizedHoughGuil.setAngleThresh [ARG int angleThresh=]>
Objective-C: (void)setAngleThresh:(int)angleThresh
FUNC <void cv.GeneralizedHoughGuil.setLevels [ARG int levels=]>
Objective-C: (void)setLevels:(int)levels
FUNC <void cv.GeneralizedHoughGuil.setMaxAngle [ARG double maxAngle=]>
Objective-C: (void)setMaxAngle:(double)maxAngle
FUNC <void cv.GeneralizedHoughGuil.setMaxScale [ARG double maxScale=]>
Objective-C: (void)setMaxScale:(double)maxScale
FUNC <void cv.GeneralizedHoughGuil.setMinAngle [ARG double minAngle=]>
Objective-C: (void)setMinAngle:(double)minAngle
FUNC <void cv.GeneralizedHoughGuil.setMinScale [ARG double minScale=]>
Objective-C: (void)setMinScale:(double)minScale
FUNC <void cv.GeneralizedHoughGuil.setPosThresh [ARG int posThresh=]>
Objective-C: (void)setPosThresh:(int)posThresh
FUNC <void cv.GeneralizedHoughGuil.setScaleStep [ARG double scaleStep=]>
Objective-C: (void)setScaleStep:(double)scaleStep
FUNC <void cv.GeneralizedHoughGuil.setScaleThresh [ARG int scaleThresh=]>
Objective-C: (void)setScaleThresh:(int)scaleThresh
FUNC <void cv.GeneralizedHoughGuil.setXi [ARG double xi=]>
Objective-C: (void)setXi:(double)xi
CLASS cv::.LineSegmentDetector : Algorithm
FUNC <int cv.LineSegmentDetector.compareSegments [ARG Size size=, ARG Mat lines1=, ARG Mat lines2=, ARG Mat _image=Mat()]>
Objective-C: (int)compareSegments:(Size2i*)size lines1:(Mat*)lines1 lines2:(Mat*)lines2 _image:(Mat*)_image
Objective-C: (int)compareSegments:(Size2i*)size lines1:(Mat*)lines1 lines2:(Mat*)lines2
FUNC <void cv.LineSegmentDetector.detect [ARG Mat _image=, ARG Mat _lines=, ARG Mat width=Mat(), ARG Mat prec=Mat(), ARG Mat nfa=Mat()]>
Objective-C: (void)detect:(Mat*)_image _lines:(Mat*)_lines width:(Mat*)width prec:(Mat*)prec nfa:(Mat*)nfa
Objective-C: (void)detect:(Mat*)_image _lines:(Mat*)_lines width:(Mat*)width prec:(Mat*)prec
Objective-C: (void)detect:(Mat*)_image _lines:(Mat*)_lines width:(Mat*)width
Objective-C: (void)detect:(Mat*)_image _lines:(Mat*)_lines
FUNC <void cv.LineSegmentDetector.drawSegments [ARG Mat _image=, ARG Mat lines=]>
Objective-C: (void)drawSegments:(Mat*)_image lines:(Mat*)lines

=== MODULE: imgcodecs (/Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs) ===


Files (4):
[u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/ios.h',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs_c.h',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs.hpp',
 u'/Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp']

Common headers (0):
[]
ok: class CLASS ::.Imgcodecs : , name: Imgcodecs, base: 


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/ios.h =====
Namespaces: set([])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/ios.h


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs_c.h =====
Namespaces: set([])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs_c.h


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs.hpp =====
Namespaces: set([u'cv'])

--- Incoming ---
[   u'enum cv.ImreadModes',
    '',
    [],
    [   [u'const cv.IMREAD_UNCHANGED', u'-1', [], [], None, ''],
        [u'const cv.IMREAD_GRAYSCALE', u'0', [], [], None, ''],
        [u'const cv.IMREAD_COLOR', u'1', [], [], None, ''],
        [u'const cv.IMREAD_ANYDEPTH', u'2', [], [], None, ''],
        [u'const cv.IMREAD_ANYCOLOR', u'4', [], [], None, ''],
        [u'const cv.IMREAD_LOAD_GDAL', u'8', [], [], None, ''],
        [u'const cv.IMREAD_REDUCED_GRAYSCALE_2', u'16', [], [], None, ''],
        [u'const cv.IMREAD_REDUCED_COLOR_2', u'17', [], [], None, ''],
        [u'const cv.IMREAD_REDUCED_GRAYSCALE_4', u'32', [], [], None, ''],
        [u'const cv.IMREAD_REDUCED_COLOR_4', u'33', [], [], None, ''],
        [u'const cv.IMREAD_REDUCED_GRAYSCALE_8', u'64', [], [], None, ''],
        [u'const cv.IMREAD_REDUCED_COLOR_8', u'65', [], [], None, ''],
        [u'const cv.IMREAD_IGNORE_ORIENTATION', u'128', [], [], None, '']],
    None]
ok: CONST IMREAD_UNCHANGED=-1
ok: CONST IMREAD_GRAYSCALE=0
ok: CONST IMREAD_COLOR=1
ok: CONST IMREAD_ANYDEPTH=2
ok: CONST IMREAD_ANYCOLOR=4
ok: CONST IMREAD_LOAD_GDAL=8
ok: CONST IMREAD_REDUCED_GRAYSCALE_2=16
ok: CONST IMREAD_REDUCED_COLOR_2=17
ok: CONST IMREAD_REDUCED_GRAYSCALE_4=32
ok: CONST IMREAD_REDUCED_COLOR_4=33
ok: CONST IMREAD_REDUCED_GRAYSCALE_8=64
ok: CONST IMREAD_REDUCED_COLOR_8=65
ok: CONST IMREAD_IGNORE_ORIENTATION=128

--- Incoming ---
[   u'enum cv.ImwriteFlags',
    '',
    [],
    [   [u'const cv.IMWRITE_JPEG_QUALITY', u'1', [], [], None, ''],
        [u'const cv.IMWRITE_JPEG_PROGRESSIVE', u'2', [], [], None, ''],
        [u'const cv.IMWRITE_JPEG_OPTIMIZE', u'3', [], [], None, ''],
        [u'const cv.IMWRITE_JPEG_RST_INTERVAL', u'4', [], [], None, ''],
        [u'const cv.IMWRITE_JPEG_LUMA_QUALITY', u'5', [], [], None, ''],
        [u'const cv.IMWRITE_JPEG_CHROMA_QUALITY', u'6', [], [], None, ''],
        [u'const cv.IMWRITE_PNG_COMPRESSION', u'16', [], [], None, ''],
        [u'const cv.IMWRITE_PNG_STRATEGY', u'17', [], [], None, ''],
        [u'const cv.IMWRITE_PNG_BILEVEL', u'18', [], [], None, ''],
        [u'const cv.IMWRITE_PXM_BINARY', u'32', [], [], None, ''],
        [u'const cv.IMWRITE_EXR_TYPE', u'(3 << 4) + 0', [], [], None, ''],
        [u'const cv.IMWRITE_WEBP_QUALITY', u'64', [], [], None, ''],
        [u'const cv.IMWRITE_PAM_TUPLETYPE', u'128', [], [], None, ''],
        [u'const cv.IMWRITE_TIFF_RESUNIT', u'256', [], [], None, ''],
        [u'const cv.IMWRITE_TIFF_XDPI', u'257', [], [], None, ''],
        [u'const cv.IMWRITE_TIFF_YDPI', u'258', [], [], None, ''],
        [u'const cv.IMWRITE_TIFF_COMPRESSION', u'259', [], [], None, ''],
        [   u'const cv.IMWRITE_JPEG2000_COMPRESSION_X1000',
            u'272',
            [],
            [],
            None,
            '']],
    None]
ok: CONST IMWRITE_JPEG_QUALITY=1
ok: CONST IMWRITE_JPEG_PROGRESSIVE=2
ok: CONST IMWRITE_JPEG_OPTIMIZE=3
ok: CONST IMWRITE_JPEG_RST_INTERVAL=4
ok: CONST IMWRITE_JPEG_LUMA_QUALITY=5
ok: CONST IMWRITE_JPEG_CHROMA_QUALITY=6
ok: CONST IMWRITE_PNG_COMPRESSION=16
ok: CONST IMWRITE_PNG_STRATEGY=17
ok: CONST IMWRITE_PNG_BILEVEL=18
ok: CONST IMWRITE_PXM_BINARY=32
ok: CONST IMWRITE_EXR_TYPE=(3 << 4) + 0
ok: CONST IMWRITE_WEBP_QUALITY=64
ok: CONST IMWRITE_PAM_TUPLETYPE=128
ok: CONST IMWRITE_TIFF_RESUNIT=256
ok: CONST IMWRITE_TIFF_XDPI=257
ok: CONST IMWRITE_TIFF_YDPI=258
ok: CONST IMWRITE_TIFF_COMPRESSION=259
ok: CONST IMWRITE_JPEG2000_COMPRESSION_X1000=272

--- Incoming ---
[   u'enum cv.ImwriteEXRTypeFlags',
    '',
    [],
    [   [u'const cv.IMWRITE_EXR_TYPE_HALF', u'1', [], [], None, ''],
        [u'const cv.IMWRITE_EXR_TYPE_FLOAT', u'2', [], [], None, '']],
    None]
ok: CONST IMWRITE_EXR_TYPE_HALF=1
ok: CONST IMWRITE_EXR_TYPE_FLOAT=2

--- Incoming ---
[   u'enum cv.ImwritePNGFlags',
    '',
    [],
    [   [u'const cv.IMWRITE_PNG_STRATEGY_DEFAULT', u'0', [], [], None, ''],
        [u'const cv.IMWRITE_PNG_STRATEGY_FILTERED', u'1', [], [], None, ''],
        [   u'const cv.IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY',
            u'2',
            [],
            [],
            None,
            ''],
        [u'const cv.IMWRITE_PNG_STRATEGY_RLE', u'3', [], [], None, ''],
        [u'const cv.IMWRITE_PNG_STRATEGY_FIXED', u'4', [], [], None, '']],
    None]
ok: CONST IMWRITE_PNG_STRATEGY_DEFAULT=0
ok: CONST IMWRITE_PNG_STRATEGY_FILTERED=1
ok: CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2
ok: CONST IMWRITE_PNG_STRATEGY_RLE=3
ok: CONST IMWRITE_PNG_STRATEGY_FIXED=4

--- Incoming ---
[   u'enum cv.ImwritePAMFlags',
    '',
    [],
    [   [u'const cv.IMWRITE_PAM_FORMAT_NULL', u'0', [], [], None, ''],
        [   u'const cv.IMWRITE_PAM_FORMAT_BLACKANDWHITE',
            u'1',
            [],
            [],
            None,
            ''],
        [u'const cv.IMWRITE_PAM_FORMAT_GRAYSCALE', u'2', [], [], None, ''],
        [   u'const cv.IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA',
            u'3',
            [],
            [],
            None,
            ''],
        [u'const cv.IMWRITE_PAM_FORMAT_RGB', u'4', [], [], None, ''],
        [u'const cv.IMWRITE_PAM_FORMAT_RGB_ALPHA', u'5', [], [], None, '']],
    None]
ok: CONST IMWRITE_PAM_FORMAT_NULL=0
ok: CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3
ok: CONST IMWRITE_PAM_FORMAT_RGB=4
ok: CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5

--- Incoming ---
[   u'cv.imread',
    u'Mat',
    [],
    [   [u'String', u'filename', u'', ['/C', '/Ref']],
        [u'int', u'flags', u'IMREAD_COLOR', []]],
    u'Mat']
ok: FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>

--- Incoming ---
[   u'cv.imreadmulti',
    u'bool',
    [],
    [   [u'String', u'filename', u'', ['/C', '/Ref']],
        [u'vector_Mat', u'mats', u'', ['/O', '/Ref']],
        [u'int', u'flags', u'IMREAD_ANYCOLOR', []]],
    u'bool']
ok: FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>

--- Incoming ---
[   u'cv.imwrite',
    u'bool',
    [],
    [   [u'String', u'filename', u'', ['/C', '/Ref']],
        ['Mat', u'img', '', []],
        [u'vector_int', u'params', u'std::vector<int>()', ['/C', '/Ref']]],
    u'bool']
ok: FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>

--- Incoming ---
[   u'cv.imdecode',
    u'Mat',
    [],
    [['Mat', u'buf', '', []], [u'int', u'flags', u'', []]],
    u'Mat']
ok: FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>

--- Incoming ---
[   u'cv.imencode',
    u'bool',
    [],
    [   [u'String', u'ext', u'', ['/C', '/Ref']],
        ['Mat', u'img', '', []],
        [u'vector_uchar', u'buf', u'', ['/O', '/Ref']],
        [u'vector_int', u'params', u'std::vector<int>()', ['/C', '/Ref']]],
    u'bool']
ok: FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>

--- Incoming ---
[   u'cv.haveImageReader',
    u'bool',
    [],
    [[u'String', u'filename', u'', ['/C', '/Ref']]],
    u'bool']
ok: FUNC <bool cv..haveImageReader [ARG String filename=]>

--- Incoming ---
[   u'cv.haveImageWriter',
    u'bool',
    [],
    [[u'String', u'filename', u'', ['/C', '/Ref']]],
    u'bool']
ok: FUNC <bool cv..haveImageWriter [ARG String filename=]>


===== Header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp =====
Namespaces: set([u'cv'])
Ignore header: /Users/chungting/MyOpenCV/Repo/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp


===== Generating... =====
CLASS ::.Imgcodecs : NSObject
[CONST IMWRITE_JPEG_QUALITY=1, CONST IMWRITE_JPEG_PROGRESSIVE=2, CONST IMWRITE_JPEG_OPTIMIZE=3, CONST IMWRITE_JPEG_RST_INTERVAL=4, CONST IMWRITE_JPEG_LUMA_QUALITY=5, CONST IMWRITE_JPEG_CHROMA_QUALITY=6, CONST IMWRITE_PNG_COMPRESSION=16, CONST IMWRITE_PNG_STRATEGY=17, CONST IMWRITE_PNG_BILEVEL=18, CONST IMWRITE_PXM_BINARY=32, CONST IMWRITE_EXR_TYPE=(3 << 4) + 0, CONST IMWRITE_WEBP_QUALITY=64, CONST IMWRITE_PAM_TUPLETYPE=128, CONST IMWRITE_TIFF_RESUNIT=256, CONST IMWRITE_TIFF_XDPI=257, CONST IMWRITE_TIFF_YDPI=258, CONST IMWRITE_TIFF_COMPRESSION=259, CONST IMWRITE_JPEG2000_COMPRESSION_X1000=272]
[CONST IMREAD_UNCHANGED=-1, CONST IMREAD_GRAYSCALE=0, CONST IMREAD_COLOR=1, CONST IMREAD_ANYDEPTH=2, CONST IMREAD_ANYCOLOR=4, CONST IMREAD_LOAD_GDAL=8, CONST IMREAD_REDUCED_GRAYSCALE_2=16, CONST IMREAD_REDUCED_COLOR_2=17, CONST IMREAD_REDUCED_GRAYSCALE_4=32, CONST IMREAD_REDUCED_COLOR_4=33, CONST IMREAD_REDUCED_GRAYSCALE_8=64, CONST IMREAD_REDUCED_COLOR_8=65, CONST IMREAD_IGNORE_ORIENTATION=128]
[CONST IMWRITE_PAM_FORMAT_NULL=0, CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1, CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2, CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3, CONST IMWRITE_PAM_FORMAT_RGB=4, CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5]
[CONST IMWRITE_EXR_TYPE_HALF=1, CONST IMWRITE_EXR_TYPE_FLOAT=2]
[CONST IMWRITE_PNG_STRATEGY_DEFAULT=0, CONST IMWRITE_PNG_STRATEGY_FILTERED=1, CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2, CONST IMWRITE_PNG_STRATEGY_RLE=3, CONST IMWRITE_PNG_STRATEGY_FIXED=4]
FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>
Objective-C: (Mat*)imdecode:(Mat*)buf flags:(int)flags
FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>
Objective-C: (Mat*)imread:(NSString*)filename flags:(int)flags
Objective-C: (Mat*)imread:(NSString*)filename
FUNC <bool cv..haveImageReader [ARG String filename=]>
Objective-C: (BOOL)haveImageReader:(NSString*)filename
FUNC <bool cv..haveImageWriter [ARG String filename=]>
Objective-C: (BOOL)haveImageWriter:(NSString*)filename
FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>
Objective-C: (BOOL)imencode:(NSString*)ext img:(Mat*)img buf:(ByteVector*)buf params:(IntVector*)params
Objective-C: (BOOL)imencode:(NSString*)ext img:(Mat*)img buf:(ByteVector*)buf
FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>
Objective-C: (BOOL)imreadmulti:(NSString*)filename mats:(NSMutableArray<Mat*>*)mats flags:(int)flags
Objective-C: (BOOL)imreadmulti:(NSString*)filename mats:(NSMutableArray<Mat*>*)mats
FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>
Objective-C: (BOOL)imwrite:(NSString*)filename img:(Mat*)img params:(IntVector*)params
Objective-C: (BOOL)imwrite:(NSString*)filename img:(Mat*)img
